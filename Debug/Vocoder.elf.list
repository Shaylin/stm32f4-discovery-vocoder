
Vocoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d38  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001ec0  08001ec0  00011ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001edc  08001edc  00011edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ee0  08001ee0  00011ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  20000000  08001ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
  7 .bss          000000b0  2000008c  2000008c  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000013c  2000013c  0002008c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008bfc  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000013e1  00000000  00000000  00028cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000be8  00000000  00000000  0002a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b10  00000000  00000000  0002ac88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003a60  00000000  00000000  0002b798  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000390d  00000000  00000000  0002f1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00032b05  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000034bc  00000000  00000000  00032b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00036040  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001ea8 	.word	0x08001ea8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	08001ea8 	.word	0x08001ea8

080001c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001cc:	4a16      	ldr	r2, [pc, #88]	; (8000228 <SystemInit+0x60>)
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <SystemInit+0x60>)
 80001d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001dc:	4a13      	ldr	r2, [pc, #76]	; (800022c <SystemInit+0x64>)
 80001de:	4b13      	ldr	r3, [pc, #76]	; (800022c <SystemInit+0x64>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e8:	4b10      	ldr	r3, [pc, #64]	; (800022c <SystemInit+0x64>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ee:	4a0f      	ldr	r2, [pc, #60]	; (800022c <SystemInit+0x64>)
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <SystemInit+0x64>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <SystemInit+0x64>)
 8000200:	4a0b      	ldr	r2, [pc, #44]	; (8000230 <SystemInit+0x68>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	4a09      	ldr	r2, [pc, #36]	; (800022c <SystemInit+0x64>)
 8000206:	4b09      	ldr	r3, [pc, #36]	; (800022c <SystemInit+0x64>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <SystemInit+0x64>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000216:	f000 f80d 	bl	8000234 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <SystemInit+0x60>)
 800021c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000220:	609a      	str	r2, [r3, #8]
#endif
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	e000ed00 	.word	0xe000ed00
 800022c:	40023800 	.word	0x40023800
 8000230:	24003010 	.word	0x24003010

08000234 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	2300      	movs	r3, #0
 8000240:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000242:	4a36      	ldr	r2, [pc, #216]	; (800031c <SetSysClock+0xe8>)
 8000244:	4b35      	ldr	r3, [pc, #212]	; (800031c <SetSysClock+0xe8>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800024c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800024e:	4b33      	ldr	r3, [pc, #204]	; (800031c <SetSysClock+0xe8>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000256:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3301      	adds	r3, #1
 800025c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d103      	bne.n	800026c <SetSysClock+0x38>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800026a:	d1f0      	bne.n	800024e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800026c:	4b2b      	ldr	r3, [pc, #172]	; (800031c <SetSysClock+0xe8>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000274:	2b00      	cmp	r3, #0
 8000276:	d002      	beq.n	800027e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000278:	2301      	movs	r3, #1
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	e001      	b.n	8000282 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800027e:	2300      	movs	r3, #0
 8000280:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	2b01      	cmp	r3, #1
 8000286:	d142      	bne.n	800030e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000288:	4a24      	ldr	r2, [pc, #144]	; (800031c <SetSysClock+0xe8>)
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <SetSysClock+0xe8>)
 800028c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800028e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000292:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000294:	4a22      	ldr	r2, [pc, #136]	; (8000320 <SetSysClock+0xec>)
 8000296:	4b22      	ldr	r3, [pc, #136]	; (8000320 <SetSysClock+0xec>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800029e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80002a0:	4a1e      	ldr	r2, [pc, #120]	; (800031c <SetSysClock+0xe8>)
 80002a2:	4b1e      	ldr	r3, [pc, #120]	; (800031c <SetSysClock+0xe8>)
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80002a8:	4a1c      	ldr	r2, [pc, #112]	; (800031c <SetSysClock+0xe8>)
 80002aa:	4b1c      	ldr	r3, [pc, #112]	; (800031c <SetSysClock+0xe8>)
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002b2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002b4:	4a19      	ldr	r2, [pc, #100]	; (800031c <SetSysClock+0xe8>)
 80002b6:	4b19      	ldr	r3, [pc, #100]	; (800031c <SetSysClock+0xe8>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002be:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002c0:	4b16      	ldr	r3, [pc, #88]	; (800031c <SetSysClock+0xe8>)
 80002c2:	4a18      	ldr	r2, [pc, #96]	; (8000324 <SetSysClock+0xf0>)
 80002c4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002c6:	4a15      	ldr	r2, [pc, #84]	; (800031c <SetSysClock+0xe8>)
 80002c8:	4b14      	ldr	r3, [pc, #80]	; (800031c <SetSysClock+0xe8>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002d0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002d2:	bf00      	nop
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <SetSysClock+0xe8>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d0f9      	beq.n	80002d4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80002e0:	4b11      	ldr	r3, [pc, #68]	; (8000328 <SetSysClock+0xf4>)
 80002e2:	f240 6205 	movw	r2, #1541	; 0x605
 80002e6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002e8:	4a0c      	ldr	r2, [pc, #48]	; (800031c <SetSysClock+0xe8>)
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <SetSysClock+0xe8>)
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	f023 0303 	bic.w	r3, r3, #3
 80002f2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002f4:	4a09      	ldr	r2, [pc, #36]	; (800031c <SetSysClock+0xe8>)
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <SetSysClock+0xe8>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	f043 0302 	orr.w	r3, r3, #2
 80002fe:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000300:	bf00      	nop
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <SetSysClock+0xe8>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	f003 030c 	and.w	r3, r3, #12
 800030a:	2b08      	cmp	r3, #8
 800030c:	d1f9      	bne.n	8000302 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40023800 	.word	0x40023800
 8000320:	40007000 	.word	0x40007000
 8000324:	07405408 	.word	0x07405408
 8000328:	40023c00 	.word	0x40023c00

0800032c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop

0800033c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000340:	e7fe      	b.n	8000340 <HardFault_Handler+0x4>
 8000342:	bf00      	nop

08000344 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000348:	e7fe      	b.n	8000348 <MemManage_Handler+0x4>
 800034a:	bf00      	nop

0800034c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000350:	e7fe      	b.n	8000350 <BusFault_Handler+0x4>
 8000352:	bf00      	nop

08000354 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000358:	e7fe      	b.n	8000358 <UsageFault_Handler+0x4>
 800035a:	bf00      	nop

0800035c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop

0800036c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop

0800037c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop

0800038c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop

0800039c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800039c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003a2:	e003      	b.n	80003ac <LoopCopyDataInit>

080003a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003aa:	3104      	adds	r1, #4

080003ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003ac:	480b      	ldr	r0, [pc, #44]	; (80003dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003b4:	d3f6      	bcc.n	80003a4 <CopyDataInit>
  ldr  r2, =_sbss
 80003b6:	4a0b      	ldr	r2, [pc, #44]	; (80003e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003b8:	e002      	b.n	80003c0 <LoopFillZerobss>

080003ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003bc:	f842 3b04 	str.w	r3, [r2], #4

080003c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003c4:	d3f9      	bcc.n	80003ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003c6:	f7ff feff 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ca:	f001 fcc1 	bl	8001d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ce:	f000 fac3 	bl	8000958 <main>
  bx  lr    
 80003d2:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003d4:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80003d8:	08001ee4 	.word	0x08001ee4
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003e0:	2000008c 	.word	0x2000008c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80003e4:	2000008c 	.word	0x2000008c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003e8:	2000013c 	.word	0x2000013c

080003ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003ec:	e7fe      	b.n	80003ec <ADC_IRQHandler>
	...

080003f0 <initAudioOutDAC>:
void initAudioOutTIM2(uint32_t arr);
void initAudioOutNVIC(void);
void initAudioOutDMA(uint16_t* buffer, uint32_t size);

void initAudioOutDAC(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 80003f6:	2101      	movs	r1, #1
 80003f8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80003fc:	f000 fe06 	bl	800100c <RCC_APB1PeriphClockCmd>
	DAC_InitTypeDef DACStruct;
	DACStruct.DAC_Trigger = DAC_Trigger_T4_TRGO;
 8000400:	232c      	movs	r3, #44	; 0x2c
 8000402:	603b      	str	r3, [r7, #0]
	DACStruct.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8000404:	2300      	movs	r3, #0
 8000406:	607b      	str	r3, [r7, #4]
	DACStruct.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
	DAC_Init(DAC_Channel_1, &DACStruct);
 800040c:	463b      	mov	r3, r7
 800040e:	4619      	mov	r1, r3
 8000410:	2000      	movs	r0, #0
 8000412:	f001 f9f3 	bl	80017fc <DAC_Init>
	DAC_DMACmd(DAC_Channel_1, ENABLE);
 8000416:	2101      	movs	r1, #1
 8000418:	2000      	movs	r0, #0
 800041a:	f001 fa65 	bl	80018e8 <DAC_DMACmd>
	DAC_Cmd(DAC_Channel_1, ENABLE);
 800041e:	2101      	movs	r1, #1
 8000420:	2000      	movs	r0, #0
 8000422:	f001 fa1f 	bl	8001864 <DAC_Cmd>
}
 8000426:	bf00      	nop
 8000428:	3710      	adds	r7, #16
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop

08000430 <initAudioOutGPIO>:

void initAudioOutGPIO(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000436:	2101      	movs	r1, #1
 8000438:	2001      	movs	r0, #1
 800043a:	f000 fdc7 	bl	8000fcc <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef GPIOStruct;
	GPIOStruct.GPIO_Pin = GPIO_Pin_4;//channel 1
 800043e:	2310      	movs	r3, #16
 8000440:	603b      	str	r3, [r7, #0]
	GPIOStruct.GPIO_Speed = GPIO_Mode_AN;
 8000442:	2303      	movs	r3, #3
 8000444:	717b      	strb	r3, [r7, #5]
	GPIOStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8000446:	2300      	movs	r3, #0
 8000448:	717b      	strb	r3, [r7, #5]
	GPIOStruct.GPIO_OType = GPIO_OType_PP;
 800044a:	2300      	movs	r3, #0
 800044c:	71bb      	strb	r3, [r7, #6]
	GPIOStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIOStruct);
 8000452:	463b      	mov	r3, r7
 8000454:	4619      	mov	r1, r3
 8000456:	4803      	ldr	r0, [pc, #12]	; (8000464 <initAudioOutGPIO+0x34>)
 8000458:	f000 fe58 	bl	800110c <GPIO_Init>
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40020000 	.word	0x40020000

08000468 <initAudioOutTIM2>:
	TIM_SelectOutputTrigger(TIM4, TIM_TRGOSource_Update);
	TIM_Cmd(TIM4, ENABLE);
}

void initAudioOutTIM2(uint32_t arr)
{ //DO NOT USE TIMER 6 - ITS TRGO DOES NOT EXIST - IT SEEMS TO USE TIMER2's instead
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000470:	2101      	movs	r1, #1
 8000472:	2004      	movs	r0, #4
 8000474:	f000 fdca 	bl	800100c <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseInitTypeDef TimerStruct;
	TimerStruct.TIM_Period = arr-1;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3b01      	subs	r3, #1
 800047c:	613b      	str	r3, [r7, #16]
	TimerStruct.TIM_Prescaler = 1-1;
 800047e:	2300      	movs	r3, #0
 8000480:	81bb      	strh	r3, [r7, #12]
	TimerStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	82bb      	strh	r3, [r7, #20]
	TimerStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000486:	2300      	movs	r3, #0
 8000488:	81fb      	strh	r3, [r7, #14]
	TIM_TimeBaseInit(TIM4, &TimerStruct);
 800048a:	f107 030c 	add.w	r3, r7, #12
 800048e:	4619      	mov	r1, r3
 8000490:	4807      	ldr	r0, [pc, #28]	; (80004b0 <initAudioOutTIM2+0x48>)
 8000492:	f000 fcc7 	bl	8000e24 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM4, TIM_TRGOSource_Update);
 8000496:	2120      	movs	r1, #32
 8000498:	4805      	ldr	r0, [pc, #20]	; (80004b0 <initAudioOutTIM2+0x48>)
 800049a:	f000 fd4f 	bl	8000f3c <TIM_SelectOutputTrigger>
	TIM_Cmd(TIM4, ENABLE);
 800049e:	2101      	movs	r1, #1
 80004a0:	4803      	ldr	r0, [pc, #12]	; (80004b0 <initAudioOutTIM2+0x48>)
 80004a2:	f000 fd2b 	bl	8000efc <TIM_Cmd>
}
 80004a6:	bf00      	nop
 80004a8:	3718      	adds	r7, #24
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40000800 	.word	0x40000800

080004b4 <initAudioOutNVIC>:


void initAudioOutNVIC(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVICStruct;
	NVICStruct.NVIC_IRQChannel = DMA1_Stream5_IRQn;
 80004ba:	2310      	movs	r3, #16
 80004bc:	713b      	strb	r3, [r7, #4]
	NVICStruct.NVIC_IRQChannelCmd = ENABLE;
 80004be:	2301      	movs	r3, #1
 80004c0:	71fb      	strb	r3, [r7, #7]
	NVICStruct.NVIC_IRQChannelPreemptionPriority=0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	717b      	strb	r3, [r7, #5]
	NVICStruct.NVIC_IRQChannelSubPriority=0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVICStruct);
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	4618      	mov	r0, r3
 80004ce:	f001 fbdd 	bl	8001c8c <NVIC_Init>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop

080004dc <initAudioOutDMA>:

void initAudioOutDMA(uint16_t* buffer, uint32_t size)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b092      	sub	sp, #72	; 0x48
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 80004e6:	2101      	movs	r1, #1
 80004e8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80004ec:	f000 fd6e 	bl	8000fcc <RCC_AHB1PeriphClockCmd>
	DMA_DeInit(DMA1_Stream5);
 80004f0:	481d      	ldr	r0, [pc, #116]	; (8000568 <initAudioOutDMA+0x8c>)
 80004f2:	f000 feb3 	bl	800125c <DMA_DeInit>
	DMA_InitTypeDef DMAStruct;
	DMA_StructInit(&DMAStruct);
 80004f6:	f107 030c 	add.w	r3, r7, #12
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 ffda 	bl	80014b4 <DMA_StructInit>
	DMAStruct.DMA_Channel = DMA_Channel_7;
 8000500:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8000504:	60fb      	str	r3, [r7, #12]
	DMAStruct.DMA_PeripheralBaseAddr =(uint32_t)(DAC_BASE + 0x08);
 8000506:	4b19      	ldr	r3, [pc, #100]	; (800056c <initAudioOutDMA+0x90>)
 8000508:	613b      	str	r3, [r7, #16]
	DMAStruct.DMA_Memory0BaseAddr = (uint32_t)(buffer);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	617b      	str	r3, [r7, #20]
	DMAStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 800050e:	2340      	movs	r3, #64	; 0x40
 8000510:	61bb      	str	r3, [r7, #24]
	DMAStruct.DMA_BufferSize = size;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	61fb      	str	r3, [r7, #28]
	DMAStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8000516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051a:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMAStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800051c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000520:	627b      	str	r3, [r7, #36]	; 0x24
	DMAStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000522:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28
	DMAStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000528:	2300      	movs	r3, #0
 800052a:	623b      	str	r3, [r7, #32]
	DMAStruct.DMA_Mode = DMA_Mode_Normal;
 800052c:	2300      	movs	r3, #0
 800052e:	633b      	str	r3, [r7, #48]	; 0x30
	DMAStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8000530:	2300      	movs	r3, #0
 8000532:	63bb      	str	r3, [r7, #56]	; 0x38
	DMAStruct.DMA_Priority = DMA_Priority_High;
 8000534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000538:	637b      	str	r3, [r7, #52]	; 0x34
	DMAStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800053a:	2300      	movs	r3, #0
 800053c:	643b      	str	r3, [r7, #64]	; 0x40
	DMAStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800053e:	2300      	movs	r3, #0
 8000540:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_ITConfig(DMA1_Stream5, DMA_IT_TC, ENABLE);
 8000542:	2201      	movs	r2, #1
 8000544:	2110      	movs	r1, #16
 8000546:	4808      	ldr	r0, [pc, #32]	; (8000568 <initAudioOutDMA+0x8c>)
 8000548:	f001 f88a 	bl	8001660 <DMA_ITConfig>
	DMA_Init(DMA1_Stream5, &DMAStruct);
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	4619      	mov	r1, r3
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <initAudioOutDMA+0x8c>)
 8000554:	f000 ff56 	bl	8001404 <DMA_Init>
	DMA_Cmd(DMA1_Stream5, ENABLE);
 8000558:	2101      	movs	r1, #1
 800055a:	4803      	ldr	r0, [pc, #12]	; (8000568 <initAudioOutDMA+0x8c>)
 800055c:	f000 ffe2 	bl	8001524 <DMA_Cmd>
}
 8000560:	bf00      	nop
 8000562:	3748      	adds	r7, #72	; 0x48
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40026088 	.word	0x40026088
 800056c:	40007408 	.word	0x40007408

08000570 <initAudioOut2>:
	initAudioOutNVIC();
	initAudioOutDMA(buffer,size);
}

void initAudioOut2(uint16_t* buffer, uint32_t size, uint32_t arr)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	DAC_DeInit();
 800057c:	f001 f930 	bl	80017e0 <DAC_DeInit>
	TIM_DeInit(TIM4);
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <initAudioOut2+0x40>)
 8000582:	f000 fb6f 	bl	8000c64 <TIM_DeInit>
	DMA_DeInit(DMA1_Stream5);
 8000586:	480b      	ldr	r0, [pc, #44]	; (80005b4 <initAudioOut2+0x44>)
 8000588:	f000 fe68 	bl	800125c <DMA_DeInit>
	initAudioOutDAC();
 800058c:	f7ff ff30 	bl	80003f0 <initAudioOutDAC>
	initAudioOutGPIO();
 8000590:	f7ff ff4e 	bl	8000430 <initAudioOutGPIO>
	initAudioOutTIM2(arr);
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f7ff ff67 	bl	8000468 <initAudioOutTIM2>
	initAudioOutNVIC();
 800059a:	f7ff ff8b 	bl	80004b4 <initAudioOutNVIC>
	initAudioOutDMA(buffer,size);
 800059e:	68b9      	ldr	r1, [r7, #8]
 80005a0:	68f8      	ldr	r0, [r7, #12]
 80005a2:	f7ff ff9b 	bl	80004dc <initAudioOutDMA>
}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40000800 	.word	0x40000800
 80005b4:	40026088 	.word	0x40026088

080005b8 <initAudioInGPIO>:
void initAudioInNVIC(void);
void initAudioInDMA(uint16_t* buffer, uint32_t size);


void initAudioInGPIO(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 80005be:	2101      	movs	r1, #1
 80005c0:	2004      	movs	r0, #4
 80005c2:	f000 fd03 	bl	8000fcc <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIOStruct;
	GPIOStruct.GPIO_Mode = GPIO_Mode_AN;
 80005c6:	2303      	movs	r3, #3
 80005c8:	713b      	strb	r3, [r7, #4]
	GPIOStruct.GPIO_Pin = GPIO_Pin_2;
 80005ca:	2304      	movs	r3, #4
 80005cc:	603b      	str	r3, [r7, #0]
	GPIOStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	71fb      	strb	r3, [r7, #7]
	GPIOStruct.GPIO_Speed = GPIO_Speed_2MHz;
 80005d2:	2300      	movs	r3, #0
 80005d4:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOC, &GPIOStruct);
 80005d6:	463b      	mov	r3, r7
 80005d8:	4619      	mov	r1, r3
 80005da:	4803      	ldr	r0, [pc, #12]	; (80005e8 <initAudioInGPIO+0x30>)
 80005dc:	f000 fd96 	bl	800110c <GPIO_Init>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40020800 	.word	0x40020800

080005ec <initAudioInTIM>:

//Timer 2 Runs at 84MHz - Using 16000Hz sampling rate
void initAudioInTIM(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 80005f2:	2101      	movs	r1, #1
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 fd09 	bl	800100c <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef TimerStruct;
	TimerStruct.TIM_Period = 5250-1;
 80005fa:	f241 4381 	movw	r3, #5249	; 0x1481
 80005fe:	60bb      	str	r3, [r7, #8]
	TimerStruct.TIM_Prescaler = 1-1;
 8000600:	2300      	movs	r3, #0
 8000602:	80bb      	strh	r3, [r7, #4]
	TimerStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000604:	2300      	movs	r3, #0
 8000606:	80fb      	strh	r3, [r7, #6]
	TimerStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM2, &TimerStruct);
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4619      	mov	r1, r3
 8000610:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000614:	f000 fc06 	bl	8000e24 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM2,TIM_TRGOSource_Update);
 8000618:	2120      	movs	r1, #32
 800061a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800061e:	f000 fc8d 	bl	8000f3c <TIM_SelectOutputTrigger>
	TIM_Cmd(TIM2, ENABLE);
 8000622:	2101      	movs	r1, #1
 8000624:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000628:	f000 fc68 	bl	8000efc <TIM_Cmd>
}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <initAudioInADC>:

void initAudioInADC(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);
 800063a:	2101      	movs	r1, #1
 800063c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000640:	f000 fd04 	bl	800104c <RCC_APB2PeriphClockCmd>
	ADC_CommonInitTypeDef ADCCommonStruct;
	ADCCommonStruct.ADC_Mode = ADC_Mode_Independent;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
	ADCCommonStruct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
	ADCCommonStruct.ADC_Prescaler = ADC_Prescaler_Div2;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
	ADCCommonStruct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
	ADC_CommonInit(&ADCCommonStruct);
 8000654:	f107 0318 	add.w	r3, r7, #24
 8000658:	4618      	mov	r0, r3
 800065a:	f001 f9d1 	bl	8001a00 <ADC_CommonInit>

	ADC_InitTypeDef ADCStruct;
	ADCStruct.ADC_ContinuousConvMode = DISABLE;
 800065e:	2300      	movs	r3, #0
 8000660:	717b      	strb	r3, [r7, #5]
	ADCStruct.ADC_DataAlign = ADC_DataAlign_Right;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
	ADCStruct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_TRGO;
 8000666:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800066a:	60fb      	str	r3, [r7, #12]
	ADCStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 800066c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
	ADCStruct.ADC_NbrOfConversion = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	753b      	strb	r3, [r7, #20]
	ADCStruct.ADC_Resolution = ADC_Resolution_12b;
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
	ADCStruct.ADC_ScanConvMode = DISABLE;
 800067a:	2300      	movs	r3, #0
 800067c:	713b      	strb	r3, [r7, #4]
	ADC_Init(ADC1, &ADCStruct);
 800067e:	463b      	mov	r3, r7
 8000680:	4619      	mov	r1, r3
 8000682:	480c      	ldr	r0, [pc, #48]	; (80006b4 <initAudioInADC+0x80>)
 8000684:	f001 f966 	bl	8001954 <ADC_Init>

	ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 1, ADC_SampleTime_15Cycles);
 8000688:	2301      	movs	r3, #1
 800068a:	2201      	movs	r2, #1
 800068c:	210c      	movs	r1, #12
 800068e:	4809      	ldr	r0, [pc, #36]	; (80006b4 <initAudioInADC+0x80>)
 8000690:	f001 f9fa 	bl	8001a88 <ADC_RegularChannelConfig>
	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
 8000694:	2101      	movs	r1, #1
 8000696:	4807      	ldr	r0, [pc, #28]	; (80006b4 <initAudioInADC+0x80>)
 8000698:	f001 fadc 	bl	8001c54 <ADC_DMARequestAfterLastTransferCmd>
	ADC_DMACmd(ADC1, ENABLE);
 800069c:	2101      	movs	r1, #1
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <initAudioInADC+0x80>)
 80006a0:	f001 fabc 	bl	8001c1c <ADC_DMACmd>
	ADC_Cmd(ADC1, ENABLE);
 80006a4:	2101      	movs	r1, #1
 80006a6:	4803      	ldr	r0, [pc, #12]	; (80006b4 <initAudioInADC+0x80>)
 80006a8:	f001 f9d2 	bl	8001a50 <ADC_Cmd>
}
 80006ac:	bf00      	nop
 80006ae:	3728      	adds	r7, #40	; 0x28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40012000 	.word	0x40012000

080006b8 <initAudioInNVIC>:

void initAudioInNVIC(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVICStruct;
	NVICStruct.NVIC_IRQChannel = DMA2_Stream0_IRQn;
 80006be:	2338      	movs	r3, #56	; 0x38
 80006c0:	713b      	strb	r3, [r7, #4]
	NVICStruct.NVIC_IRQChannelCmd = ENABLE;
 80006c2:	2301      	movs	r3, #1
 80006c4:	71fb      	strb	r3, [r7, #7]
	NVICStruct.NVIC_IRQChannelPreemptionPriority=0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	717b      	strb	r3, [r7, #5]
	NVICStruct.NVIC_IRQChannelSubPriority=0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVICStruct);
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fadb 	bl	8001c8c <NVIC_Init>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop

080006e0 <initAudioInDMA>:

void initAudioInDMA(uint16_t* buffer, uint32_t size)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b092      	sub	sp, #72	; 0x48
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 ,ENABLE);
 80006ea:	2101      	movs	r1, #1
 80006ec:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80006f0:	f000 fc6c 	bl	8000fcc <RCC_AHB1PeriphClockCmd>

	DMA_InitTypeDef DMAStruct;
	DMA_DeInit(DMA2_Stream0);
 80006f4:	481b      	ldr	r0, [pc, #108]	; (8000764 <initAudioInDMA+0x84>)
 80006f6:	f000 fdb1 	bl	800125c <DMA_DeInit>
	DMAStruct.DMA_Channel = DMA_Channel_0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
	DMAStruct.DMA_PeripheralBaseAddr = (uint32_t)(&ADC1->DR);
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <initAudioInDMA+0x88>)
 8000700:	613b      	str	r3, [r7, #16]
	DMAStruct.DMA_Memory0BaseAddr = (uint32_t)(buffer);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	617b      	str	r3, [r7, #20]
	DMAStruct.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
	DMAStruct.DMA_BufferSize = size;
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	61fb      	str	r3, [r7, #28]
	DMAStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 800070e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMAStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
	DMAStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800071a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
	DMAStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
	DMAStruct.DMA_Mode = DMA_Mode_Normal;
 8000724:	2300      	movs	r3, #0
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
	DMAStruct.DMA_Priority = DMA_Priority_High;
 8000728:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800072c:	637b      	str	r3, [r7, #52]	; 0x34
	DMAStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800072e:	2300      	movs	r3, #0
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
	DMAStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8000732:	2301      	movs	r3, #1
 8000734:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMAStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8000736:	2300      	movs	r3, #0
 8000738:	643b      	str	r3, [r7, #64]	; 0x40
	DMAStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800073a:	2300      	movs	r3, #0
 800073c:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init(DMA2_Stream0, &DMAStruct);
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	4619      	mov	r1, r3
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <initAudioInDMA+0x84>)
 8000746:	f000 fe5d 	bl	8001404 <DMA_Init>
	DMA_ITConfig(DMA2_Stream0, DMA_IT_TC, ENABLE);
 800074a:	2201      	movs	r2, #1
 800074c:	2110      	movs	r1, #16
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <initAudioInDMA+0x84>)
 8000750:	f000 ff86 	bl	8001660 <DMA_ITConfig>
	DMA_Cmd(DMA2_Stream0, ENABLE);
 8000754:	2101      	movs	r1, #1
 8000756:	4803      	ldr	r0, [pc, #12]	; (8000764 <initAudioInDMA+0x84>)
 8000758:	f000 fee4 	bl	8001524 <DMA_Cmd>
}
 800075c:	bf00      	nop
 800075e:	3748      	adds	r7, #72	; 0x48
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40026410 	.word	0x40026410
 8000768:	4001204c 	.word	0x4001204c

0800076c <initAudioIn>:

void initAudioIn(uint16_t* buffer, uint32_t size)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
	TIM_DeInit(TIM2);
 8000776:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800077a:	f000 fa73 	bl	8000c64 <TIM_DeInit>
	ADC_DeInit();
 800077e:	f001 f8db 	bl	8001938 <ADC_DeInit>
	DMA_DeInit(DMA2_Stream0);
 8000782:	4809      	ldr	r0, [pc, #36]	; (80007a8 <initAudioIn+0x3c>)
 8000784:	f000 fd6a 	bl	800125c <DMA_DeInit>
	initAudioInGPIO();
 8000788:	f7ff ff16 	bl	80005b8 <initAudioInGPIO>
	initAudioInTIM();
 800078c:	f7ff ff2e 	bl	80005ec <initAudioInTIM>
	initAudioInADC();
 8000790:	f7ff ff50 	bl	8000634 <initAudioInADC>
	initAudioInNVIC();
 8000794:	f7ff ff90 	bl	80006b8 <initAudioInNVIC>
	initAudioInDMA(buffer, size);
 8000798:	6839      	ldr	r1, [r7, #0]
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff ffa0 	bl	80006e0 <initAudioInDMA>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40026410 	.word	0x40026410

080007ac <echo>:
void overdrive(uint16_t* buffer, uint32_t size);
void vader(uint16_t* buffer, uint32_t size);
void cubeShape(uint16_t* buffer, uint32_t size);

void echo(uint16_t* buffer, uint32_t size, uint16_t ms)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	4613      	mov	r3, r2
 80007b8:	80fb      	strh	r3, [r7, #6]
	uint32_t samples = ms*16;
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	613b      	str	r3, [r7, #16]
	if(samples>size)
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d90c      	bls.n	80007e2 <echo+0x36>
	{
		STM_EVAL_LEDInit(LED5);
 80007c8:	2002      	movs	r0, #2
 80007ca:	f000 f9ed 	bl	8000ba8 <STM_EVAL_LEDInit>
		STM_EVAL_LEDOn(LED5);
 80007ce:	2002      	movs	r0, #2
 80007d0:	f000 fa18 	bl	8000c04 <STM_EVAL_LEDOn>
		STM_EVAL_LEDInit(LED6);
 80007d4:	2003      	movs	r0, #3
 80007d6:	f000 f9e7 	bl	8000ba8 <STM_EVAL_LEDInit>
		STM_EVAL_LEDOn(LED6);
 80007da:	2003      	movs	r0, #3
 80007dc:	f000 fa12 	bl	8000c04 <STM_EVAL_LEDOn>
		return;
 80007e0:	e020      	b.n	8000824 <echo+0x78>
	}
	uint32_t i;
	for(i=samples; i<size; i++)
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	e019      	b.n	800081c <echo+0x70>
	{
		buffer[i] = buffer[i]/2 +buffer[i-samples]/2;
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	4413      	add	r3, r2
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	68f9      	ldr	r1, [r7, #12]
 80007f6:	440a      	add	r2, r1
 80007f8:	8812      	ldrh	r2, [r2, #0]
 80007fa:	0852      	lsrs	r2, r2, #1
 80007fc:	b291      	uxth	r1, r2
 80007fe:	6978      	ldr	r0, [r7, #20]
 8000800:	693a      	ldr	r2, [r7, #16]
 8000802:	1a82      	subs	r2, r0, r2
 8000804:	0052      	lsls	r2, r2, #1
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	4402      	add	r2, r0
 800080a:	8812      	ldrh	r2, [r2, #0]
 800080c:	0852      	lsrs	r2, r2, #1
 800080e:	b292      	uxth	r2, r2
 8000810:	440a      	add	r2, r1
 8000812:	b292      	uxth	r2, r2
 8000814:	801a      	strh	r2, [r3, #0]
		STM_EVAL_LEDInit(LED6);
		STM_EVAL_LEDOn(LED6);
		return;
	}
	uint32_t i;
	for(i=samples; i<size; i++)
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	3301      	adds	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697a      	ldr	r2, [r7, #20]
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	429a      	cmp	r2, r3
 8000822:	d3e1      	bcc.n	80007e8 <echo+0x3c>
		buffer[i] = buffer[i]/2 +buffer[i-samples]/2;
	}
	//Need to put this when the effects chain ends to play back
	//initAudioOut(buffer,size);
	//initAudioOut(buffer,size);
}
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop

0800082c <vader>:
	initAudioOut(buffer,size);
	initAudioOut(buffer,size);
}

void vader(uint16_t* buffer, uint32_t size)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
	echo(buffer, size, 50);
 8000836:	2232      	movs	r2, #50	; 0x32
 8000838:	6839      	ldr	r1, [r7, #0]
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ffb6 	bl	80007ac <echo>
	initAudioOut2(buffer,size,7500);
 8000840:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000844:	6839      	ldr	r1, [r7, #0]
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff fe92 	bl	8000570 <initAudioOut2>
	initAudioOut2(buffer,size,7500);
 800084c:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000850:	6839      	ldr	r1, [r7, #0]
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff fe8c 	bl	8000570 <initAudioOut2>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <initButtons>:
void initButtons(void);
int8_t checkButton(uint8_t butno);

void initButtons(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000866:	2101      	movs	r1, #1
 8000868:	2008      	movs	r0, #8
 800086a:	f000 fbaf 	bl	8000fcc <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef GPIOStruct;
	GPIOStruct.GPIO_Mode = GPIO_Mode_IN;
 800086e:	2300      	movs	r3, #0
 8000870:	713b      	strb	r3, [r7, #4]
	GPIOStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2;
 8000872:	2307      	movs	r3, #7
 8000874:	603b      	str	r3, [r7, #0]
	GPIOStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000876:	2301      	movs	r3, #1
 8000878:	71fb      	strb	r3, [r7, #7]
	GPIOStruct.GPIO_Speed = GPIO_Speed_2MHz;
 800087a:	2300      	movs	r3, #0
 800087c:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOD, &GPIOStruct);
 800087e:	463b      	mov	r3, r7
 8000880:	4619      	mov	r1, r3
 8000882:	4803      	ldr	r0, [pc, #12]	; (8000890 <initButtons+0x30>)
 8000884:	f000 fc42 	bl	800110c <GPIO_Init>
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40020c00 	.word	0x40020c00

08000894 <checkButton>:

int8_t checkButton(uint8_t butno)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	if(butno==0)
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d106      	bne.n	80008b2 <checkButton+0x1e>
	{
		return GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_0);
 80008a4:	2101      	movs	r1, #1
 80008a6:	4810      	ldr	r0, [pc, #64]	; (80008e8 <checkButton+0x54>)
 80008a8:	f000 fcbe 	bl	8001228 <GPIO_ReadInputDataBit>
 80008ac:	4603      	mov	r3, r0
 80008ae:	b25b      	sxtb	r3, r3
 80008b0:	e015      	b.n	80008de <checkButton+0x4a>
	}
	else if(butno==1)
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d106      	bne.n	80008c6 <checkButton+0x32>
	{
		return GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_1);
 80008b8:	2102      	movs	r1, #2
 80008ba:	480b      	ldr	r0, [pc, #44]	; (80008e8 <checkButton+0x54>)
 80008bc:	f000 fcb4 	bl	8001228 <GPIO_ReadInputDataBit>
 80008c0:	4603      	mov	r3, r0
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	e00b      	b.n	80008de <checkButton+0x4a>
	}
	else if(butno==2)
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d106      	bne.n	80008da <checkButton+0x46>
	{
		return GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_2);
 80008cc:	2104      	movs	r1, #4
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <checkButton+0x54>)
 80008d0:	f000 fcaa 	bl	8001228 <GPIO_ReadInputDataBit>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b25b      	sxtb	r3, r3
 80008d8:	e001      	b.n	80008de <checkButton+0x4a>
	}
	else
	{
		return -1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40020c00 	.word	0x40020c00

080008ec <DMA2_Stream0_IRQHandler>:
uint8_t process = 0;
uint16_t* buffer;
uint32_t size = 64000;

void DMA2_Stream0_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	if (DMA_GetITStatus(DMA2_Stream0, DMA_IT_TCIF0))
 80008f0:	4909      	ldr	r1, [pc, #36]	; (8000918 <DMA2_Stream0_IRQHandler+0x2c>)
 80008f2:	480a      	ldr	r0, [pc, #40]	; (800091c <DMA2_Stream0_IRQHandler+0x30>)
 80008f4:	f000 feee 	bl	80016d4 <DMA_GetITStatus>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d009      	beq.n	8000912 <DMA2_Stream0_IRQHandler+0x26>
	{
		DMA_ClearITPendingBit(DMA2_Stream0, DMA_IT_TCIF0);
 80008fe:	4906      	ldr	r1, [pc, #24]	; (8000918 <DMA2_Stream0_IRQHandler+0x2c>)
 8000900:	4806      	ldr	r0, [pc, #24]	; (800091c <DMA2_Stream0_IRQHandler+0x30>)
 8000902:	f000 ff3f 	bl	8001784 <DMA_ClearITPendingBit>
		inputDone = 1;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <DMA2_Stream0_IRQHandler+0x34>)
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
		process = 1;
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <DMA2_Stream0_IRQHandler+0x38>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
	}
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	10008020 	.word	0x10008020
 800091c:	40026410 	.word	0x40026410
 8000920:	20000000 	.word	0x20000000
 8000924:	200000a8 	.word	0x200000a8

08000928 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	if (DMA_GetITStatus(DMA1_Stream5, DMA_IT_TCIF5))
 800092c:	4907      	ldr	r1, [pc, #28]	; (800094c <DMA1_Stream5_IRQHandler+0x24>)
 800092e:	4808      	ldr	r0, [pc, #32]	; (8000950 <DMA1_Stream5_IRQHandler+0x28>)
 8000930:	f000 fed0 	bl	80016d4 <DMA_GetITStatus>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d006      	beq.n	8000948 <DMA1_Stream5_IRQHandler+0x20>
	{
		DMA_ClearITPendingBit(DMA1_Stream5, DMA_IT_TCIF5);
 800093a:	4904      	ldr	r1, [pc, #16]	; (800094c <DMA1_Stream5_IRQHandler+0x24>)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <DMA1_Stream5_IRQHandler+0x28>)
 800093e:	f000 ff21 	bl	8001784 <DMA_ClearITPendingBit>
		outputDone = 1;
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <DMA1_Stream5_IRQHandler+0x2c>)
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
	}
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20008800 	.word	0x20008800
 8000950:	40026088 	.word	0x40026088
 8000954:	20000001 	.word	0x20000001

08000958 <main>:

int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	buffer = (uint16_t*)malloc(sizeof(uint16_t)*size);
 800095c:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <main+0xbc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4618      	mov	r0, r3
 8000964:	f001 fa1a 	bl	8001d9c <malloc>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <main+0xc0>)
 800096e:	601a      	str	r2, [r3, #0]
	initButtons();
 8000970:	f7ff ff76 	bl	8000860 <initButtons>

	while (1)
	{
		if(inputDone)
 8000974:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <main+0xc4>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d009      	beq.n	8000990 <main+0x38>
		{
			STM_EVAL_LEDInit(LED4);
 800097c:	2000      	movs	r0, #0
 800097e:	f000 f913 	bl	8000ba8 <STM_EVAL_LEDInit>
			STM_EVAL_LEDOn(LED4);
 8000982:	2000      	movs	r0, #0
 8000984:	f000 f93e 	bl	8000c04 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED5);
 8000988:	2002      	movs	r0, #2
 800098a:	f000 f953 	bl	8000c34 <STM_EVAL_LEDOff>
 800098e:	e008      	b.n	80009a2 <main+0x4a>
		}
		else
		{
			STM_EVAL_LEDOff(LED4);
 8000990:	2000      	movs	r0, #0
 8000992:	f000 f94f 	bl	8000c34 <STM_EVAL_LEDOff>
			STM_EVAL_LEDInit(LED5);
 8000996:	2002      	movs	r0, #2
 8000998:	f000 f906 	bl	8000ba8 <STM_EVAL_LEDInit>
			STM_EVAL_LEDOn(LED5);
 800099c:	2002      	movs	r0, #2
 800099e:	f000 f931 	bl	8000c04 <STM_EVAL_LEDOn>
		}
		if(outputDone && checkButton(0)==1)
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <main+0xc8>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d013      	beq.n	80009d2 <main+0x7a>
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff ff72 	bl	8000894 <checkButton>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d10d      	bne.n	80009d2 <main+0x7a>
		{
			inputDone = 0;
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <main+0xc4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
			outputDone = 0;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <main+0xc8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
			initAudioIn(buffer, size);
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <main+0xc0>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <main+0xbc>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4610      	mov	r0, r2
 80009ce:	f7ff fecd 	bl	800076c <initAudioIn>
		}

		if(process)
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <main+0xcc>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00a      	beq.n	80009f0 <main+0x98>
		{
			vader(buffer,size);
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <main+0xc0>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <main+0xbc>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4619      	mov	r1, r3
 80009e4:	4610      	mov	r0, r2
 80009e6:	f7ff ff21 	bl	800082c <vader>
			process = 0;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <main+0xcc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
		}

		if(checkButton(0)==1)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f7ff ff4f 	bl	8000894 <checkButton>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d106      	bne.n	8000a0a <main+0xb2>
		{
			STM_EVAL_LEDInit(LED3);
 80009fc:	2001      	movs	r0, #1
 80009fe:	f000 f8d3 	bl	8000ba8 <STM_EVAL_LEDInit>
			STM_EVAL_LEDOn(LED3);
 8000a02:	2001      	movs	r0, #1
 8000a04:	f000 f8fe 	bl	8000c04 <STM_EVAL_LEDOn>
 8000a08:	e7b4      	b.n	8000974 <main+0x1c>
		}
		else
		{
			STM_EVAL_LEDOff(LED3);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f000 f912 	bl	8000c34 <STM_EVAL_LEDOff>
		}
	}
 8000a10:	e7b0      	b.n	8000974 <main+0x1c>
 8000a12:	bf00      	nop
 8000a14:	20000004 	.word	0x20000004
 8000a18:	200000b8 	.word	0x200000b8
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000001 	.word	0x20000001
 8000a24:	200000a8 	.word	0x200000a8

08000a28 <EVAL_AUDIO_TransferComplete_CallBack>:
}


void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){return;}
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <EVAL_AUDIO_GetSampleCallBack>:
uint16_t EVAL_AUDIO_GetSampleCallBack(void){return -1;}
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000a58:	4b37      	ldr	r3, [pc, #220]	; (8000b38 <Audio_MAL_IRQHandler+0xe4>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <Audio_MAL_IRQHandler+0xe8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	4610      	mov	r0, r2
 8000a64:	f000 fd92 	bl	800158c <DMA_GetFlagStatus>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d062      	beq.n	8000b34 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000a6e:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <Audio_MAL_IRQHandler+0xec>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d04a      	beq.n	8000b0c <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000a76:	bf00      	nop
 8000a78:	4b2f      	ldr	r3, [pc, #188]	; (8000b38 <Audio_MAL_IRQHandler+0xe4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 fd6d 	bl	800155c <DMA_GetCmdStatus>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1f7      	bne.n	8000a78 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000a88:	4b2b      	ldr	r3, [pc, #172]	; (8000b38 <Audio_MAL_IRQHandler+0xe4>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <Audio_MAL_IRQHandler+0xe8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	4610      	mov	r0, r2
 8000a94:	f000 fdb6 	bl	8001604 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <Audio_MAL_IRQHandler+0xf0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <Audio_MAL_IRQHandler+0xf4>)
 8000aa0:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000aa2:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <Audio_MAL_IRQHandler+0xec>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	bf28      	it	cs
 8000aae:	4613      	movcs	r3, r2
 8000ab0:	4a25      	ldr	r2, [pc, #148]	; (8000b48 <Audio_MAL_IRQHandler+0xf4>)
 8000ab2:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000ab4:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <Audio_MAL_IRQHandler+0xe4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4923      	ldr	r1, [pc, #140]	; (8000b48 <Audio_MAL_IRQHandler+0xf4>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fca2 	bl	8001404 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <Audio_MAL_IRQHandler+0xe4>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 fd2c 	bl	8001524 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000acc:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <Audio_MAL_IRQHandler+0xf0>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <Audio_MAL_IRQHandler+0xec>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	bf28      	it	cs
 8000adc:	460b      	movcs	r3, r1
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a18      	ldr	r2, [pc, #96]	; (8000b44 <Audio_MAL_IRQHandler+0xf0>)
 8000ae4:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <Audio_MAL_IRQHandler+0xec>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <Audio_MAL_IRQHandler+0xec>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000af2:	428b      	cmp	r3, r1
 8000af4:	bf28      	it	cs
 8000af6:	460b      	movcs	r3, r1
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	4a11      	ldr	r2, [pc, #68]	; (8000b40 <Audio_MAL_IRQHandler+0xec>)
 8000afc:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <Audio_MAL_IRQHandler+0xe4>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2101      	movs	r1, #1
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 fd0d 	bl	8001524 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000b0a:	e013      	b.n	8000b34 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <Audio_MAL_IRQHandler+0xe4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fd06 	bl	8001524 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <Audio_MAL_IRQHandler+0xe4>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <Audio_MAL_IRQHandler+0xe8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	4610      	mov	r0, r2
 8000b24:	f000 fd6e 	bl	8001604 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <Audio_MAL_IRQHandler+0xf0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff7a 	bl	8000a28 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000010 	.word	0x20000010
 8000b3c:	20000014 	.word	0x20000014
 8000b40:	20000008 	.word	0x20000008
 8000b44:	200000bc 	.word	0x200000bc
 8000b48:	200000fc 	.word	0x200000fc

08000b4c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000b50:	f7ff ff80 	bl	8000a54 <Audio_MAL_IRQHandler>
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000b5c:	f7ff ff7a 	bl	8000a54 <Audio_MAL_IRQHandler>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000b68:	2102      	movs	r1, #2
 8000b6a:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <SPI3_IRQHandler+0x3c>)
 8000b6c:	f000 fa12 	bl	8000f94 <SPI_I2S_GetFlagStatus>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d011      	beq.n	8000b9a <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <SPI3_IRQHandler+0x40>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d106      	bne.n	8000b8c <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000b7e:	f7ff ff5f 	bl	8000a40 <EVAL_AUDIO_GetSampleCallBack>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4619      	mov	r1, r3
 8000b86:	2004      	movs	r0, #4
 8000b88:	f000 fe92 	bl	80018b0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000b8c:	f7ff ff58 	bl	8000a40 <EVAL_AUDIO_GetSampleCallBack>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4619      	mov	r1, r3
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <SPI3_IRQHandler+0x3c>)
 8000b96:	f000 f9ed 	bl	8000f74 <SPI_I2S_SendData>
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40003c00 	.word	0x40003c00
 8000ba4:	2000000c 	.word	0x2000000c

08000ba8 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <STM_EVAL_LEDInit+0x50>)
 8000bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fa05 	bl	8000fcc <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <STM_EVAL_LEDInit+0x54>)
 8000bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <STM_EVAL_LEDInit+0x58>)
 8000be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be4:	f107 0208 	add.w	r2, r7, #8
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 fa8e 	bl	800110c <GPIO_Init>
}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	08001ec8 	.word	0x08001ec8
 8000bfc:	08001ec0 	.word	0x08001ec0
 8000c00:	20000018 	.word	0x20000018

08000c04 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <STM_EVAL_LEDOn+0x28>)
 8000c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c16:	79fa      	ldrb	r2, [r7, #7]
 8000c18:	4905      	ldr	r1, [pc, #20]	; (8000c30 <STM_EVAL_LEDOn+0x2c>)
 8000c1a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000c1e:	831a      	strh	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	20000018 	.word	0x20000018
 8000c30:	08001ec0 	.word	0x08001ec0

08000c34 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <STM_EVAL_LEDOff+0x28>)
 8000c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c46:	79fa      	ldrb	r2, [r7, #7]
 8000c48:	4905      	ldr	r1, [pc, #20]	; (8000c60 <STM_EVAL_LEDOff+0x2c>)
 8000c4a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000c4e:	835a      	strh	r2, [r3, #26]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	20000018 	.word	0x20000018
 8000c60:	08001ec0 	.word	0x08001ec0

08000c64 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a60      	ldr	r2, [pc, #384]	; (8000df0 <TIM_DeInit+0x18c>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d108      	bne.n	8000c86 <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8000c74:	2101      	movs	r1, #1
 8000c76:	2001      	movs	r0, #1
 8000c78:	f000 fa28 	bl	80010cc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f000 fa24 	bl	80010cc <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000c84:	e0af      	b.n	8000de6 <TIM_DeInit+0x182>
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c8c:	d108      	bne.n	8000ca0 <TIM_DeInit+0x3c>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000c8e:	2101      	movs	r1, #1
 8000c90:	2001      	movs	r0, #1
 8000c92:	f000 f9fb 	bl	800108c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8000c96:	2100      	movs	r1, #0
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f000 f9f7 	bl	800108c <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000c9e:	e0a2      	b.n	8000de6 <TIM_DeInit+0x182>
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a54      	ldr	r2, [pc, #336]	; (8000df4 <TIM_DeInit+0x190>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d108      	bne.n	8000cba <TIM_DeInit+0x56>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8000ca8:	2101      	movs	r1, #1
 8000caa:	2002      	movs	r0, #2
 8000cac:	f000 f9ee 	bl	800108c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2002      	movs	r0, #2
 8000cb4:	f000 f9ea 	bl	800108c <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000cb8:	e095      	b.n	8000de6 <TIM_DeInit+0x182>
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a4e      	ldr	r2, [pc, #312]	; (8000df8 <TIM_DeInit+0x194>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d108      	bne.n	8000cd4 <TIM_DeInit+0x70>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	2004      	movs	r0, #4
 8000cc6:	f000 f9e1 	bl	800108c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2004      	movs	r0, #4
 8000cce:	f000 f9dd 	bl	800108c <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000cd2:	e088      	b.n	8000de6 <TIM_DeInit+0x182>
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a49      	ldr	r2, [pc, #292]	; (8000dfc <TIM_DeInit+0x198>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d108      	bne.n	8000cee <TIM_DeInit+0x8a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8000cdc:	2101      	movs	r1, #1
 8000cde:	2008      	movs	r0, #8
 8000ce0:	f000 f9d4 	bl	800108c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2008      	movs	r0, #8
 8000ce8:	f000 f9d0 	bl	800108c <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000cec:	e07b      	b.n	8000de6 <TIM_DeInit+0x182>
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a43      	ldr	r2, [pc, #268]	; (8000e00 <TIM_DeInit+0x19c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d108      	bne.n	8000d08 <TIM_DeInit+0xa4>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	2010      	movs	r0, #16
 8000cfa:	f000 f9c7 	bl	800108c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8000cfe:	2100      	movs	r1, #0
 8000d00:	2010      	movs	r0, #16
 8000d02:	f000 f9c3 	bl	800108c <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000d06:	e06e      	b.n	8000de6 <TIM_DeInit+0x182>
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a3e      	ldr	r2, [pc, #248]	; (8000e04 <TIM_DeInit+0x1a0>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d108      	bne.n	8000d22 <TIM_DeInit+0xbe>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8000d10:	2101      	movs	r1, #1
 8000d12:	2020      	movs	r0, #32
 8000d14:	f000 f9ba 	bl	800108c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2020      	movs	r0, #32
 8000d1c:	f000 f9b6 	bl	800108c <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000d20:	e061      	b.n	8000de6 <TIM_DeInit+0x182>
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a38      	ldr	r2, [pc, #224]	; (8000e08 <TIM_DeInit+0x1a4>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d108      	bne.n	8000d3c <TIM_DeInit+0xd8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f000 f9cd 	bl	80010cc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8000d32:	2100      	movs	r1, #0
 8000d34:	2002      	movs	r0, #2
 8000d36:	f000 f9c9 	bl	80010cc <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000d3a:	e054      	b.n	8000de6 <TIM_DeInit+0x182>
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a33      	ldr	r2, [pc, #204]	; (8000e0c <TIM_DeInit+0x1a8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d10a      	bne.n	8000d5a <TIM_DeInit+0xf6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8000d44:	2101      	movs	r1, #1
 8000d46:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000d4a:	f000 f9bf 	bl	80010cc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000d54:	f000 f9ba 	bl	80010cc <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000d58:	e045      	b.n	8000de6 <TIM_DeInit+0x182>
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a2c      	ldr	r2, [pc, #176]	; (8000e10 <TIM_DeInit+0x1ac>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d10a      	bne.n	8000d78 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8000d62:	2101      	movs	r1, #1
 8000d64:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d68:	f000 f9b0 	bl	80010cc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d72:	f000 f9ab 	bl	80010cc <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000d76:	e036      	b.n	8000de6 <TIM_DeInit+0x182>
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a26      	ldr	r2, [pc, #152]	; (8000e14 <TIM_DeInit+0x1b0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d10a      	bne.n	8000d96 <TIM_DeInit+0x132>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8000d80:	2101      	movs	r1, #1
 8000d82:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d86:	f000 f9a1 	bl	80010cc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d90:	f000 f99c 	bl	80010cc <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000d94:	e027      	b.n	8000de6 <TIM_DeInit+0x182>
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a1f      	ldr	r2, [pc, #124]	; (8000e18 <TIM_DeInit+0x1b4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d108      	bne.n	8000db0 <TIM_DeInit+0x14c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8000d9e:	2101      	movs	r1, #1
 8000da0:	2040      	movs	r0, #64	; 0x40
 8000da2:	f000 f973 	bl	800108c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8000da6:	2100      	movs	r1, #0
 8000da8:	2040      	movs	r0, #64	; 0x40
 8000daa:	f000 f96f 	bl	800108c <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000dae:	e01a      	b.n	8000de6 <TIM_DeInit+0x182>
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a1a      	ldr	r2, [pc, #104]	; (8000e1c <TIM_DeInit+0x1b8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d108      	bne.n	8000dca <TIM_DeInit+0x166>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8000db8:	2101      	movs	r1, #1
 8000dba:	2080      	movs	r0, #128	; 0x80
 8000dbc:	f000 f966 	bl	800108c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2080      	movs	r0, #128	; 0x80
 8000dc4:	f000 f962 	bl	800108c <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000dc8:	e00d      	b.n	8000de6 <TIM_DeInit+0x182>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <TIM_DeInit+0x1bc>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d109      	bne.n	8000de6 <TIM_DeInit+0x182>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000dd8:	f000 f958 	bl	800108c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000de2:	f000 f953 	bl	800108c <RCC_APB1PeriphResetCmd>
    }   
  }
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40010000 	.word	0x40010000
 8000df4:	40000400 	.word	0x40000400
 8000df8:	40000800 	.word	0x40000800
 8000dfc:	40000c00 	.word	0x40000c00
 8000e00:	40001000 	.word	0x40001000
 8000e04:	40001400 	.word	0x40001400
 8000e08:	40010400 	.word	0x40010400
 8000e0c:	40014000 	.word	0x40014000
 8000e10:	40014400 	.word	0x40014400
 8000e14:	40014800 	.word	0x40014800
 8000e18:	40001800 	.word	0x40001800
 8000e1c:	40001c00 	.word	0x40001c00
 8000e20:	40002000 	.word	0x40002000

08000e24 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a29      	ldr	r2, [pc, #164]	; (8000ee0 <TIM_TimeBaseInit+0xbc>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d013      	beq.n	8000e68 <TIM_TimeBaseInit+0x44>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a28      	ldr	r2, [pc, #160]	; (8000ee4 <TIM_TimeBaseInit+0xc0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d00f      	beq.n	8000e68 <TIM_TimeBaseInit+0x44>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e4e:	d00b      	beq.n	8000e68 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a25      	ldr	r2, [pc, #148]	; (8000ee8 <TIM_TimeBaseInit+0xc4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d007      	beq.n	8000e68 <TIM_TimeBaseInit+0x44>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a24      	ldr	r2, [pc, #144]	; (8000eec <TIM_TimeBaseInit+0xc8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d003      	beq.n	8000e68 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <TIM_TimeBaseInit+0xcc>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d108      	bne.n	8000e7a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000e68:	89fb      	ldrh	r3, [r7, #14]
 8000e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e6e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	885a      	ldrh	r2, [r3, #2]
 8000e74:	89fb      	ldrh	r3, [r7, #14]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <TIM_TimeBaseInit+0xd0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00c      	beq.n	8000e9c <TIM_TimeBaseInit+0x78>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <TIM_TimeBaseInit+0xd4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d008      	beq.n	8000e9c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000e8a:	89fb      	ldrh	r3, [r7, #14]
 8000e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e90:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	891a      	ldrh	r2, [r3, #8]
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	89fa      	ldrh	r2, [r7, #14]
 8000ea0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	881a      	ldrh	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <TIM_TimeBaseInit+0xbc>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d003      	beq.n	8000ec2 <TIM_TimeBaseInit+0x9e>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <TIM_TimeBaseInit+0xc0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d104      	bne.n	8000ecc <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	7a9b      	ldrb	r3, [r3, #10]
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	829a      	strh	r2, [r3, #20]
}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40010000 	.word	0x40010000
 8000ee4:	40010400 	.word	0x40010400
 8000ee8:	40000400 	.word	0x40000400
 8000eec:	40000800 	.word	0x40000800
 8000ef0:	40000c00 	.word	0x40000c00
 8000ef4:	40001000 	.word	0x40001000
 8000ef8:	40001400 	.word	0x40001400

08000efc <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d008      	beq.n	8000f20 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000f1e:	e007      	b.n	8000f30 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	f023 0301 	bic.w	r3, r3, #1
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	801a      	strh	r2, [r3, #0]
  }
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	889b      	ldrh	r3, [r3, #4]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	889b      	ldrh	r3, [r3, #4]
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	887b      	ldrh	r3, [r7, #2]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	809a      	strh	r2, [r3, #4]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	819a      	strh	r2, [r3, #12]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	891b      	ldrh	r3, [r3, #8]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	4013      	ands	r3, r2
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e001      	b.n	8000fbe <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d006      	beq.n	8000fec <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000fde:	490a      	ldr	r1, [pc, #40]	; (8001008 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000fea:	e006      	b.n	8000ffa <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000fec:	4906      	ldr	r1, [pc, #24]	; (8001008 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800

0800100c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800101e:	490a      	ldr	r1, [pc, #40]	; (8001048 <RCC_APB1PeriphClockCmd+0x3c>)
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <RCC_APB1PeriphClockCmd+0x3c>)
 8001022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4313      	orrs	r3, r2
 8001028:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800102a:	e006      	b.n	800103a <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800102c:	4906      	ldr	r1, [pc, #24]	; (8001048 <RCC_APB1PeriphClockCmd+0x3c>)
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <RCC_APB1PeriphClockCmd+0x3c>)
 8001030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	43db      	mvns	r3, r3
 8001036:	4013      	ands	r3, r2
 8001038:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800

0800104c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d006      	beq.n	800106c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800105e:	490a      	ldr	r1, [pc, #40]	; (8001088 <RCC_APB2PeriphClockCmd+0x3c>)
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <RCC_APB2PeriphClockCmd+0x3c>)
 8001062:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4313      	orrs	r3, r2
 8001068:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800106a:	e006      	b.n	800107a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800106c:	4906      	ldr	r1, [pc, #24]	; (8001088 <RCC_APB2PeriphClockCmd+0x3c>)
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <RCC_APB2PeriphClockCmd+0x3c>)
 8001070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	43db      	mvns	r3, r3
 8001076:	4013      	ands	r3, r2
 8001078:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d006      	beq.n	80010ac <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800109e:	490a      	ldr	r1, [pc, #40]	; (80010c8 <RCC_APB1PeriphResetCmd+0x3c>)
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <RCC_APB1PeriphResetCmd+0x3c>)
 80010a2:	6a1a      	ldr	r2, [r3, #32]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 80010aa:	e006      	b.n	80010ba <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80010ac:	4906      	ldr	r1, [pc, #24]	; (80010c8 <RCC_APB1PeriphResetCmd+0x3c>)
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <RCC_APB1PeriphResetCmd+0x3c>)
 80010b0:	6a1a      	ldr	r2, [r3, #32]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	4013      	ands	r3, r2
 80010b8:	620b      	str	r3, [r1, #32]
  }
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800

080010cc <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d006      	beq.n	80010ec <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80010de:	490a      	ldr	r1, [pc, #40]	; (8001108 <RCC_APB2PeriphResetCmd+0x3c>)
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <RCC_APB2PeriphResetCmd+0x3c>)
 80010e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 80010ea:	e006      	b.n	80010fa <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80010ec:	4906      	ldr	r1, [pc, #24]	; (8001108 <RCC_APB2PeriphResetCmd+0x3c>)
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <RCC_APB2PeriphResetCmd+0x3c>)
 80010f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	4013      	ands	r3, r2
 80010f8:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	e076      	b.n	8001216 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001128:	2201      	movs	r2, #1
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d165      	bne.n	8001210 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2103      	movs	r1, #3
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	401a      	ands	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	791b      	ldrb	r3, [r3, #4]
 8001162:	4619      	mov	r1, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	431a      	orrs	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	791b      	ldrb	r3, [r3, #4]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d003      	beq.n	8001182 <GPIO_Init+0x76>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	791b      	ldrb	r3, [r3, #4]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d12e      	bne.n	80011e0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2103      	movs	r1, #3
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	795b      	ldrb	r3, [r3, #5]
 80011a0:	4619      	mov	r1, r3
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	2101      	movs	r1, #1
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	401a      	ands	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	799b      	ldrb	r3, [r3, #6]
 80011ce:	4619      	mov	r1, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	b29b      	uxth	r3, r3
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2103      	movs	r1, #3
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	401a      	ands	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	79db      	ldrb	r3, [r3, #7]
 8001200:	4619      	mov	r1, r3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3301      	adds	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d985      	bls.n	8001128 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800121c:	bf00      	nop
 800121e:	371c      	adds	r7, #28
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001244:	2301      	movs	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e001      	b.n	800124e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f023 0201 	bic.w	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2221      	movs	r2, #33	; 0x21
 8001292:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a46      	ldr	r2, [pc, #280]	; (80013b0 <DMA_DeInit+0x154>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d103      	bne.n	80012a4 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800129c:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <DMA_DeInit+0x158>)
 800129e:	223d      	movs	r2, #61	; 0x3d
 80012a0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80012a2:	e07e      	b.n	80013a2 <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a44      	ldr	r2, [pc, #272]	; (80013b8 <DMA_DeInit+0x15c>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d104      	bne.n	80012b6 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 80012ac:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <DMA_DeInit+0x158>)
 80012ae:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80012b2:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80012b4:	e075      	b.n	80013a2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a40      	ldr	r2, [pc, #256]	; (80013bc <DMA_DeInit+0x160>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d104      	bne.n	80012c8 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80012be:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <DMA_DeInit+0x158>)
 80012c0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80012c4:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80012c6:	e06c      	b.n	80013a2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a3d      	ldr	r2, [pc, #244]	; (80013c0 <DMA_DeInit+0x164>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d104      	bne.n	80012da <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 80012d0:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <DMA_DeInit+0x158>)
 80012d2:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80012d6:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80012d8:	e063      	b.n	80013a2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a39      	ldr	r2, [pc, #228]	; (80013c4 <DMA_DeInit+0x168>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d103      	bne.n	80012ea <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 80012e2:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <DMA_DeInit+0x158>)
 80012e4:	4a38      	ldr	r2, [pc, #224]	; (80013c8 <DMA_DeInit+0x16c>)
 80012e6:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80012e8:	e05b      	b.n	80013a2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a37      	ldr	r2, [pc, #220]	; (80013cc <DMA_DeInit+0x170>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d103      	bne.n	80012fa <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <DMA_DeInit+0x158>)
 80012f4:	4a36      	ldr	r2, [pc, #216]	; (80013d0 <DMA_DeInit+0x174>)
 80012f6:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80012f8:	e053      	b.n	80013a2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a35      	ldr	r2, [pc, #212]	; (80013d4 <DMA_DeInit+0x178>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d103      	bne.n	800130a <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <DMA_DeInit+0x158>)
 8001304:	4a34      	ldr	r2, [pc, #208]	; (80013d8 <DMA_DeInit+0x17c>)
 8001306:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001308:	e04b      	b.n	80013a2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a33      	ldr	r2, [pc, #204]	; (80013dc <DMA_DeInit+0x180>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d104      	bne.n	800131c <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <DMA_DeInit+0x158>)
 8001314:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001318:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800131a:	e042      	b.n	80013a2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a30      	ldr	r2, [pc, #192]	; (80013e0 <DMA_DeInit+0x184>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d103      	bne.n	800132c <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <DMA_DeInit+0x188>)
 8001326:	223d      	movs	r2, #61	; 0x3d
 8001328:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800132a:	e03a      	b.n	80013a2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a2e      	ldr	r2, [pc, #184]	; (80013e8 <DMA_DeInit+0x18c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d104      	bne.n	800133e <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8001334:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <DMA_DeInit+0x188>)
 8001336:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800133a:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800133c:	e031      	b.n	80013a2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a2a      	ldr	r2, [pc, #168]	; (80013ec <DMA_DeInit+0x190>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d104      	bne.n	8001350 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <DMA_DeInit+0x188>)
 8001348:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800134c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800134e:	e028      	b.n	80013a2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <DMA_DeInit+0x194>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d104      	bne.n	8001362 <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <DMA_DeInit+0x188>)
 800135a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800135e:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001360:	e01f      	b.n	80013a2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a23      	ldr	r2, [pc, #140]	; (80013f4 <DMA_DeInit+0x198>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d103      	bne.n	8001372 <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <DMA_DeInit+0x188>)
 800136c:	4a16      	ldr	r2, [pc, #88]	; (80013c8 <DMA_DeInit+0x16c>)
 800136e:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001370:	e017      	b.n	80013a2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <DMA_DeInit+0x19c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d103      	bne.n	8001382 <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <DMA_DeInit+0x188>)
 800137c:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <DMA_DeInit+0x174>)
 800137e:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001380:	e00f      	b.n	80013a2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a1d      	ldr	r2, [pc, #116]	; (80013fc <DMA_DeInit+0x1a0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d103      	bne.n	8001392 <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <DMA_DeInit+0x188>)
 800138c:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <DMA_DeInit+0x17c>)
 800138e:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001390:	e007      	b.n	80013a2 <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <DMA_DeInit+0x1a4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d103      	bne.n	80013a2 <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <DMA_DeInit+0x188>)
 800139c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80013a0:	60da      	str	r2, [r3, #12]
    }
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40026010 	.word	0x40026010
 80013b4:	40026000 	.word	0x40026000
 80013b8:	40026028 	.word	0x40026028
 80013bc:	40026040 	.word	0x40026040
 80013c0:	40026058 	.word	0x40026058
 80013c4:	40026070 	.word	0x40026070
 80013c8:	2000003d 	.word	0x2000003d
 80013cc:	40026088 	.word	0x40026088
 80013d0:	20000f40 	.word	0x20000f40
 80013d4:	400260a0 	.word	0x400260a0
 80013d8:	203d0000 	.word	0x203d0000
 80013dc:	400260b8 	.word	0x400260b8
 80013e0:	40026410 	.word	0x40026410
 80013e4:	40026400 	.word	0x40026400
 80013e8:	40026428 	.word	0x40026428
 80013ec:	40026440 	.word	0x40026440
 80013f0:	40026458 	.word	0x40026458
 80013f4:	40026470 	.word	0x40026470
 80013f8:	40026488 	.word	0x40026488
 80013fc:	400264a0 	.word	0x400264a0
 8001400:	400264b8 	.word	0x400264b8

08001404 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <DMA_Init+0xac>)
 800141c:	4013      	ands	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800142e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800143a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001446:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001452:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001458:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f023 0307 	bic.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	4313      	orrs	r3, r2
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	691a      	ldr	r2, [r3, #16]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	60da      	str	r2, [r3, #12]
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	f01c803f 	.word	0xf01c803f

080014b4 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d006      	beq.n	8001544 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f043 0201 	orr.w	r2, r3, #1
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8001542:	e005      	b.n	8001550 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f023 0201 	bic.w	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	601a      	str	r2, [r3, #0]
  }
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e001      	b.n	800157e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <DMA_GetFlagStatus+0x6c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d802      	bhi.n	80015ac <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <DMA_GetFlagStatus+0x70>)
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	e001      	b.n	80015b0 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <DMA_GetFlagStatus+0x74>)
 80015ae:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	e002      	b.n	80015c8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80015ce:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80015de:	2301      	movs	r3, #1
 80015e0:	75fb      	strb	r3, [r7, #23]
 80015e2:	e001      	b.n	80015e8 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	4002640f 	.word	0x4002640f
 80015fc:	40026000 	.word	0x40026000
 8001600:	40026400 	.word	0x40026400

08001604 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a10      	ldr	r2, [pc, #64]	; (8001654 <DMA_ClearFlag+0x50>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d802      	bhi.n	800161c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <DMA_ClearFlag+0x54>)
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	e001      	b.n	8001620 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <DMA_ClearFlag+0x58>)
 800161e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d007      	beq.n	800163a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001630:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8001638:	e006      	b.n	8001648 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001640:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	6093      	str	r3, [r2, #8]
  }    
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	4002640f 	.word	0x4002640f
 8001658:	40026000 	.word	0x40026000
 800165c:	40026400 	.word	0x40026400

08001660 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	4613      	mov	r3, r2
 800166c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00f      	beq.n	8001698 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	615a      	str	r2, [r3, #20]
 800168a:	e005      	b.n	8001698 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b80      	cmp	r3, #128	; 0x80
 800169c:	d014      	beq.n	80016c8 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	f003 031e 	and.w	r3, r3, #30
 80016ae:	431a      	orrs	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80016b4:	e008      	b.n	80016c8 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f003 031e 	and.w	r3, r3, #30
 80016c0:	43db      	mvns	r3, r3
 80016c2:	401a      	ands	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a22      	ldr	r2, [pc, #136]	; (8001778 <DMA_GetITStatus+0xa4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d802      	bhi.n	80016f8 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80016f2:	4b22      	ldr	r3, [pc, #136]	; (800177c <DMA_GetITStatus+0xa8>)
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	e001      	b.n	80016fc <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <DMA_GetITStatus+0xac>)
 80016fa:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001702:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00a      	beq.n	8001720 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	0adb      	lsrs	r3, r3, #11
 800170e:	f003 031e 	and.w	r3, r3, #30
 8001712:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4013      	ands	r3, r2
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	e004      	b.n	800172a <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001728:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	e002      	b.n	8001742 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001748:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800174c:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <DMA_GetITStatus+0x90>
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800175e:	2301      	movs	r3, #1
 8001760:	75fb      	strb	r3, [r7, #23]
 8001762:	e001      	b.n	8001768 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8001768:	7dfb      	ldrb	r3, [r7, #23]
}
 800176a:	4618      	mov	r0, r3
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	4002640f 	.word	0x4002640f
 800177c:	40026000 	.word	0x40026000
 8001780:	40026400 	.word	0x40026400

08001784 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <DMA_ClearITPendingBit+0x50>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d802      	bhi.n	800179c <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <DMA_ClearITPendingBit+0x54>)
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	e001      	b.n	80017a0 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <DMA_ClearITPendingBit+0x58>)
 800179e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80017b0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 80017b8:	e006      	b.n	80017c8 <DMA_ClearITPendingBit+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80017c0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	6093      	str	r3, [r2, #8]
  }   
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	4002640f 	.word	0x4002640f
 80017d8:	40026000 	.word	0x40026000
 80017dc:	40026400 	.word	0x40026400

080017e0 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 80017e4:	2101      	movs	r1, #1
 80017e6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80017ea:	f7ff fc4f 	bl	800108c <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 80017ee:	2100      	movs	r1, #0
 80017f0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80017f4:	f7ff fc4a 	bl	800108c <RCC_APB1PeriphResetCmd>
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <DAC_Init+0x64>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8001814:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4013      	ands	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001834:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800183a:	4313      	orrs	r3, r2
 800183c:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4313      	orrs	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <DAC_Init+0x64>)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6013      	str	r3, [r2, #0]
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40007400 	.word	0x40007400

08001864 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d009      	beq.n	800188a <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8001876:	490d      	ldr	r1, [pc, #52]	; (80018ac <DAC_Cmd+0x48>)
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <DAC_Cmd+0x48>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2001      	movs	r0, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	fa00 f303 	lsl.w	r3, r0, r3
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8001888:	e009      	b.n	800189e <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <DAC_Cmd+0x48>)
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <DAC_Cmd+0x48>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2001      	movs	r0, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	fa00 f303 	lsl.w	r3, r0, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	4013      	ands	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
  }
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40007400 	.word	0x40007400

080018b0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <DAC_SetChannel1Data+0x34>)
 80018c2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	3308      	adds	r3, #8
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	461a      	mov	r2, r3
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	6013      	str	r3, [r2, #0]
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40007400 	.word	0x40007400

080018e8 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00a      	beq.n	8001910 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 80018fa:	490e      	ldr	r1, [pc, #56]	; (8001934 <DAC_DMACmd+0x4c>)
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <DAC_DMACmd+0x4c>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	fa00 f303 	lsl.w	r3, r0, r3
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 800190e:	e00a      	b.n	8001926 <DAC_DMACmd+0x3e>
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8001910:	4908      	ldr	r1, [pc, #32]	; (8001934 <DAC_DMACmd+0x4c>)
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <DAC_DMACmd+0x4c>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	fa00 f303 	lsl.w	r3, r0, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	4013      	ands	r3, r2
 8001924:	600b      	str	r3, [r1, #0]
  }
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40007400 	.word	0x40007400

08001938 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 800193c:	2101      	movs	r1, #1
 800193e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001942:	f7ff fbc3 	bl	80010cc <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8001946:	2100      	movs	r1, #0
 8001948:	f44f 7080 	mov.w	r0, #256	; 0x100
 800194c:	f7ff fbbe 	bl	80010cc <RCC_APB2PeriphResetCmd>
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001972:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001976:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	791b      	ldrb	r3, [r3, #4]
 800197c:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001982:	4313      	orrs	r3, r2
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <ADC_Init+0xa8>)
 800199a:	4013      	ands	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80019a6:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80019ac:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	795b      	ldrb	r3, [r3, #5]
 80019b2:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80019b4:	4313      	orrs	r3, r2
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80019ce:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	7d1b      	ldrb	r3, [r3, #20]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	7afb      	ldrb	r3, [r7, #11]
 80019da:	4313      	orrs	r3, r2
 80019dc:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80019de:	7afb      	ldrb	r3, [r7, #11]
 80019e0:	051b      	lsls	r3, r3, #20
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	c0fff7fd 	.word	0xc0fff7fd

08001a00 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <ADC_CommonInit+0x48>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <ADC_CommonInit+0x4c>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001a22:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8001a28:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8001a2e:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8001a36:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <ADC_CommonInit+0x48>)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6053      	str	r3, [r2, #4]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40012300 	.word	0x40012300
 8001a4c:	fffc30e0 	.word	0xfffc30e0

08001a50 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f043 0201 	orr.w	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8001a6e:	e005      	b.n	8001a7c <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 0201 	bic.w	r2, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	4608      	mov	r0, r1
 8001a92:	4611      	mov	r1, r2
 8001a94:	461a      	mov	r2, r3
 8001a96:	4603      	mov	r3, r0
 8001a98:	70fb      	strb	r3, [r7, #3]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	70bb      	strb	r3, [r7, #2]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	2b09      	cmp	r3, #9
 8001aae:	d923      	bls.n	8001af8 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	f1a3 020a 	sub.w	r2, r3, #10
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001ad4:	7879      	ldrb	r1, [r7, #1]
 8001ad6:	78fb      	ldrb	r3, [r7, #3]
 8001ad8:	f1a3 020a 	sub.w	r2, r3, #10
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	e01e      	b.n	8001b36 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8001afe:	78fa      	ldrb	r2, [r7, #3]
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	2207      	movs	r2, #7
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4013      	ands	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001b18:	7879      	ldrb	r1, [r7, #1]
 8001b1a:	78fa      	ldrb	r2, [r7, #3]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8001b36:	78bb      	ldrb	r3, [r7, #2]
 8001b38:	2b06      	cmp	r3, #6
 8001b3a:	d821      	bhi.n	8001b80 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b40:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8001b42:	78bb      	ldrb	r3, [r7, #2]
 8001b44:	1e5a      	subs	r2, r3, #1
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	221f      	movs	r2, #31
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8001b5e:	78f9      	ldrb	r1, [r7, #3]
 8001b60:	78bb      	ldrb	r3, [r7, #2]
 8001b62:	1e5a      	subs	r2, r3, #1
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8001b7e:	e047      	b.n	8001c10 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8001b80:	78bb      	ldrb	r3, [r7, #2]
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	d821      	bhi.n	8001bca <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8001b8c:	78bb      	ldrb	r3, [r7, #2]
 8001b8e:	1fda      	subs	r2, r3, #7
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	221f      	movs	r2, #31
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8001ba8:	78f9      	ldrb	r1, [r7, #3]
 8001baa:	78bb      	ldrb	r3, [r7, #2]
 8001bac:	1fda      	subs	r2, r3, #7
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8001bc8:	e022      	b.n	8001c10 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8001bd0:	78bb      	ldrb	r3, [r7, #2]
 8001bd2:	f1a3 020d 	sub.w	r2, r3, #13
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	221f      	movs	r2, #31
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4013      	ands	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8001bee:	78f9      	ldrb	r1, [r7, #3]
 8001bf0:	78bb      	ldrb	r3, [r7, #2]
 8001bf2:	f1a3 020d 	sub.w	r2, r3, #13
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8001c3a:	e005      	b.n	8001c48 <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	609a      	str	r2, [r3, #8]
  }
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d006      	beq.n	8001c74 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8001c72:	e005      	b.n	8001c80 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
  }
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73bb      	strb	r3, [r7, #14]
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	78db      	ldrb	r3, [r3, #3]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d038      	beq.n	8001d1a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <NVIC_Init+0xbc>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	f1c3 0304 	rsb	r3, r3, #4
 8001cbc:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8001cbe:	7b7a      	ldrb	r2, [r7, #13]
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	fa42 f303 	asr.w	r3, r2, r3
 8001cc6:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	7bbb      	ldrb	r3, [r7, #14]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	789a      	ldrb	r2, [r3, #2]
 8001cda:	7b7b      	ldrb	r3, [r7, #13]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001cec:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <NVIC_Init+0xc0>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001cfa:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <NVIC_Init+0xc0>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	095b      	lsrs	r3, r3, #5
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	2101      	movs	r1, #1
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001d14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001d18:	e00f      	b.n	8001d3a <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001d1a:	490c      	ldr	r1, [pc, #48]	; (8001d4c <NVIC_Init+0xc0>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	095b      	lsrs	r3, r3, #5
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	2201      	movs	r2, #1
 8001d30:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001d32:	f100 0320 	add.w	r3, r0, #32
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00
 8001d4c:	e000e100 	.word	0xe000e100

08001d50 <__libc_init_array>:
 8001d50:	b570      	push	{r4, r5, r6, lr}
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <__libc_init_array+0x3c>)
 8001d54:	4c0e      	ldr	r4, [pc, #56]	; (8001d90 <__libc_init_array+0x40>)
 8001d56:	1ae4      	subs	r4, r4, r3
 8001d58:	10a4      	asrs	r4, r4, #2
 8001d5a:	2500      	movs	r5, #0
 8001d5c:	461e      	mov	r6, r3
 8001d5e:	42a5      	cmp	r5, r4
 8001d60:	d004      	beq.n	8001d6c <__libc_init_array+0x1c>
 8001d62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d66:	4798      	blx	r3
 8001d68:	3501      	adds	r5, #1
 8001d6a:	e7f8      	b.n	8001d5e <__libc_init_array+0xe>
 8001d6c:	f000 f89c 	bl	8001ea8 <_init>
 8001d70:	4c08      	ldr	r4, [pc, #32]	; (8001d94 <__libc_init_array+0x44>)
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <__libc_init_array+0x48>)
 8001d74:	1ae4      	subs	r4, r4, r3
 8001d76:	10a4      	asrs	r4, r4, #2
 8001d78:	2500      	movs	r5, #0
 8001d7a:	461e      	mov	r6, r3
 8001d7c:	42a5      	cmp	r5, r4
 8001d7e:	d004      	beq.n	8001d8a <__libc_init_array+0x3a>
 8001d80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d84:	4798      	blx	r3
 8001d86:	3501      	adds	r5, #1
 8001d88:	e7f8      	b.n	8001d7c <__libc_init_array+0x2c>
 8001d8a:	bd70      	pop	{r4, r5, r6, pc}
 8001d8c:	08001edc 	.word	0x08001edc
 8001d90:	08001edc 	.word	0x08001edc
 8001d94:	08001ee0 	.word	0x08001ee0
 8001d98:	08001edc 	.word	0x08001edc

08001d9c <malloc>:
 8001d9c:	4b02      	ldr	r3, [pc, #8]	; (8001da8 <malloc+0xc>)
 8001d9e:	4601      	mov	r1, r0
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	f000 b803 	b.w	8001dac <_malloc_r>
 8001da6:	bf00      	nop
 8001da8:	20000088 	.word	0x20000088

08001dac <_malloc_r>:
 8001dac:	b570      	push	{r4, r5, r6, lr}
 8001dae:	1ccd      	adds	r5, r1, #3
 8001db0:	f025 0503 	bic.w	r5, r5, #3
 8001db4:	3508      	adds	r5, #8
 8001db6:	2d0c      	cmp	r5, #12
 8001db8:	bf38      	it	cc
 8001dba:	250c      	movcc	r5, #12
 8001dbc:	2d00      	cmp	r5, #0
 8001dbe:	4606      	mov	r6, r0
 8001dc0:	db01      	blt.n	8001dc6 <_malloc_r+0x1a>
 8001dc2:	42a9      	cmp	r1, r5
 8001dc4:	d902      	bls.n	8001dcc <_malloc_r+0x20>
 8001dc6:	230c      	movs	r3, #12
 8001dc8:	6033      	str	r3, [r6, #0]
 8001dca:	e046      	b.n	8001e5a <_malloc_r+0xae>
 8001dcc:	f000 f85c 	bl	8001e88 <__malloc_lock>
 8001dd0:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <_malloc_r+0xb4>)
 8001dd2:	681c      	ldr	r4, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	b1a1      	cbz	r1, 8001e04 <_malloc_r+0x58>
 8001dda:	680b      	ldr	r3, [r1, #0]
 8001ddc:	1b5b      	subs	r3, r3, r5
 8001dde:	d40e      	bmi.n	8001dfe <_malloc_r+0x52>
 8001de0:	2b0b      	cmp	r3, #11
 8001de2:	d903      	bls.n	8001dec <_malloc_r+0x40>
 8001de4:	600b      	str	r3, [r1, #0]
 8001de6:	18cc      	adds	r4, r1, r3
 8001de8:	50cd      	str	r5, [r1, r3]
 8001dea:	e01e      	b.n	8001e2a <_malloc_r+0x7e>
 8001dec:	428c      	cmp	r4, r1
 8001dee:	bf0d      	iteet	eq
 8001df0:	6863      	ldreq	r3, [r4, #4]
 8001df2:	684b      	ldrne	r3, [r1, #4]
 8001df4:	6063      	strne	r3, [r4, #4]
 8001df6:	6013      	streq	r3, [r2, #0]
 8001df8:	bf18      	it	ne
 8001dfa:	460c      	movne	r4, r1
 8001dfc:	e015      	b.n	8001e2a <_malloc_r+0x7e>
 8001dfe:	460c      	mov	r4, r1
 8001e00:	6849      	ldr	r1, [r1, #4]
 8001e02:	e7e9      	b.n	8001dd8 <_malloc_r+0x2c>
 8001e04:	4c17      	ldr	r4, [pc, #92]	; (8001e64 <_malloc_r+0xb8>)
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	b91b      	cbnz	r3, 8001e12 <_malloc_r+0x66>
 8001e0a:	4630      	mov	r0, r6
 8001e0c:	f000 f82c 	bl	8001e68 <_sbrk_r>
 8001e10:	6020      	str	r0, [r4, #0]
 8001e12:	4629      	mov	r1, r5
 8001e14:	4630      	mov	r0, r6
 8001e16:	f000 f827 	bl	8001e68 <_sbrk_r>
 8001e1a:	1c43      	adds	r3, r0, #1
 8001e1c:	d018      	beq.n	8001e50 <_malloc_r+0xa4>
 8001e1e:	1cc4      	adds	r4, r0, #3
 8001e20:	f024 0403 	bic.w	r4, r4, #3
 8001e24:	42a0      	cmp	r0, r4
 8001e26:	d10d      	bne.n	8001e44 <_malloc_r+0x98>
 8001e28:	6025      	str	r5, [r4, #0]
 8001e2a:	4630      	mov	r0, r6
 8001e2c:	f000 f82d 	bl	8001e8a <__malloc_unlock>
 8001e30:	f104 000b 	add.w	r0, r4, #11
 8001e34:	1d23      	adds	r3, r4, #4
 8001e36:	f020 0007 	bic.w	r0, r0, #7
 8001e3a:	1ac3      	subs	r3, r0, r3
 8001e3c:	d00e      	beq.n	8001e5c <_malloc_r+0xb0>
 8001e3e:	425a      	negs	r2, r3
 8001e40:	50e2      	str	r2, [r4, r3]
 8001e42:	bd70      	pop	{r4, r5, r6, pc}
 8001e44:	1a21      	subs	r1, r4, r0
 8001e46:	4630      	mov	r0, r6
 8001e48:	f000 f80e 	bl	8001e68 <_sbrk_r>
 8001e4c:	3001      	adds	r0, #1
 8001e4e:	d1eb      	bne.n	8001e28 <_malloc_r+0x7c>
 8001e50:	230c      	movs	r3, #12
 8001e52:	6033      	str	r3, [r6, #0]
 8001e54:	4630      	mov	r0, r6
 8001e56:	f000 f818 	bl	8001e8a <__malloc_unlock>
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	bd70      	pop	{r4, r5, r6, pc}
 8001e5e:	bf00      	nop
 8001e60:	200000b0 	.word	0x200000b0
 8001e64:	200000ac 	.word	0x200000ac

08001e68 <_sbrk_r>:
 8001e68:	b538      	push	{r3, r4, r5, lr}
 8001e6a:	4c06      	ldr	r4, [pc, #24]	; (8001e84 <_sbrk_r+0x1c>)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	4605      	mov	r5, r0
 8001e70:	4608      	mov	r0, r1
 8001e72:	6023      	str	r3, [r4, #0]
 8001e74:	f000 f80a 	bl	8001e8c <_sbrk>
 8001e78:	1c43      	adds	r3, r0, #1
 8001e7a:	d102      	bne.n	8001e82 <_sbrk_r+0x1a>
 8001e7c:	6823      	ldr	r3, [r4, #0]
 8001e7e:	b103      	cbz	r3, 8001e82 <_sbrk_r+0x1a>
 8001e80:	602b      	str	r3, [r5, #0]
 8001e82:	bd38      	pop	{r3, r4, r5, pc}
 8001e84:	20000138 	.word	0x20000138

08001e88 <__malloc_lock>:
 8001e88:	4770      	bx	lr

08001e8a <__malloc_unlock>:
 8001e8a:	4770      	bx	lr

08001e8c <_sbrk>:
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <_sbrk+0x14>)
 8001e8e:	6819      	ldr	r1, [r3, #0]
 8001e90:	4602      	mov	r2, r0
 8001e92:	b909      	cbnz	r1, 8001e98 <_sbrk+0xc>
 8001e94:	4903      	ldr	r1, [pc, #12]	; (8001ea4 <_sbrk+0x18>)
 8001e96:	6019      	str	r1, [r3, #0]
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	4402      	add	r2, r0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	4770      	bx	lr
 8001ea0:	200000b4 	.word	0x200000b4
 8001ea4:	2000013c 	.word	0x2000013c

08001ea8 <_init>:
 8001ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eaa:	bf00      	nop
 8001eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eae:	bc08      	pop	{r3}
 8001eb0:	469e      	mov	lr, r3
 8001eb2:	4770      	bx	lr

08001eb4 <_fini>:
 8001eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb6:	bf00      	nop
 8001eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eba:	bc08      	pop	{r3}
 8001ebc:	469e      	mov	lr, r3
 8001ebe:	4770      	bx	lr
