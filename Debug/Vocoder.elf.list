
Vocoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003ca8  08003ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003cac  08003cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  20000000  08003cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
  7 .bss          000000b0  2000008c  2000008c  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000013c  2000013c  0002008c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009015  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000013e6  00000000  00000000  000290d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c50  00000000  00000000  0002a4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b78  00000000  00000000  0002b108  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003c4b  00000000  00000000  0002bc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000039e4  00000000  00000000  0002f8cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000332af  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003800  00000000  00000000  00033330  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00036b30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003854 	.word	0x08003854

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	08003854 	.word	0x08003854

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <SystemInit+0x60>)
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <SystemInit+0x60>)
 8000a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a10:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <SystemInit+0x64>)
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <SystemInit+0x64>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <SystemInit+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <SystemInit+0x64>)
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <SystemInit+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <SystemInit+0x64>)
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <SystemInit+0x68>)
 8000a36:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a38:	4a09      	ldr	r2, [pc, #36]	; (8000a60 <SystemInit+0x64>)
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <SystemInit+0x64>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <SystemInit+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000a4a:	f000 f80d 	bl	8000a68 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a4e:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <SystemInit+0x60>)
 8000a50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a54:	609a      	str	r2, [r3, #8]
#endif
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00
 8000a60:	40023800 	.word	0x40023800
 8000a64:	24003010 	.word	0x24003010

08000a68 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000a76:	4a36      	ldr	r2, [pc, #216]	; (8000b50 <SetSysClock+0xe8>)
 8000a78:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <SetSysClock+0xe8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a80:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000a82:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <SetSysClock+0xe8>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d103      	bne.n	8000aa0 <SetSysClock+0x38>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a9e:	d1f0      	bne.n	8000a82 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000aa0:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <SetSysClock+0xe8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000aac:	2301      	movs	r3, #1
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	e001      	b.n	8000ab6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d142      	bne.n	8000b42 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000abc:	4a24      	ldr	r2, [pc, #144]	; (8000b50 <SetSysClock+0xe8>)
 8000abe:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <SetSysClock+0xe8>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000ac8:	4a22      	ldr	r2, [pc, #136]	; (8000b54 <SetSysClock+0xec>)
 8000aca:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <SetSysClock+0xec>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ad2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000ad4:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <SetSysClock+0xe8>)
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <SetSysClock+0xe8>)
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000adc:	4a1c      	ldr	r2, [pc, #112]	; (8000b50 <SetSysClock+0xe8>)
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <SetSysClock+0xe8>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ae6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000ae8:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <SetSysClock+0xe8>)
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <SetSysClock+0xe8>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000af2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <SetSysClock+0xe8>)
 8000af6:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <SetSysClock+0xf0>)
 8000af8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000afa:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <SetSysClock+0xe8>)
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <SetSysClock+0xe8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b04:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000b06:	bf00      	nop
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <SetSysClock+0xe8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0f9      	beq.n	8000b08 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <SetSysClock+0xf4>)
 8000b16:	f240 6205 	movw	r2, #1541	; 0x605
 8000b1a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <SetSysClock+0xe8>)
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <SetSysClock+0xe8>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	f023 0303 	bic.w	r3, r3, #3
 8000b26:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000b28:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <SetSysClock+0xe8>)
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <SetSysClock+0xe8>)
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000b34:	bf00      	nop
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <SetSysClock+0xe8>)
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	f003 030c 	and.w	r3, r3, #12
 8000b3e:	2b08      	cmp	r3, #8
 8000b40:	d1f9      	bne.n	8000b36 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40007000 	.word	0x40007000
 8000b58:	07405408 	.word	0x07405408
 8000b5c:	40023c00 	.word	0x40023c00

08000b60 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000b74:	e7fe      	b.n	8000b74 <HardFault_Handler+0x4>
 8000b76:	bf00      	nop

08000b78 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>
 8000b7e:	bf00      	nop

08000b80 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000b84:	e7fe      	b.n	8000b84 <BusFault_Handler+0x4>
 8000b86:	bf00      	nop

08000b88 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>
 8000b8e:	bf00      	nop

08000b90 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bd6:	e003      	b.n	8000be0 <LoopCopyDataInit>

08000bd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bde:	3104      	adds	r1, #4

08000be0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000be0:	480b      	ldr	r0, [pc, #44]	; (8000c10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000be4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000be6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000be8:	d3f6      	bcc.n	8000bd8 <CopyDataInit>
  ldr  r2, =_sbss
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bec:	e002      	b.n	8000bf4 <LoopFillZerobss>

08000bee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bf0:	f842 3b04 	str.w	r3, [r2], #4

08000bf4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bf6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bf8:	d3f9      	bcc.n	8000bee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bfa:	f7ff feff 	bl	80009fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f002 f851 	bl	8002ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c02:	f000 fd85 	bl	8001710 <main>
  bx  lr    
 8000c06:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c08:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000c0c:	08003cb0 	.word	0x08003cb0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c14:	2000008c 	.word	0x2000008c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000c18:	2000008c 	.word	0x2000008c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c1c:	2000013c 	.word	0x2000013c

08000c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC_IRQHandler>
	...

08000c24 <initAudioOutDAC>:
/**
 * @brief Initialise the DAC in 12bit mode to output signal 
 * sampes. Also allow DMA access to the DAC.
 */
void initAudioOutDAC(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000c30:	f001 f996 	bl	8001f60 <RCC_APB1PeriphClockCmd>
	DAC_InitTypeDef DACStruct;
	DACStruct.DAC_Trigger = DAC_Trigger_T4_TRGO;
 8000c34:	232c      	movs	r3, #44	; 0x2c
 8000c36:	603b      	str	r3, [r7, #0]
	DACStruct.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
	DACStruct.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
	DAC_Init(DAC_Channel_1, &DACStruct);
 8000c40:	463b      	mov	r3, r7
 8000c42:	4619      	mov	r1, r3
 8000c44:	2000      	movs	r0, #0
 8000c46:	f001 fd83 	bl	8002750 <DAC_Init>
	DAC_DMACmd(DAC_Channel_1, ENABLE);
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f001 fdf5 	bl	800283c <DAC_DMACmd>
	DAC_Cmd(DAC_Channel_1, ENABLE);
 8000c52:	2101      	movs	r1, #1
 8000c54:	2000      	movs	r0, #0
 8000c56:	f001 fdaf 	bl	80027b8 <DAC_Cmd>
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop

08000c64 <initAudioOutGPIO>:
/**
 * @brief Initialise GPIO Pin A4 in analog mode to output
 * a signal from the DAC.
 */
void initAudioOutGPIO(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f001 f957 	bl	8001f20 <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef GPIOStruct;
	GPIOStruct.GPIO_Pin = GPIO_Pin_4;//channel 1
 8000c72:	2310      	movs	r3, #16
 8000c74:	603b      	str	r3, [r7, #0]
	GPIOStruct.GPIO_Speed = GPIO_Mode_AN;
 8000c76:	2303      	movs	r3, #3
 8000c78:	717b      	strb	r3, [r7, #5]
	GPIOStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	717b      	strb	r3, [r7, #5]
	GPIOStruct.GPIO_OType = GPIO_OType_PP;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	71bb      	strb	r3, [r7, #6]
	GPIOStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIOStruct);
 8000c86:	463b      	mov	r3, r7
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4803      	ldr	r0, [pc, #12]	; (8000c98 <initAudioOutGPIO+0x34>)
 8000c8c:	f001 f9e8 	bl	8002060 <GPIO_Init>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40020000 	.word	0x40020000

08000c9c <initAudioOutTIM>:
/**
 * @brief Initialise Timer 4 with a tick rate of 16000Hz
 * to trigger the DAC to output at this rate.
 */
void initAudioOutTIM(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
	//Timer 4 Runs at 84MHz
	//Do not use Timer 6 for this - It is not able to trigger the DAC
	//Even though the documentation would have you believe otherwise.
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	2004      	movs	r0, #4
 8000ca6:	f001 f95b 	bl	8001f60 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseInitTypeDef TimerStruct;
	TimerStruct.TIM_Period = 5250-1;
 8000caa:	f241 4381 	movw	r3, #5249	; 0x1481
 8000cae:	60bb      	str	r3, [r7, #8]
	TimerStruct.TIM_Prescaler = 1-1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	80bb      	strh	r3, [r7, #4]
	TimerStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	81bb      	strh	r3, [r7, #12]
	TimerStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseInit(TIM4, &TimerStruct);
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <initAudioOutTIM+0x44>)
 8000cc2:	f001 f859 	bl	8001d78 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM4, TIM_TRGOSource_Update);
 8000cc6:	2120      	movs	r1, #32
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <initAudioOutTIM+0x44>)
 8000cca:	f001 f8e1 	bl	8001e90 <TIM_SelectOutputTrigger>
	TIM_Cmd(TIM4, ENABLE);
 8000cce:	2101      	movs	r1, #1
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <initAudioOutTIM+0x44>)
 8000cd2:	f001 f8bd 	bl	8001e50 <TIM_Cmd>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40000800 	.word	0x40000800

08000ce4 <initAudioOutTIM2>:
 * or pitch alterations.
 * @param arr The value the timer has to count up to before a timer
 * tick is generated. Timer frequency = (84MHz/(Prescaler+1))/Period.
 */
void initAudioOutTIM2(uint32_t arr)
{ 
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	//Timer 4 Runs at 84MHz
	//Do not use Timer 6 for this - It is not able to trigger the DAC
	//Even though the documentation would have you believe otherwise.
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000cec:	2101      	movs	r1, #1
 8000cee:	2004      	movs	r0, #4
 8000cf0:	f001 f936 	bl	8001f60 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseInitTypeDef TimerStruct;
	TimerStruct.TIM_Period = arr-1;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	613b      	str	r3, [r7, #16]
	TimerStruct.TIM_Prescaler = 1-1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	81bb      	strh	r3, [r7, #12]
	TimerStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	82bb      	strh	r3, [r7, #20]
	TimerStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000d02:	2300      	movs	r3, #0
 8000d04:	81fb      	strh	r3, [r7, #14]
	TIM_TimeBaseInit(TIM4, &TimerStruct);
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <initAudioOutTIM2+0x48>)
 8000d0e:	f001 f833 	bl	8001d78 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM4, TIM_TRGOSource_Update);
 8000d12:	2120      	movs	r1, #32
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <initAudioOutTIM2+0x48>)
 8000d16:	f001 f8bb 	bl	8001e90 <TIM_SelectOutputTrigger>
	TIM_Cmd(TIM4, ENABLE);
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <initAudioOutTIM2+0x48>)
 8000d1e:	f001 f897 	bl	8001e50 <TIM_Cmd>
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40000800 	.word	0x40000800

08000d30 <initAudioOutNVIC>:
 * which is the stream being used to transfer signal data to the DAC.
 * In this case, the interupt will be triggered when the buffer has 
 * been emptied.
 */
void initAudioOutNVIC(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVICStruct;
	NVICStruct.NVIC_IRQChannel = DMA1_Stream5_IRQn;
 8000d36:	2310      	movs	r3, #16
 8000d38:	713b      	strb	r3, [r7, #4]
	NVICStruct.NVIC_IRQChannelCmd = ENABLE;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	71fb      	strb	r3, [r7, #7]
	NVICStruct.NVIC_IRQChannelPreemptionPriority=0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	717b      	strb	r3, [r7, #5]
	NVICStruct.NVIC_IRQChannelSubPriority=0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVICStruct);
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f001 ff49 	bl	8002be0 <NVIC_Init>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop

08000d58 <initAudioOutDMA>:
 * @param buffer Pointer to the unsigned 16-bit integer signal buffer.
 * @param size Size of the signal buffer.

 */
void initAudioOutDMA(uint16_t* buffer, uint32_t size)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b092      	sub	sp, #72	; 0x48
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 8000d62:	2101      	movs	r1, #1
 8000d64:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000d68:	f001 f8da 	bl	8001f20 <RCC_AHB1PeriphClockCmd>
	DMA_DeInit(DMA1_Stream5);
 8000d6c:	481d      	ldr	r0, [pc, #116]	; (8000de4 <initAudioOutDMA+0x8c>)
 8000d6e:	f001 fa1f 	bl	80021b0 <DMA_DeInit>
	DMA_InitTypeDef DMAStruct;
	DMA_StructInit(&DMAStruct);
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 fb46 	bl	8002408 <DMA_StructInit>
	DMAStruct.DMA_Channel = DMA_Channel_7;
 8000d7c:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8000d80:	60fb      	str	r3, [r7, #12]
	DMAStruct.DMA_PeripheralBaseAddr =(uint32_t)(DAC_BASE + 0x08);
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <initAudioOutDMA+0x90>)
 8000d84:	613b      	str	r3, [r7, #16]
	DMAStruct.DMA_Memory0BaseAddr = (uint32_t)(buffer);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	617b      	str	r3, [r7, #20]
	DMAStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8000d8a:	2340      	movs	r3, #64	; 0x40
 8000d8c:	61bb      	str	r3, [r7, #24]
	DMAStruct.DMA_BufferSize = size;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	61fb      	str	r3, [r7, #28]
	DMAStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8000d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMAStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
	DMAStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000d9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
	DMAStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
	DMAStruct.DMA_Mode = DMA_Mode_Normal;
 8000da8:	2300      	movs	r3, #0
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
	DMAStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8000dac:	2300      	movs	r3, #0
 8000dae:	63bb      	str	r3, [r7, #56]	; 0x38
	DMAStruct.DMA_Priority = DMA_Priority_High;
 8000db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
	DMAStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8000db6:	2300      	movs	r3, #0
 8000db8:	643b      	str	r3, [r7, #64]	; 0x40
	DMAStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_ITConfig(DMA1_Stream5, DMA_IT_TC, ENABLE);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2110      	movs	r1, #16
 8000dc2:	4808      	ldr	r0, [pc, #32]	; (8000de4 <initAudioOutDMA+0x8c>)
 8000dc4:	f001 fbf6 	bl	80025b4 <DMA_ITConfig>
	DMA_Init(DMA1_Stream5, &DMAStruct);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <initAudioOutDMA+0x8c>)
 8000dd0:	f001 fac2 	bl	8002358 <DMA_Init>
	DMA_Cmd(DMA1_Stream5, ENABLE);
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4803      	ldr	r0, [pc, #12]	; (8000de4 <initAudioOutDMA+0x8c>)
 8000dd8:	f001 fb4e 	bl	8002478 <DMA_Cmd>
}
 8000ddc:	bf00      	nop
 8000dde:	3748      	adds	r7, #72	; 0x48
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40026088 	.word	0x40026088
 8000de8:	40007408 	.word	0x40007408

08000dec <initAudioOut>:
 * Initialises them using the above methods.
 * @param buffer Pointer to the unsigned 16-bit integer signal buffer.
 * @param size Size of the signal buffer.
 */
void initAudioOut(uint16_t* buffer, uint32_t size)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	DAC_DeInit();
 8000df6:	f001 fc9d 	bl	8002734 <DAC_DeInit>
	TIM_DeInit(TIM4);
 8000dfa:	480b      	ldr	r0, [pc, #44]	; (8000e28 <initAudioOut+0x3c>)
 8000dfc:	f000 fedc 	bl	8001bb8 <TIM_DeInit>
	DMA_DeInit(DMA1_Stream5);
 8000e00:	480a      	ldr	r0, [pc, #40]	; (8000e2c <initAudioOut+0x40>)
 8000e02:	f001 f9d5 	bl	80021b0 <DMA_DeInit>
	initAudioOutDAC();
 8000e06:	f7ff ff0d 	bl	8000c24 <initAudioOutDAC>
	initAudioOutGPIO();
 8000e0a:	f7ff ff2b 	bl	8000c64 <initAudioOutGPIO>
	initAudioOutTIM();
 8000e0e:	f7ff ff45 	bl	8000c9c <initAudioOutTIM>
	initAudioOutNVIC();
 8000e12:	f7ff ff8d 	bl	8000d30 <initAudioOutNVIC>
	initAudioOutDMA(buffer,size);
 8000e16:	6839      	ldr	r1, [r7, #0]
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff9d 	bl	8000d58 <initAudioOutDMA>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40000800 	.word	0x40000800
 8000e2c:	40026088 	.word	0x40026088

08000e30 <initAudioOut2>:
 * @param size Size of the signal buffer.
 * @param arr The value the timer has to count up to before a timer
 * tick is generated. Timer frequency = (84MHz/(Prescaler+1))/Period.
 */
void initAudioOut2(uint16_t* buffer, uint32_t size, uint32_t arr)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
	DAC_DeInit();
 8000e3c:	f001 fc7a 	bl	8002734 <DAC_DeInit>
	TIM_DeInit(TIM4);
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <initAudioOut2+0x40>)
 8000e42:	f000 feb9 	bl	8001bb8 <TIM_DeInit>
	DMA_DeInit(DMA1_Stream5);
 8000e46:	480b      	ldr	r0, [pc, #44]	; (8000e74 <initAudioOut2+0x44>)
 8000e48:	f001 f9b2 	bl	80021b0 <DMA_DeInit>
	initAudioOutDAC();
 8000e4c:	f7ff feea 	bl	8000c24 <initAudioOutDAC>
	initAudioOutGPIO();
 8000e50:	f7ff ff08 	bl	8000c64 <initAudioOutGPIO>
	initAudioOutTIM2(arr);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff45 	bl	8000ce4 <initAudioOutTIM2>
	initAudioOutNVIC();
 8000e5a:	f7ff ff69 	bl	8000d30 <initAudioOutNVIC>
	initAudioOutDMA(buffer,size);
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	68f8      	ldr	r0, [r7, #12]
 8000e62:	f7ff ff79 	bl	8000d58 <initAudioOutDMA>
}
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40000800 	.word	0x40000800
 8000e74:	40026088 	.word	0x40026088

08000e78 <initAudioInGPIO>:
/**
 * @brief Initialises GPIO Pin C2 in analog mode
 * to receive signal inputs via the ADC
 */
void initAudioInGPIO(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 8000e7e:	2101      	movs	r1, #1
 8000e80:	2004      	movs	r0, #4
 8000e82:	f001 f84d 	bl	8001f20 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIOStruct;
	GPIOStruct.GPIO_Mode = GPIO_Mode_AN;
 8000e86:	2303      	movs	r3, #3
 8000e88:	713b      	strb	r3, [r7, #4]
	GPIOStruct.GPIO_Pin = GPIO_Pin_2;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	603b      	str	r3, [r7, #0]
	GPIOStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71fb      	strb	r3, [r7, #7]
	GPIOStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8000e92:	2300      	movs	r3, #0
 8000e94:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOC, &GPIOStruct);
 8000e96:	463b      	mov	r3, r7
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <initAudioInGPIO+0x30>)
 8000e9c:	f001 f8e0 	bl	8002060 <GPIO_Init>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40020800 	.word	0x40020800

08000eac <initAudioInTIM>:
/**
 * @brief Initialises timer 2 with a tick rate of 16000Hz
 * to trigger the ADC to sample a signal at this rate
 */
void initAudioInTIM(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f001 f853 	bl	8001f60 <RCC_APB1PeriphClockCmd>
	//Timer 2 is clocked at 84MHz
	TIM_TimeBaseInitTypeDef TimerStruct;
	TimerStruct.TIM_Period = 5250-1;
 8000eba:	f241 4381 	movw	r3, #5249	; 0x1481
 8000ebe:	60bb      	str	r3, [r7, #8]
	TimerStruct.TIM_Prescaler = 1-1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	80bb      	strh	r3, [r7, #4]
	TimerStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	80fb      	strh	r3, [r7, #6]
	TimerStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM2, &TimerStruct);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ed4:	f000 ff50 	bl	8001d78 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM2,TIM_TRGOSource_Update);
 8000ed8:	2120      	movs	r1, #32
 8000eda:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ede:	f000 ffd7 	bl	8001e90 <TIM_SelectOutputTrigger>
	TIM_Cmd(TIM2, ENABLE);
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ee8:	f000 ffb2 	bl	8001e50 <TIM_Cmd>
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <initAudioInADC>:
 * @brief Initialises the ADC in 12 bit mode to sample a signal
 * on the positive edge of the timer 2 tick. DMA access is also 
 * allowed after a conversion.
 */
void initAudioInADC(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);
 8000efa:	2101      	movs	r1, #1
 8000efc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f00:	f001 f84e 	bl	8001fa0 <RCC_APB2PeriphClockCmd>
	ADC_CommonInitTypeDef ADCCommonStruct;
	ADCCommonStruct.ADC_Mode = ADC_Mode_Independent;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61bb      	str	r3, [r7, #24]
	ADCCommonStruct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
	ADCCommonStruct.ADC_Prescaler = ADC_Prescaler_Div2;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
	ADCCommonStruct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
	ADC_CommonInit(&ADCCommonStruct);
 8000f14:	f107 0318 	add.w	r3, r7, #24
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 fd1b 	bl	8002954 <ADC_CommonInit>

	ADC_InitTypeDef ADCStruct;
	ADCStruct.ADC_ContinuousConvMode = DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	717b      	strb	r3, [r7, #5]
	ADCStruct.ADC_DataAlign = ADC_DataAlign_Right;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
	ADCStruct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_TRGO;
 8000f26:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000f2a:	60fb      	str	r3, [r7, #12]
	ADCStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 8000f2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f30:	60bb      	str	r3, [r7, #8]
	ADCStruct.ADC_NbrOfConversion = 1;
 8000f32:	2301      	movs	r3, #1
 8000f34:	753b      	strb	r3, [r7, #20]
	ADCStruct.ADC_Resolution = ADC_Resolution_12b;
 8000f36:	2300      	movs	r3, #0
 8000f38:	603b      	str	r3, [r7, #0]
	ADCStruct.ADC_ScanConvMode = DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	713b      	strb	r3, [r7, #4]
	ADC_Init(ADC1, &ADCStruct);
 8000f3e:	463b      	mov	r3, r7
 8000f40:	4619      	mov	r1, r3
 8000f42:	480c      	ldr	r0, [pc, #48]	; (8000f74 <initAudioInADC+0x80>)
 8000f44:	f001 fcb0 	bl	80028a8 <ADC_Init>

	ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 1, ADC_SampleTime_15Cycles);
 8000f48:	2301      	movs	r3, #1
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	210c      	movs	r1, #12
 8000f4e:	4809      	ldr	r0, [pc, #36]	; (8000f74 <initAudioInADC+0x80>)
 8000f50:	f001 fd44 	bl	80029dc <ADC_RegularChannelConfig>
	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
 8000f54:	2101      	movs	r1, #1
 8000f56:	4807      	ldr	r0, [pc, #28]	; (8000f74 <initAudioInADC+0x80>)
 8000f58:	f001 fe26 	bl	8002ba8 <ADC_DMARequestAfterLastTransferCmd>
	ADC_DMACmd(ADC1, ENABLE);
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <initAudioInADC+0x80>)
 8000f60:	f001 fe06 	bl	8002b70 <ADC_DMACmd>
	ADC_Cmd(ADC1, ENABLE);
 8000f64:	2101      	movs	r1, #1
 8000f66:	4803      	ldr	r0, [pc, #12]	; (8000f74 <initAudioInADC+0x80>)
 8000f68:	f001 fd1c 	bl	80029a4 <ADC_Cmd>
}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40012000 	.word	0x40012000

08000f78 <initAudioInNVIC>:
 * which is the stream being used to transfer ADC data to a buffer.
 * In this case, the interupt will be triggered when the buffer has 
 * been filled up.
 */
void initAudioInNVIC(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVICStruct;
	NVICStruct.NVIC_IRQChannel = DMA2_Stream0_IRQn;
 8000f7e:	2338      	movs	r3, #56	; 0x38
 8000f80:	713b      	strb	r3, [r7, #4]
	NVICStruct.NVIC_IRQChannelCmd = ENABLE;
 8000f82:	2301      	movs	r3, #1
 8000f84:	71fb      	strb	r3, [r7, #7]
	NVICStruct.NVIC_IRQChannelPreemptionPriority=0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	717b      	strb	r3, [r7, #5]
	NVICStruct.NVIC_IRQChannelSubPriority=0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVICStruct);
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 fe25 	bl	8002be0 <NVIC_Init>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop

08000fa0 <initAudioInDMA>:
 * of an interrupt when the buffer has been filled.
 * @param buffer Pointer to the unsigned 16-bit integer signal buffer.
 * @param size Size of the signal buffer.
 */
void initAudioInDMA(uint16_t* buffer, uint32_t size)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b092      	sub	sp, #72	; 0x48
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 ,ENABLE);
 8000faa:	2101      	movs	r1, #1
 8000fac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000fb0:	f000 ffb6 	bl	8001f20 <RCC_AHB1PeriphClockCmd>

	DMA_InitTypeDef DMAStruct;
	DMA_DeInit(DMA2_Stream0);
 8000fb4:	481b      	ldr	r0, [pc, #108]	; (8001024 <initAudioInDMA+0x84>)
 8000fb6:	f001 f8fb 	bl	80021b0 <DMA_DeInit>
	DMAStruct.DMA_Channel = DMA_Channel_0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
	DMAStruct.DMA_PeripheralBaseAddr = (uint32_t)(&ADC1->DR);
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <initAudioInDMA+0x88>)
 8000fc0:	613b      	str	r3, [r7, #16]
	DMAStruct.DMA_Memory0BaseAddr = (uint32_t)(buffer);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	617b      	str	r3, [r7, #20]
	DMAStruct.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
	DMAStruct.DMA_BufferSize = size;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	61fb      	str	r3, [r7, #28]
	DMAStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8000fce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMAStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
	DMAStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000fda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
	DMAStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
	DMAStruct.DMA_Mode = DMA_Mode_Normal;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	633b      	str	r3, [r7, #48]	; 0x30
	DMAStruct.DMA_Priority = DMA_Priority_High;
 8000fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
	DMAStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
	DMAStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMAStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	643b      	str	r3, [r7, #64]	; 0x40
	DMAStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init(DMA2_Stream0, &DMAStruct);
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	4619      	mov	r1, r3
 8001004:	4807      	ldr	r0, [pc, #28]	; (8001024 <initAudioInDMA+0x84>)
 8001006:	f001 f9a7 	bl	8002358 <DMA_Init>
	DMA_ITConfig(DMA2_Stream0, DMA_IT_TC, ENABLE);
 800100a:	2201      	movs	r2, #1
 800100c:	2110      	movs	r1, #16
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <initAudioInDMA+0x84>)
 8001010:	f001 fad0 	bl	80025b4 <DMA_ITConfig>
	DMA_Cmd(DMA2_Stream0, ENABLE);
 8001014:	2101      	movs	r1, #1
 8001016:	4803      	ldr	r0, [pc, #12]	; (8001024 <initAudioInDMA+0x84>)
 8001018:	f001 fa2e 	bl	8002478 <DMA_Cmd>
}
 800101c:	bf00      	nop
 800101e:	3748      	adds	r7, #72	; 0x48
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40026410 	.word	0x40026410
 8001028:	4001204c 	.word	0x4001204c

0800102c <initAudioIn>:
 * Initialises them using the above methods.
 * @param buffer Pointer to the unsigned 16-bit integer signal buffer.
 * @param size Size of the signal buffer.
 */
void initAudioIn(uint16_t* buffer, uint32_t size)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
	TIM_DeInit(TIM2);
 8001036:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800103a:	f000 fdbd 	bl	8001bb8 <TIM_DeInit>
	ADC_DeInit();
 800103e:	f001 fc25 	bl	800288c <ADC_DeInit>
	DMA_DeInit(DMA2_Stream0);
 8001042:	4809      	ldr	r0, [pc, #36]	; (8001068 <initAudioIn+0x3c>)
 8001044:	f001 f8b4 	bl	80021b0 <DMA_DeInit>
	initAudioInGPIO();
 8001048:	f7ff ff16 	bl	8000e78 <initAudioInGPIO>
	initAudioInTIM();
 800104c:	f7ff ff2e 	bl	8000eac <initAudioInTIM>
	initAudioInADC();
 8001050:	f7ff ff50 	bl	8000ef4 <initAudioInADC>
	initAudioInNVIC();
 8001054:	f7ff ff90 	bl	8000f78 <initAudioInNVIC>
	initAudioInDMA(buffer, size);
 8001058:	6839      	ldr	r1, [r7, #0]
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffa0 	bl	8000fa0 <initAudioInDMA>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40026410 	.word	0x40026410

0800106c <echo>:
 * @param size Size of the signal buffer.
 * @param ms Amount of time in milliseconds to delay the second
 * mixed in signal. 
 */
void echo(uint16_t* buffer, uint32_t size, uint16_t ms)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	4613      	mov	r3, r2
 8001078:	80fb      	strh	r3, [r7, #6]
	uint32_t samples = ms*16;
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	613b      	str	r3, [r7, #16]
	if(samples>size)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	429a      	cmp	r2, r3
 8001086:	d90c      	bls.n	80010a2 <echo+0x36>
	{
		STM_EVAL_LEDInit(LED5);
 8001088:	2002      	movs	r0, #2
 800108a:	f000 fd37 	bl	8001afc <STM_EVAL_LEDInit>
		STM_EVAL_LEDOn(LED5);
 800108e:	2002      	movs	r0, #2
 8001090:	f000 fd62 	bl	8001b58 <STM_EVAL_LEDOn>
		STM_EVAL_LEDInit(LED6);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 fd31 	bl	8001afc <STM_EVAL_LEDInit>
		STM_EVAL_LEDOn(LED6);
 800109a:	2003      	movs	r0, #3
 800109c:	f000 fd5c 	bl	8001b58 <STM_EVAL_LEDOn>
		return;
 80010a0:	e020      	b.n	80010e4 <echo+0x78>
	}
	uint32_t i;
	for(i=samples; i<size; i++)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	e019      	b.n	80010dc <echo+0x70>
	{
		buffer[i] = buffer[i]/2 +buffer[i-samples]/2;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	0052      	lsls	r2, r2, #1
 80010b4:	68f9      	ldr	r1, [r7, #12]
 80010b6:	440a      	add	r2, r1
 80010b8:	8812      	ldrh	r2, [r2, #0]
 80010ba:	0852      	lsrs	r2, r2, #1
 80010bc:	b291      	uxth	r1, r2
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	1a82      	subs	r2, r0, r2
 80010c4:	0052      	lsls	r2, r2, #1
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	4402      	add	r2, r0
 80010ca:	8812      	ldrh	r2, [r2, #0]
 80010cc:	0852      	lsrs	r2, r2, #1
 80010ce:	b292      	uxth	r2, r2
 80010d0:	440a      	add	r2, r1
 80010d2:	b292      	uxth	r2, r2
 80010d4:	801a      	strh	r2, [r3, #0]
		STM_EVAL_LEDInit(LED6);
		STM_EVAL_LEDOn(LED6);
		return;
	}
	uint32_t i;
	for(i=samples; i<size; i++)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3301      	adds	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d3e1      	bcc.n	80010a8 <echo+0x3c>
	{
		buffer[i] = buffer[i]/2 +buffer[i-samples]/2;
	}
}
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	0000      	movs	r0, r0
	...

080010f0 <sineCarrier>:
 * @param buffer Pointer to the unsigned 16-bit integer signal buffer.
 * @param size Size of the signal buffer.
 * @param freq Frequency of the sine wave to modulate with
 */
void sineCarrier(uint16_t* buffer, uint32_t size, uint16_t freq)
{
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	4613      	mov	r3, r2
 80010fc:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	for(i=0; i<size; i++)
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e04e      	b.n	80011a2 <sineCarrier+0xb2>
	{
		//The 1800 in this case is approximately the 1.5V offset on the input signal
		float temp = (sinf(TWOPI*i/16000.0*freq)) * (buffer[i]-1800);
 8001104:	6978      	ldr	r0, [r7, #20]
 8001106:	f7ff f9a1 	bl	800044c <__aeabi_ui2d>
 800110a:	a32d      	add	r3, pc, #180	; (adr r3, 80011c0 <sineCarrier+0xd0>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff fa12 	bl	8000538 <__aeabi_dmul>
 8001114:	4603      	mov	r3, r0
 8001116:	460c      	mov	r4, r1
 8001118:	4618      	mov	r0, r3
 800111a:	4621      	mov	r1, r4
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <sineCarrier+0xc8>)
 8001122:	f7ff fb33 	bl	800078c <__aeabi_ddiv>
 8001126:	4603      	mov	r3, r0
 8001128:	460c      	mov	r4, r1
 800112a:	4625      	mov	r5, r4
 800112c:	461c      	mov	r4, r3
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f99b 	bl	800046c <__aeabi_i2d>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4620      	mov	r0, r4
 800113c:	4629      	mov	r1, r5
 800113e:	f7ff f9fb 	bl	8000538 <__aeabi_dmul>
 8001142:	4603      	mov	r3, r0
 8001144:	460c      	mov	r4, r1
 8001146:	4618      	mov	r0, r3
 8001148:	4621      	mov	r1, r4
 800114a:	f7ff fc07 	bl	800095c <__aeabi_d2f>
 800114e:	4603      	mov	r3, r0
 8001150:	ee00 3a10 	vmov	s0, r3
 8001154:	f001 fe44 	bl	8002de0 <sinf>
 8001158:	eeb0 7a40 	vmov.f32	s14, s0
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	4413      	add	r3, r2
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001176:	edc7 7a04 	vstr	s15, [r7, #16]
		buffer[i] = temp+1800;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	4413      	add	r3, r2
 8001182:	edd7 7a04 	vldr	s15, [r7, #16]
 8001186:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80011bc <sineCarrier+0xcc>
 800118a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800118e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001192:	edc7 7a00 	vstr	s15, [r7]
 8001196:	883a      	ldrh	r2, [r7, #0]
 8001198:	b292      	uxth	r2, r2
 800119a:	801a      	strh	r2, [r3, #0]
 * @param freq Frequency of the sine wave to modulate with
 */
void sineCarrier(uint16_t* buffer, uint32_t size, uint16_t freq)
{
	uint32_t i;
	for(i=0; i<size; i++)
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3301      	adds	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d3ac      	bcc.n	8001104 <sineCarrier+0x14>
	{
		//The 1800 in this case is approximately the 1.5V offset on the input signal
		float temp = (sinf(TWOPI*i/16000.0*freq)) * (buffer[i]-1800);
		buffer[i] = temp+1800;
	}
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bdb0      	pop	{r4, r5, r7, pc}
 80011b2:	bf00      	nop
 80011b4:	f3af 8000 	nop.w
 80011b8:	40cf4000 	.word	0x40cf4000
 80011bc:	44e10000 	.word	0x44e10000
 80011c0:	54442eea 	.word	0x54442eea
 80011c4:	401921fb 	.word	0x401921fb

080011c8 <vader>:
 * to produce a darth vader like voice.
 * @param buffer Pointer to the unsigned 16-bit integer signal buffer.
 * @param size Size of the signal buffer.
 */
void vader(uint16_t* buffer, uint32_t size)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
	sineCarrier(buffer,size,42);
 80011d2:	222a      	movs	r2, #42	; 0x2a
 80011d4:	6839      	ldr	r1, [r7, #0]
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ff8a 	bl	80010f0 <sineCarrier>
	echo(buffer, size, 50);
 80011dc:	2232      	movs	r2, #50	; 0x32
 80011de:	6839      	ldr	r1, [r7, #0]
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff43 	bl	800106c <echo>
	//The method has to be called twice because of a quirk with the 
	//way audio input and output with DMA works.
	//Calling it twice resets all interrupt flags and set bits which 
	//would otherwise prevent it from starting.
	initAudioOut2(buffer,size,6700);
 80011e6:	f641 222c 	movw	r2, #6700	; 0x1a2c
 80011ea:	6839      	ldr	r1, [r7, #0]
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff fe1f 	bl	8000e30 <initAudioOut2>
	initAudioOut2(buffer,size,6700);
 80011f2:	f641 222c 	movw	r2, #6700	; 0x1a2c
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff fe19 	bl	8000e30 <initAudioOut2>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop

08001208 <probeDroid>:
 * to produce an imperial probe droid like voice.
 * @param buffer Pointer to the unsigned 16-bit integer signal buffer.
 * @param size Size of the signal buffer.
 */
void probeDroid(uint16_t* buffer, uint32_t size)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	sineCarrier(buffer,size,1500);
 8001212:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001216:	6839      	ldr	r1, [r7, #0]
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff69 	bl	80010f0 <sineCarrier>
	echo(buffer, size, 20);
 800121e:	2214      	movs	r2, #20
 8001220:	6839      	ldr	r1, [r7, #0]
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ff22 	bl	800106c <echo>
	//The method has to be called twice because of a quirk with the 
	//way audio input and output with DMA works.
	//Calling it twice resets all interrupt flags and set bits which 
	//would otherwise prevent it from starting.
	initAudioOut(buffer,size);
 8001228:	6839      	ldr	r1, [r7, #0]
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fdde 	bl	8000dec <initAudioOut>
	initAudioOut(buffer,size);
 8001230:	6839      	ldr	r1, [r7, #0]
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fdda 	bl	8000dec <initAudioOut>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <swoosh>:
 * produce a voice which oscilates in tone.
 * @param buffer Pointer to the unsigned 16-bit integer signal buffer.
 * @param size Size of the signal buffer.
 */
void swoosh(uint16_t* buffer, uint32_t size)
{
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
	uint32_t i;
	float freq;

	for(i=0; i<size; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	e096      	b.n	800137e <swoosh+0x13e>
	{
		//Frequency oscillates according to a much lower frequency wave
		freq = 110.0 * (sinf(TWOPI*i/16000.0*11)+1.0) + 1.0;
 8001250:	69f8      	ldr	r0, [r7, #28]
 8001252:	f7ff f8fb 	bl	800044c <__aeabi_ui2d>
 8001256:	a354      	add	r3, pc, #336	; (adr r3, 80013a8 <swoosh+0x168>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f7ff f96c 	bl	8000538 <__aeabi_dmul>
 8001260:	4603      	mov	r3, r0
 8001262:	460c      	mov	r4, r1
 8001264:	4618      	mov	r0, r3
 8001266:	4621      	mov	r1, r4
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b50      	ldr	r3, [pc, #320]	; (80013b0 <swoosh+0x170>)
 800126e:	f7ff fa8d 	bl	800078c <__aeabi_ddiv>
 8001272:	4603      	mov	r3, r0
 8001274:	460c      	mov	r4, r1
 8001276:	4618      	mov	r0, r3
 8001278:	4621      	mov	r1, r4
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <swoosh+0x174>)
 8001280:	f7ff f95a 	bl	8000538 <__aeabi_dmul>
 8001284:	4603      	mov	r3, r0
 8001286:	460c      	mov	r4, r1
 8001288:	4618      	mov	r0, r3
 800128a:	4621      	mov	r1, r4
 800128c:	f7ff fb66 	bl	800095c <__aeabi_d2f>
 8001290:	4603      	mov	r3, r0
 8001292:	ee00 3a10 	vmov	s0, r3
 8001296:	f001 fda3 	bl	8002de0 <sinf>
 800129a:	ee10 3a10 	vmov	r3, s0
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f8f6 	bl	8000490 <__aeabi_f2d>
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b43      	ldr	r3, [pc, #268]	; (80013b8 <swoosh+0x178>)
 80012aa:	f7fe ff93 	bl	80001d4 <__adddf3>
 80012ae:	4603      	mov	r3, r0
 80012b0:	460c      	mov	r4, r1
 80012b2:	4618      	mov	r0, r3
 80012b4:	4621      	mov	r1, r4
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b40      	ldr	r3, [pc, #256]	; (80013bc <swoosh+0x17c>)
 80012bc:	f7ff f93c 	bl	8000538 <__aeabi_dmul>
 80012c0:	4603      	mov	r3, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	4618      	mov	r0, r3
 80012c6:	4621      	mov	r1, r4
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <swoosh+0x178>)
 80012ce:	f7fe ff81 	bl	80001d4 <__adddf3>
 80012d2:	4603      	mov	r3, r0
 80012d4:	460c      	mov	r4, r1
 80012d6:	4618      	mov	r0, r3
 80012d8:	4621      	mov	r1, r4
 80012da:	f7ff fb3f 	bl	800095c <__aeabi_d2f>
 80012de:	4603      	mov	r3, r0
 80012e0:	61bb      	str	r3, [r7, #24]

		//The 1800 in this case is approximately the 1.5V offset on the input signal
		float temp = (sinf(TWOPI*i/16000.0*freq)) * (buffer[i]-1800);
 80012e2:	69f8      	ldr	r0, [r7, #28]
 80012e4:	f7ff f8b2 	bl	800044c <__aeabi_ui2d>
 80012e8:	a32f      	add	r3, pc, #188	; (adr r3, 80013a8 <swoosh+0x168>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff f923 	bl	8000538 <__aeabi_dmul>
 80012f2:	4603      	mov	r3, r0
 80012f4:	460c      	mov	r4, r1
 80012f6:	4618      	mov	r0, r3
 80012f8:	4621      	mov	r1, r4
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <swoosh+0x170>)
 8001300:	f7ff fa44 	bl	800078c <__aeabi_ddiv>
 8001304:	4603      	mov	r3, r0
 8001306:	460c      	mov	r4, r1
 8001308:	4625      	mov	r5, r4
 800130a:	461c      	mov	r4, r3
 800130c:	69b8      	ldr	r0, [r7, #24]
 800130e:	f7ff f8bf 	bl	8000490 <__aeabi_f2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4620      	mov	r0, r4
 8001318:	4629      	mov	r1, r5
 800131a:	f7ff f90d 	bl	8000538 <__aeabi_dmul>
 800131e:	4603      	mov	r3, r0
 8001320:	460c      	mov	r4, r1
 8001322:	4618      	mov	r0, r3
 8001324:	4621      	mov	r1, r4
 8001326:	f7ff fb19 	bl	800095c <__aeabi_d2f>
 800132a:	4603      	mov	r3, r0
 800132c:	ee00 3a10 	vmov	s0, r3
 8001330:	f001 fd56 	bl	8002de0 <sinf>
 8001334:	eeb0 7a40 	vmov.f32	s14, s0
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4413      	add	r3, r2
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001352:	edc7 7a05 	vstr	s15, [r7, #20]
		buffer[i] = temp+1800;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	4413      	add	r3, r2
 800135e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001362:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80013c0 <swoosh+0x180>
 8001366:	ee77 7a87 	vadd.f32	s15, s15, s14
 800136a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800136e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001372:	88ba      	ldrh	r2, [r7, #4]
 8001374:	b292      	uxth	r2, r2
 8001376:	801a      	strh	r2, [r3, #0]
void swoosh(uint16_t* buffer, uint32_t size)
{
	uint32_t i;
	float freq;

	for(i=0; i<size; i++)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	3301      	adds	r3, #1
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	429a      	cmp	r2, r3
 8001384:	f4ff af64 	bcc.w	8001250 <swoosh+0x10>
		//The 1800 in this case is approximately the 1.5V offset on the input signal
		float temp = (sinf(TWOPI*i/16000.0*freq)) * (buffer[i]-1800);
		buffer[i] = temp+1800;
	}

	initAudioOut2(buffer,size,6300);
 8001388:	f641 029c 	movw	r2, #6300	; 0x189c
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f7ff fd4e 	bl	8000e30 <initAudioOut2>
	initAudioOut2(buffer,size,6300);
 8001394:	f641 029c 	movw	r2, #6300	; 0x189c
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f7ff fd48 	bl	8000e30 <initAudioOut2>
}
 80013a0:	bf00      	nop
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bdb0      	pop	{r4, r5, r7, pc}
 80013a8:	54442eea 	.word	0x54442eea
 80013ac:	401921fb 	.word	0x401921fb
 80013b0:	40cf4000 	.word	0x40cf4000
 80013b4:	40260000 	.word	0x40260000
 80013b8:	3ff00000 	.word	0x3ff00000
 80013bc:	405b8000 	.word	0x405b8000
 80013c0:	44e10000 	.word	0x44e10000

080013c4 <initButtons>:
 * @brief Initialise Pins D0,D1 and D2 in input mode with pull up
 * resistors. The buttons connected to these pins are expected to be
 * hardware debounced and active high.
 */
void initButtons(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80013ca:	2101      	movs	r1, #1
 80013cc:	2008      	movs	r0, #8
 80013ce:	f000 fda7 	bl	8001f20 <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef GPIOStruct;
	GPIOStruct.GPIO_Mode = GPIO_Mode_IN;
 80013d2:	2300      	movs	r3, #0
 80013d4:	713b      	strb	r3, [r7, #4]
	GPIOStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2;
 80013d6:	2307      	movs	r3, #7
 80013d8:	603b      	str	r3, [r7, #0]
	GPIOStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80013da:	2301      	movs	r3, #1
 80013dc:	71fb      	strb	r3, [r7, #7]
	GPIOStruct.GPIO_Speed = GPIO_Speed_2MHz;
 80013de:	2300      	movs	r3, #0
 80013e0:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOD, &GPIOStruct);
 80013e2:	463b      	mov	r3, r7
 80013e4:	4619      	mov	r1, r3
 80013e6:	4803      	ldr	r0, [pc, #12]	; (80013f4 <initButtons+0x30>)
 80013e8:	f000 fe3a 	bl	8002060 <GPIO_Init>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40020c00 	.word	0x40020c00

080013f8 <checkButton>:
 * , Pin D1 corresponds to button 1 and pin D2 coresponds to button 2.
 * @returns 1 if the button is being pushed (voltage on the pin is high)
 * 0 otherwise.
 */
int8_t checkButton(uint8_t butno)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
	if(butno==0)
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d106      	bne.n	8001416 <checkButton+0x1e>
	{
		return GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_0);
 8001408:	2101      	movs	r1, #1
 800140a:	4810      	ldr	r0, [pc, #64]	; (800144c <checkButton+0x54>)
 800140c:	f000 feb6 	bl	800217c <GPIO_ReadInputDataBit>
 8001410:	4603      	mov	r3, r0
 8001412:	b25b      	sxtb	r3, r3
 8001414:	e015      	b.n	8001442 <checkButton+0x4a>
	}
	else if(butno==1)
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d106      	bne.n	800142a <checkButton+0x32>
	{
		return GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_1);
 800141c:	2102      	movs	r1, #2
 800141e:	480b      	ldr	r0, [pc, #44]	; (800144c <checkButton+0x54>)
 8001420:	f000 feac 	bl	800217c <GPIO_ReadInputDataBit>
 8001424:	4603      	mov	r3, r0
 8001426:	b25b      	sxtb	r3, r3
 8001428:	e00b      	b.n	8001442 <checkButton+0x4a>
	}
	else if(butno==2)
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d106      	bne.n	800143e <checkButton+0x46>
	{
		return GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_2);
 8001430:	2104      	movs	r1, #4
 8001432:	4806      	ldr	r0, [pc, #24]	; (800144c <checkButton+0x54>)
 8001434:	f000 fea2 	bl	800217c <GPIO_ReadInputDataBit>
 8001438:	4603      	mov	r3, r0
 800143a:	b25b      	sxtb	r3, r3
 800143c:	e001      	b.n	8001442 <checkButton+0x4a>
	}
	else
	{
		return -1;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40020c00 	.word	0x40020c00

08001450 <initLCD>:
void LCD_Digit(float freqFloat,int line);
void LCD_Freq(uint32_t freqInt, char * lcdLine2);


void initLCD(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	initDiscovery();
 8001454:	f000 f900 	bl	8001658 <initDiscovery>
	LCD_INIT();
 8001458:	f000 f802 	bl	8001460 <LCD_INIT>
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <LCD_INIT>:

/*
 * @brief function which initializes the LCD
 */
void LCD_INIT()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
    CMD_PORT &= ~(LCD_E);  //LCD_E = 0;                    //clear enable
 8001464:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <LCD_INIT+0x80>)
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <LCD_INIT+0x80>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800146e:	6153      	str	r3, [r2, #20]
    CMD_PORT &= ~(LCD_RS); //LCD_RS = 0;                 //going to write command
 8001470:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <LCD_INIT+0x80>)
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <LCD_INIT+0x80>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800147a:	6153      	str	r3, [r2, #20]

    DelayMS(30);                //delay for LCD to initialise.
 800147c:	201e      	movs	r0, #30
 800147e:	f000 f8d3 	bl	8001628 <DelayMS>
    LCD_NYB(0x30,0);              //Required for initialisation
 8001482:	2100      	movs	r1, #0
 8001484:	2030      	movs	r0, #48	; 0x30
 8001486:	f000 f863 	bl	8001550 <LCD_NYB>
    DelayMS(5);                 //required delay
 800148a:	2005      	movs	r0, #5
 800148c:	f000 f8cc 	bl	8001628 <DelayMS>
    LCD_NYB(0x30,0);              //Required for initialisation
 8001490:	2100      	movs	r1, #0
 8001492:	2030      	movs	r0, #48	; 0x30
 8001494:	f000 f85c 	bl	8001550 <LCD_NYB>
    LCD_NYB(0x30,0);            //Required for initialisation
 8001498:	2100      	movs	r1, #0
 800149a:	2030      	movs	r0, #48	; 0x30
 800149c:	f000 f858 	bl	8001550 <LCD_NYB>
    DelayMS(5);                 //required delay
 80014a0:	2005      	movs	r0, #5
 80014a2:	f000 f8c1 	bl	8001628 <DelayMS>
    LCD_NYB(0x30,0);            //Required for initialisation
 80014a6:	2100      	movs	r1, #0
 80014a8:	2030      	movs	r0, #48	; 0x30
 80014aa:	f000 f851 	bl	8001550 <LCD_NYB>
    DelayMS(1);                 //required delay
 80014ae:	2001      	movs	r0, #1
 80014b0:	f000 f8ba 	bl	8001628 <DelayMS>
    LCD_DATA(0x02,0);           //set to 4 bit interface, 1 line and 5*7 font
 80014b4:	2100      	movs	r1, #0
 80014b6:	2002      	movs	r0, #2
 80014b8:	f000 f814 	bl	80014e4 <LCD_DATA>
    LCD_DATA(0x28,0);           //set to 4 bit interface, 2 line and 5*10 font
 80014bc:	2100      	movs	r1, #0
 80014be:	2028      	movs	r0, #40	; 0x28
 80014c0:	f000 f810 	bl	80014e4 <LCD_DATA>
    LCD_DATA(0x0c,0);           //set to 4 bit interface, 2 line and 5*7 font
 80014c4:	2100      	movs	r1, #0
 80014c6:	200c      	movs	r0, #12
 80014c8:	f000 f80c 	bl	80014e4 <LCD_DATA>
    LCD_DATA(0x01,0);           //clear display
 80014cc:	2100      	movs	r1, #0
 80014ce:	2001      	movs	r0, #1
 80014d0:	f000 f808 	bl	80014e4 <LCD_DATA>
    LCD_DATA(0x06,0);           //move cursor right after write
 80014d4:	2100      	movs	r1, #0
 80014d6:	2006      	movs	r0, #6
 80014d8:	f000 f804 	bl	80014e4 <LCD_DATA>
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40021000 	.word	0x40021000

080014e4 <LCD_DATA>:
/*
 * @brief function which writes a single character to LCD
 * @param 8 bit representation of the character ACSII
 * @param Mode of data sent to LCD.
 */
void LCD_DATA(unsigned char data,unsigned char type){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	4613      	mov	r3, r2
 80014f2:	71bb      	strb	r3, [r7, #6]

    WaitLCDBusy();                  //TEST LCD FOR BUSY
 80014f4:	f000 f824 	bl	8001540 <WaitLCDBusy>

    if(type == CMD){
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <LCD_DATA+0x28>
        CMD_PORT &= ~(LCD_RS);                 //COMMAND MODE
 80014fe:	4a0f      	ldr	r2, [pc, #60]	; (800153c <LCD_DATA+0x58>)
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <LCD_DATA+0x58>)
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001508:	6153      	str	r3, [r2, #20]
 800150a:	e005      	b.n	8001518 <LCD_DATA+0x34>
    } else {
        CMD_PORT |= LCD_RS;                 //CHARACTER/DATA MODE
 800150c:	4a0b      	ldr	r2, [pc, #44]	; (800153c <LCD_DATA+0x58>)
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <LCD_DATA+0x58>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001516:	6153      	str	r3, [r2, #20]
    }

    LCD_NYB(data>>4,type);               //WRITE THE UPPER NIBBLE
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	b2db      	uxtb	r3, r3
 800151e:	79ba      	ldrb	r2, [r7, #6]
 8001520:	4611      	mov	r1, r2
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f814 	bl	8001550 <LCD_NYB>
    LCD_NYB(data,type);                  //WRITE THE LOWER NIBBLE
 8001528:	79ba      	ldrb	r2, [r7, #6]
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f80e 	bl	8001550 <LCD_NYB>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40021000 	.word	0x40021000

08001540 <WaitLCDBusy>:

/*
 * @brief function to wait some seconds in case the LCD is busy with something else
 */

void WaitLCDBusy(void){
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    DelayMS(1);              //DELAY 1 MilliSeconds
 8001544:	2001      	movs	r0, #1
 8001546:	f000 f86f 	bl	8001628 <DelayMS>
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop

08001550 <LCD_NYB>:
 * @brief function to write 4 bits of data for a character to LCD
 * @param 4 bit (half of the 8) ASCII representation of character
 * @param whether command or data to display on LCD
 */

void LCD_NYB(unsigned char nyb,unsigned char type){
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	460a      	mov	r2, r1
 800155a:	71fb      	strb	r3, [r7, #7]
 800155c:	4613      	mov	r3, r2
 800155e:	71bb      	strb	r3, [r7, #6]
    DATA_PORT &= DATA_CLR;    //LCD_PORT &= 0xF0;                     //CLEAR LOWER PORT NIBBLE
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <LCD_NYB+0x70>)
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <LCD_NYB+0x70>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800156a:	6153      	str	r3, [r2, #20]
    DATA_PORT |= (nyb<<DATA); //LCD_PORT |= (nyb & 0x0F);             //SEND DATA LINE THE INFO
 800156c:	4914      	ldr	r1, [pc, #80]	; (80015c0 <LCD_NYB+0x70>)
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <LCD_NYB+0x70>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	79fa      	ldrb	r2, [r7, #7]
 8001574:	02d2      	lsls	r2, r2, #11
 8001576:	4313      	orrs	r3, r2
 8001578:	614b      	str	r3, [r1, #20]

    if(type == CMD){
 800157a:	79bb      	ldrb	r3, [r7, #6]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d106      	bne.n	800158e <LCD_NYB+0x3e>
        CMD_PORT &= ~(LCD_RS);                 //COMMAND MODE
 8001580:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <LCD_NYB+0x70>)
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <LCD_NYB+0x70>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800158a:	6153      	str	r3, [r2, #20]
 800158c:	e005      	b.n	800159a <LCD_NYB+0x4a>
    } else {
        CMD_PORT |= LCD_RS;                 //CHARACTER/DATA MODE
 800158e:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <LCD_NYB+0x70>)
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <LCD_NYB+0x70>)
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001598:	6153      	str	r3, [r2, #20]
    }

    CMD_PORT |= LCD_E;    //LCD_E = 1;          //ENABLE LCD DATA LINE
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <LCD_NYB+0x70>)
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <LCD_NYB+0x70>)
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a4:	6153      	str	r3, [r2, #20]
    DelayMS(2);                //SMALL DELAY
 80015a6:	2002      	movs	r0, #2
 80015a8:	f000 f83e 	bl	8001628 <DelayMS>
    CMD_PORT &= ~(LCD_E); //LCD_E = 0;       //DISABLE LCD DATA LINE
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <LCD_NYB+0x70>)
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <LCD_NYB+0x70>)
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80015b6:	6153      	str	r3, [r2, #20]
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40021000 	.word	0x40021000

080015c4 <LCD_STR>:

/*
 *@brief function which takes pointer to text to get ASCII representation of each character
 *@param pointer to text
 */
void LCD_STR(const char *text){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
    while(*text){
 80015cc:	e007      	b.n	80015de <LCD_STR+0x1a>
        LCD_DATA(*text++,1);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2101      	movs	r1, #1
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff83 	bl	80014e4 <LCD_DATA>
/*
 *@brief function which takes pointer to text to get ASCII representation of each character
 *@param pointer to text
 */
void LCD_STR(const char *text){
    while(*text){
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f3      	bne.n	80015ce <LCD_STR+0xa>
        LCD_DATA(*text++,1);
    }
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop

080015f0 <LCD_LINE>:
}
/*
 * @brief function to send a command to LCD showing the line to put next string on LCD
 * @param the line on which the next string is to be shown on the LCD (1 OR 2)
 */
void LCD_LINE(char line){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
    switch(line){
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0e      	blt.n	800161e <LCD_LINE+0x2e>
 8001600:	2b01      	cmp	r3, #1
 8001602:	dd02      	ble.n	800160a <LCD_LINE+0x1a>
 8001604:	2b02      	cmp	r3, #2
 8001606:	d005      	beq.n	8001614 <LCD_LINE+0x24>
            break;
        case 2:
            LCD_DATA(LINE2,0);
            break;
    }
}
 8001608:	e009      	b.n	800161e <LCD_LINE+0x2e>
 */
void LCD_LINE(char line){
    switch(line){
        case 0:
        case 1:
            LCD_DATA(LINE1,0);
 800160a:	2100      	movs	r1, #0
 800160c:	2080      	movs	r0, #128	; 0x80
 800160e:	f7ff ff69 	bl	80014e4 <LCD_DATA>
            break;
 8001612:	e004      	b.n	800161e <LCD_LINE+0x2e>
        case 2:
            LCD_DATA(LINE2,0);
 8001614:	2100      	movs	r1, #0
 8001616:	20c0      	movs	r0, #192	; 0xc0
 8001618:	f7ff ff64 	bl	80014e4 <LCD_DATA>
            break;
 800161c:	bf00      	nop
    }
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop

08001628 <DelayMS>:
/*
 * @brief function to delay processor
 */
void DelayMS(uint32_t milli)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	//Volaltile so compiler leaves it alone
	volatile uint32_t delay = milli * 17612;              // approximate loops per ms at 168 MHz, Debug config
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f244 42cc 	movw	r2, #17612	; 0x44cc
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	60fb      	str	r3, [r7, #12]
	for(; delay != 0; delay--);
 800163c:	e002      	b.n	8001644 <DelayMS+0x1c>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3b01      	subs	r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f9      	bne.n	800163e <DelayMS+0x16>
}
 800164a:	bf00      	nop
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop

08001658 <initDiscovery>:
/*
 * @brief function to initialise the peripherals to be used for the LCD
 */
void initDiscovery(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  RCC->AHB1ENR = RCC_AHB1ENR_GPIOEEN;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <initDiscovery+0x44>)
 800165e:	2210      	movs	r2, #16
 8001660:	631a      	str	r2, [r3, #48]	; 0x30

  while((RCC->CR & RCC_CR_HSERDY)==0);
 8001662:	bf00      	nop
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <initDiscovery+0x44>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f9      	beq.n	8001664 <initDiscovery+0xc>

  GPIOE->MODER |= 0x15540000; //using port A pins 9 to 14
 8001670:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <initDiscovery+0x48>)
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <initDiscovery+0x48>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f043 53aa 	orr.w	r3, r3, #356515840	; 0x15400000
 800167a:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 800167e:	6013      	str	r3, [r2, #0]

  GPIOE->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR9_1 | GPIO_OSPEEDER_OSPEEDR10_1 | GPIO_OSPEEDER_OSPEEDR11_1 | GPIO_OSPEEDER_OSPEEDR12_1
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <initDiscovery+0x48>)
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <initDiscovery+0x48>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f043 532a 	orr.w	r3, r3, #713031680	; 0x2a800000
 800168a:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 800168e:	6093      	str	r3, [r2, #8]
		  	  	  	  | GPIO_OSPEEDER_OSPEEDR13_1 | GPIO_OSPEEDER_OSPEEDR14_1);

}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40021000 	.word	0x40021000

080016a4 <DMA2_Stream0_IRQHandler>:
/**
 * @brief Interrupt handler which is triggered when DMA2_Stream0, or the ADC signal
 * input has filled the buffer.
 */
void DMA2_Stream0_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	if (DMA_GetITStatus(DMA2_Stream0, DMA_IT_TCIF0))
 80016a8:	4909      	ldr	r1, [pc, #36]	; (80016d0 <DMA2_Stream0_IRQHandler+0x2c>)
 80016aa:	480a      	ldr	r0, [pc, #40]	; (80016d4 <DMA2_Stream0_IRQHandler+0x30>)
 80016ac:	f000 ffbc 	bl	8002628 <DMA_GetITStatus>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <DMA2_Stream0_IRQHandler+0x26>
	{
		DMA_ClearITPendingBit(DMA2_Stream0, DMA_IT_TCIF0);
 80016b6:	4906      	ldr	r1, [pc, #24]	; (80016d0 <DMA2_Stream0_IRQHandler+0x2c>)
 80016b8:	4806      	ldr	r0, [pc, #24]	; (80016d4 <DMA2_Stream0_IRQHandler+0x30>)
 80016ba:	f001 f80d 	bl	80026d8 <DMA_ClearITPendingBit>
		inputDone = 1;
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <DMA2_Stream0_IRQHandler+0x34>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	701a      	strb	r2, [r3, #0]
		process = 1;
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <DMA2_Stream0_IRQHandler+0x38>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
	}
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	10008020 	.word	0x10008020
 80016d4:	40026410 	.word	0x40026410
 80016d8:	20000000 	.word	0x20000000
 80016dc:	200000a9 	.word	0x200000a9

080016e0 <DMA1_Stream5_IRQHandler>:
/**
 * @brief Interrupt handler which is triggered when DMA1_Stream5, or the DAC signal
 * output has gone through the buffer.
 */
void DMA1_Stream5_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	if (DMA_GetITStatus(DMA1_Stream5, DMA_IT_TCIF5))
 80016e4:	4907      	ldr	r1, [pc, #28]	; (8001704 <DMA1_Stream5_IRQHandler+0x24>)
 80016e6:	4808      	ldr	r0, [pc, #32]	; (8001708 <DMA1_Stream5_IRQHandler+0x28>)
 80016e8:	f000 ff9e 	bl	8002628 <DMA_GetITStatus>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d006      	beq.n	8001700 <DMA1_Stream5_IRQHandler+0x20>
	{
		DMA_ClearITPendingBit(DMA1_Stream5, DMA_IT_TCIF5);
 80016f2:	4904      	ldr	r1, [pc, #16]	; (8001704 <DMA1_Stream5_IRQHandler+0x24>)
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <DMA1_Stream5_IRQHandler+0x28>)
 80016f6:	f000 ffef 	bl	80026d8 <DMA_ClearITPendingBit>
		outputDone = 1;
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <DMA1_Stream5_IRQHandler+0x2c>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
	}
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20008800 	.word	0x20008800
 8001708:	40026088 	.word	0x40026088
 800170c:	20000001 	.word	0x20000001

08001710 <main>:
 * of input and for process flag to be set to begin audio processing,
 * Begin audio output when processing is done, reset all flags when
 * output is complete and wait once more for button input.
 */
int main(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
	buffer = (uint16_t*)malloc(sizeof(uint16_t)*size);
 8001716:	4b8e      	ldr	r3, [pc, #568]	; (8001950 <main+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4618      	mov	r0, r3
 800171e:	f001 fae7 	bl	8002cf0 <malloc>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	4b8b      	ldr	r3, [pc, #556]	; (8001954 <main+0x244>)
 8001728:	601a      	str	r2, [r3, #0]
	initButtons();
 800172a:	f7ff fe4b 	bl	80013c4 <initButtons>
	initLCD();
 800172e:	f7ff fe8f 	bl	8001450 <initLCD>
	uint8_t prev0=0;
 8001732:	2300      	movs	r3, #0
 8001734:	71fb      	strb	r3, [r7, #7]
	uint8_t prev1=0;
 8001736:	2300      	movs	r3, #0
 8001738:	71bb      	strb	r3, [r7, #6]
	uint8_t prev2=0;
 800173a:	2300      	movs	r3, #0
 800173c:	717b      	strb	r3, [r7, #5]

	while (1)
	{
		//Manages LCD screen display
		if(currentEffect==2)
 800173e:	4b86      	ldr	r3, [pc, #536]	; (8001958 <main+0x248>)
 8001740:	f993 3000 	ldrsb.w	r3, [r3]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d10c      	bne.n	8001762 <main+0x52>
		{
			LCD_LINE(1);
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff ff51 	bl	80015f0 <LCD_LINE>
			LCD_STR("Swoosh?        ");
 800174e:	4883      	ldr	r0, [pc, #524]	; (800195c <main+0x24c>)
 8001750:	f7ff ff38 	bl	80015c4 <LCD_STR>
			LCD_LINE(2);
 8001754:	2002      	movs	r0, #2
 8001756:	f7ff ff4b 	bl	80015f0 <LCD_LINE>
			LCD_STR("                ");
 800175a:	4881      	ldr	r0, [pc, #516]	; (8001960 <main+0x250>)
 800175c:	f7ff ff32 	bl	80015c4 <LCD_STR>
 8001760:	e022      	b.n	80017a8 <main+0x98>
		}
		else if(currentEffect==1)
 8001762:	4b7d      	ldr	r3, [pc, #500]	; (8001958 <main+0x248>)
 8001764:	f993 3000 	ldrsb.w	r3, [r3]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d10c      	bne.n	8001786 <main+0x76>
		{
			LCD_LINE(1);
 800176c:	2001      	movs	r0, #1
 800176e:	f7ff ff3f 	bl	80015f0 <LCD_LINE>
			LCD_STR("Imperial Probe");
 8001772:	487c      	ldr	r0, [pc, #496]	; (8001964 <main+0x254>)
 8001774:	f7ff ff26 	bl	80015c4 <LCD_STR>
			LCD_LINE(2);
 8001778:	2002      	movs	r0, #2
 800177a:	f7ff ff39 	bl	80015f0 <LCD_LINE>
			LCD_STR("Droid");
 800177e:	487a      	ldr	r0, [pc, #488]	; (8001968 <main+0x258>)
 8001780:	f7ff ff20 	bl	80015c4 <LCD_STR>
 8001784:	e010      	b.n	80017a8 <main+0x98>
		}
		else if(currentEffect==0)
 8001786:	4b74      	ldr	r3, [pc, #464]	; (8001958 <main+0x248>)
 8001788:	f993 3000 	ldrsb.w	r3, [r3]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10b      	bne.n	80017a8 <main+0x98>
		{
			LCD_LINE(1);
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff ff2d 	bl	80015f0 <LCD_LINE>
			LCD_STR("Darth Vader     ");
 8001796:	4875      	ldr	r0, [pc, #468]	; (800196c <main+0x25c>)
 8001798:	f7ff ff14 	bl	80015c4 <LCD_STR>
			LCD_LINE(2);
 800179c:	2002      	movs	r0, #2
 800179e:	f7ff ff27 	bl	80015f0 <LCD_LINE>
			LCD_STR("                ");
 80017a2:	486f      	ldr	r0, [pc, #444]	; (8001960 <main+0x250>)
 80017a4:	f7ff ff0e 	bl	80015c4 <LCD_STR>
		}

		//Buttons used to cycle between effect presets
		if(checkButton(2) && checkButton(2)!=prev2)
 80017a8:	2002      	movs	r0, #2
 80017aa:	f7ff fe25 	bl	80013f8 <checkButton>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d019      	beq.n	80017e8 <main+0xd8>
 80017b4:	2002      	movs	r0, #2
 80017b6:	f7ff fe1f 	bl	80013f8 <checkButton>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	797b      	ldrb	r3, [r7, #5]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d011      	beq.n	80017e8 <main+0xd8>
		{
			currentEffect++;
 80017c4:	4b64      	ldr	r3, [pc, #400]	; (8001958 <main+0x248>)
 80017c6:	f993 3000 	ldrsb.w	r3, [r3]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	b25a      	sxtb	r2, r3
 80017d2:	4b61      	ldr	r3, [pc, #388]	; (8001958 <main+0x248>)
 80017d4:	701a      	strb	r2, [r3, #0]
			if(currentEffect>2)
 80017d6:	4b60      	ldr	r3, [pc, #384]	; (8001958 <main+0x248>)
 80017d8:	f993 3000 	ldrsb.w	r3, [r3]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	dd22      	ble.n	8001826 <main+0x116>
			{
				currentEffect=0;
 80017e0:	4b5d      	ldr	r3, [pc, #372]	; (8001958 <main+0x248>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]

		//Buttons used to cycle between effect presets
		if(checkButton(2) && checkButton(2)!=prev2)
		{
			currentEffect++;
			if(currentEffect>2)
 80017e6:	e01e      	b.n	8001826 <main+0x116>
			{
				currentEffect=0;
			}
		}
		else if(checkButton(1) && checkButton(1)!=prev1)
 80017e8:	2001      	movs	r0, #1
 80017ea:	f7ff fe05 	bl	80013f8 <checkButton>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d018      	beq.n	8001826 <main+0x116>
 80017f4:	2001      	movs	r0, #1
 80017f6:	f7ff fdff 	bl	80013f8 <checkButton>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	79bb      	ldrb	r3, [r7, #6]
 8001800:	429a      	cmp	r2, r3
 8001802:	d010      	beq.n	8001826 <main+0x116>
		{
			currentEffect--;
 8001804:	4b54      	ldr	r3, [pc, #336]	; (8001958 <main+0x248>)
 8001806:	f993 3000 	ldrsb.w	r3, [r3]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	3b01      	subs	r3, #1
 800180e:	b2db      	uxtb	r3, r3
 8001810:	b25a      	sxtb	r2, r3
 8001812:	4b51      	ldr	r3, [pc, #324]	; (8001958 <main+0x248>)
 8001814:	701a      	strb	r2, [r3, #0]
			if(currentEffect<0)
 8001816:	4b50      	ldr	r3, [pc, #320]	; (8001958 <main+0x248>)
 8001818:	f993 3000 	ldrsb.w	r3, [r3]
 800181c:	2b00      	cmp	r3, #0
 800181e:	da02      	bge.n	8001826 <main+0x116>
			{
				currentEffect=2;
 8001820:	4b4d      	ldr	r3, [pc, #308]	; (8001958 <main+0x248>)
 8001822:	2202      	movs	r2, #2
 8001824:	701a      	strb	r2, [r3, #0]
			}
		}

		//Manages the LED indicators
		if(inputDone && !process && outputDone)
 8001826:	4b52      	ldr	r3, [pc, #328]	; (8001970 <main+0x260>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00e      	beq.n	800184c <main+0x13c>
 800182e:	4b51      	ldr	r3, [pc, #324]	; (8001974 <main+0x264>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10a      	bne.n	800184c <main+0x13c>
 8001836:	4b50      	ldr	r3, [pc, #320]	; (8001978 <main+0x268>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d006      	beq.n	800184c <main+0x13c>
		{
			STM_EVAL_LEDInit(LED4);
 800183e:	2000      	movs	r0, #0
 8001840:	f000 f95c 	bl	8001afc <STM_EVAL_LEDInit>
			STM_EVAL_LEDOn(LED4);
 8001844:	2000      	movs	r0, #0
 8001846:	f000 f987 	bl	8001b58 <STM_EVAL_LEDOn>
 800184a:	e002      	b.n	8001852 <main+0x142>
		}
		else
		{
			STM_EVAL_LEDOff(LED4);
 800184c:	2000      	movs	r0, #0
 800184e:	f000 f99b 	bl	8001b88 <STM_EVAL_LEDOff>
		}
		if(!inputDone)
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <main+0x260>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d106      	bne.n	8001868 <main+0x158>
		{
			STM_EVAL_LEDInit(LED5);
 800185a:	2002      	movs	r0, #2
 800185c:	f000 f94e 	bl	8001afc <STM_EVAL_LEDInit>
			STM_EVAL_LEDOn(LED5);
 8001860:	2002      	movs	r0, #2
 8001862:	f000 f979 	bl	8001b58 <STM_EVAL_LEDOn>
 8001866:	e002      	b.n	800186e <main+0x15e>
		}
		else
		{
			STM_EVAL_LEDOff(LED5);
 8001868:	2002      	movs	r0, #2
 800186a:	f000 f98d 	bl	8001b88 <STM_EVAL_LEDOff>
		}
		if(!outputDone)
 800186e:	4b42      	ldr	r3, [pc, #264]	; (8001978 <main+0x268>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <main+0x174>
		{
			STM_EVAL_LEDInit(LED6);
 8001876:	2003      	movs	r0, #3
 8001878:	f000 f940 	bl	8001afc <STM_EVAL_LEDInit>
			STM_EVAL_LEDOn(LED6);
 800187c:	2003      	movs	r0, #3
 800187e:	f000 f96b 	bl	8001b58 <STM_EVAL_LEDOn>
 8001882:	e002      	b.n	800188a <main+0x17a>
		}
		else
		{
			STM_EVAL_LEDOff(LED6);
 8001884:	2003      	movs	r0, #3
 8001886:	f000 f97f 	bl	8001b88 <STM_EVAL_LEDOff>
		}

		if(inputDone && !process && outputDone && checkButton(0)==1 && checkButton(0)!=prev0)
 800188a:	4b39      	ldr	r3, [pc, #228]	; (8001970 <main+0x260>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d023      	beq.n	80018da <main+0x1ca>
 8001892:	4b38      	ldr	r3, [pc, #224]	; (8001974 <main+0x264>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d11f      	bne.n	80018da <main+0x1ca>
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <main+0x268>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d01b      	beq.n	80018da <main+0x1ca>
 80018a2:	2000      	movs	r0, #0
 80018a4:	f7ff fda8 	bl	80013f8 <checkButton>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d115      	bne.n	80018da <main+0x1ca>
 80018ae:	2000      	movs	r0, #0
 80018b0:	f7ff fda2 	bl	80013f8 <checkButton>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d00d      	beq.n	80018da <main+0x1ca>
		{
			inputDone = 0;
 80018be:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <main+0x260>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
			outputDone = 0;
 80018c4:	4b2c      	ldr	r3, [pc, #176]	; (8001978 <main+0x268>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
			initAudioIn(buffer,size);
 80018ca:	4b22      	ldr	r3, [pc, #136]	; (8001954 <main+0x244>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <main+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4619      	mov	r1, r3
 80018d4:	4610      	mov	r0, r2
 80018d6:	f7ff fba9 	bl	800102c <initAudioIn>
		}
		if(process)
 80018da:	4b26      	ldr	r3, [pc, #152]	; (8001974 <main+0x264>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d026      	beq.n	8001930 <main+0x220>
		{
			if(currentEffect==2)
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <main+0x248>)
 80018e4:	f993 3000 	ldrsb.w	r3, [r3]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d108      	bne.n	80018fe <main+0x1ee>
			{
				swoosh(buffer,size);
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <main+0x244>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <main+0x240>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	4610      	mov	r0, r2
 80018f8:	f7ff fca2 	bl	8001240 <swoosh>
 80018fc:	e015      	b.n	800192a <main+0x21a>
			}
			else if(currentEffect==1)
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <main+0x248>)
 8001900:	f993 3000 	ldrsb.w	r3, [r3]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d108      	bne.n	800191a <main+0x20a>
			{
				probeDroid(buffer,size);
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <main+0x244>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <main+0x240>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	4610      	mov	r0, r2
 8001914:	f7ff fc78 	bl	8001208 <probeDroid>
 8001918:	e007      	b.n	800192a <main+0x21a>
			}
			else
			{
				vader(buffer,size);
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <main+0x244>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <main+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4619      	mov	r1, r3
 8001924:	4610      	mov	r0, r2
 8001926:	f7ff fc4f 	bl	80011c8 <vader>
			}
			process = 0;
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <main+0x264>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
		}

		prev0 = checkButton(0);
 8001930:	2000      	movs	r0, #0
 8001932:	f7ff fd61 	bl	80013f8 <checkButton>
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
		prev1 = checkButton(1);
 800193a:	2001      	movs	r0, #1
 800193c:	f7ff fd5c 	bl	80013f8 <checkButton>
 8001940:	4603      	mov	r3, r0
 8001942:	71bb      	strb	r3, [r7, #6]
		prev2 = checkButton(2);
 8001944:	2002      	movs	r0, #2
 8001946:	f7ff fd57 	bl	80013f8 <checkButton>
 800194a:	4603      	mov	r3, r0
 800194c:	717b      	strb	r3, [r7, #5]
	}
 800194e:	e6f6      	b.n	800173e <main+0x2e>
 8001950:	20000004 	.word	0x20000004
 8001954:	200000b8 	.word	0x200000b8
 8001958:	200000a8 	.word	0x200000a8
 800195c:	0800386c 	.word	0x0800386c
 8001960:	0800387c 	.word	0x0800387c
 8001964:	08003890 	.word	0x08003890
 8001968:	080038a0 	.word	0x080038a0
 800196c:	080038a8 	.word	0x080038a8
 8001970:	20000000 	.word	0x20000000
 8001974:	200000a9 	.word	0x200000a9
 8001978:	20000001 	.word	0x20000001

0800197c <EVAL_AUDIO_TransferComplete_CallBack>:
}

void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){return;}
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop

08001994 <EVAL_AUDIO_GetSampleCallBack>:
uint16_t EVAL_AUDIO_GetSampleCallBack(void){return -1;}
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
 8001998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80019ac:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <Audio_MAL_IRQHandler+0xe4>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <Audio_MAL_IRQHandler+0xe8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f000 fd92 	bl	80024e0 <DMA_GetFlagStatus>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d062      	beq.n	8001a88 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80019c2:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <Audio_MAL_IRQHandler+0xec>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d04a      	beq.n	8001a60 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80019ca:	bf00      	nop
 80019cc:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <Audio_MAL_IRQHandler+0xe4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 fd6d 	bl	80024b0 <DMA_GetCmdStatus>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f7      	bne.n	80019cc <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80019dc:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <Audio_MAL_IRQHandler+0xe4>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <Audio_MAL_IRQHandler+0xe8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4610      	mov	r0, r2
 80019e8:	f000 fdb6 	bl	8002558 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <Audio_MAL_IRQHandler+0xf0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <Audio_MAL_IRQHandler+0xf4>)
 80019f4:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80019f6:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <Audio_MAL_IRQHandler+0xec>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019fe:	4293      	cmp	r3, r2
 8001a00:	bf28      	it	cs
 8001a02:	4613      	movcs	r3, r2
 8001a04:	4a25      	ldr	r2, [pc, #148]	; (8001a9c <Audio_MAL_IRQHandler+0xf4>)
 8001a06:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <Audio_MAL_IRQHandler+0xe4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4923      	ldr	r1, [pc, #140]	; (8001a9c <Audio_MAL_IRQHandler+0xf4>)
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 fca2 	bl	8002358 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <Audio_MAL_IRQHandler+0xe4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 fd2c 	bl	8002478 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <Audio_MAL_IRQHandler+0xf0>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <Audio_MAL_IRQHandler+0xec>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a2c:	428b      	cmp	r3, r1
 8001a2e:	bf28      	it	cs
 8001a30:	460b      	movcs	r3, r1
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	4a18      	ldr	r2, [pc, #96]	; (8001a98 <Audio_MAL_IRQHandler+0xf0>)
 8001a38:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <Audio_MAL_IRQHandler+0xec>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <Audio_MAL_IRQHandler+0xec>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a46:	428b      	cmp	r3, r1
 8001a48:	bf28      	it	cs
 8001a4a:	460b      	movcs	r3, r1
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <Audio_MAL_IRQHandler+0xec>)
 8001a50:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <Audio_MAL_IRQHandler+0xe4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2101      	movs	r1, #1
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 fd0d 	bl	8002478 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001a5e:	e013      	b.n	8001a88 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <Audio_MAL_IRQHandler+0xe4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 fd06 	bl	8002478 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <Audio_MAL_IRQHandler+0xe4>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <Audio_MAL_IRQHandler+0xe8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f000 fd6e 	bl	8002558 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <Audio_MAL_IRQHandler+0xf0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff7a 	bl	800197c <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000010 	.word	0x20000010
 8001a90:	20000014 	.word	0x20000014
 8001a94:	20000008 	.word	0x20000008
 8001a98:	200000bc 	.word	0x200000bc
 8001a9c:	200000fc 	.word	0x200000fc

08001aa0 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001aa4:	f7ff ff80 	bl	80019a8 <Audio_MAL_IRQHandler>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001ab0:	f7ff ff7a 	bl	80019a8 <Audio_MAL_IRQHandler>
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001abc:	2102      	movs	r1, #2
 8001abe:	480d      	ldr	r0, [pc, #52]	; (8001af4 <SPI3_IRQHandler+0x3c>)
 8001ac0:	f000 fa12 	bl	8001ee8 <SPI_I2S_GetFlagStatus>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d011      	beq.n	8001aee <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <SPI3_IRQHandler+0x40>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d106      	bne.n	8001ae0 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8001ad2:	f7ff ff5f 	bl	8001994 <EVAL_AUDIO_GetSampleCallBack>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4619      	mov	r1, r3
 8001ada:	2004      	movs	r0, #4
 8001adc:	f000 fe92 	bl	8002804 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8001ae0:	f7ff ff58 	bl	8001994 <EVAL_AUDIO_GetSampleCallBack>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <SPI3_IRQHandler+0x3c>)
 8001aea:	f000 f9ed 	bl	8001ec8 <SPI_I2S_SendData>
  }
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40003c00 	.word	0x40003c00
 8001af8:	2000000c 	.word	0x2000000c

08001afc <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4a10      	ldr	r2, [pc, #64]	; (8001b4c <STM_EVAL_LEDInit+0x50>)
 8001b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0e:	2101      	movs	r1, #1
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 fa05 	bl	8001f20 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <STM_EVAL_LEDInit+0x54>)
 8001b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001b20:	2301      	movs	r3, #1
 8001b22:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <STM_EVAL_LEDInit+0x58>)
 8001b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b38:	f107 0208 	add.w	r2, r7, #8
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 fa8e 	bl	8002060 <GPIO_Init>
}
 8001b44:	bf00      	nop
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	080038c4 	.word	0x080038c4
 8001b50:	080038bc 	.word	0x080038bc
 8001b54:	20000018 	.word	0x20000018

08001b58 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <STM_EVAL_LEDOn+0x28>)
 8001b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6a:	79fa      	ldrb	r2, [r7, #7]
 8001b6c:	4905      	ldr	r1, [pc, #20]	; (8001b84 <STM_EVAL_LEDOn+0x2c>)
 8001b6e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001b72:	831a      	strh	r2, [r3, #24]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	20000018 	.word	0x20000018
 8001b84:	080038bc 	.word	0x080038bc

08001b88 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	4a06      	ldr	r2, [pc, #24]	; (8001bb0 <STM_EVAL_LEDOff+0x28>)
 8001b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9a:	79fa      	ldrb	r2, [r7, #7]
 8001b9c:	4905      	ldr	r1, [pc, #20]	; (8001bb4 <STM_EVAL_LEDOff+0x2c>)
 8001b9e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001ba2:	835a      	strh	r2, [r3, #26]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	20000018 	.word	0x20000018
 8001bb4:	080038bc 	.word	0x080038bc

08001bb8 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a60      	ldr	r2, [pc, #384]	; (8001d44 <TIM_DeInit+0x18c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d108      	bne.n	8001bda <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001bc8:	2101      	movs	r1, #1
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f000 fa28 	bl	8002020 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f000 fa24 	bl	8002020 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001bd8:	e0af      	b.n	8001d3a <TIM_DeInit+0x182>
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be0:	d108      	bne.n	8001bf4 <TIM_DeInit+0x3c>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001be2:	2101      	movs	r1, #1
 8001be4:	2001      	movs	r0, #1
 8001be6:	f000 f9fb 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8001bea:	2100      	movs	r1, #0
 8001bec:	2001      	movs	r0, #1
 8001bee:	f000 f9f7 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001bf2:	e0a2      	b.n	8001d3a <TIM_DeInit+0x182>
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a54      	ldr	r2, [pc, #336]	; (8001d48 <TIM_DeInit+0x190>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d108      	bne.n	8001c0e <TIM_DeInit+0x56>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	2002      	movs	r0, #2
 8001c00:	f000 f9ee 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001c04:	2100      	movs	r1, #0
 8001c06:	2002      	movs	r0, #2
 8001c08:	f000 f9ea 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001c0c:	e095      	b.n	8001d3a <TIM_DeInit+0x182>
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4e      	ldr	r2, [pc, #312]	; (8001d4c <TIM_DeInit+0x194>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d108      	bne.n	8001c28 <TIM_DeInit+0x70>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001c16:	2101      	movs	r1, #1
 8001c18:	2004      	movs	r0, #4
 8001c1a:	f000 f9e1 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2004      	movs	r0, #4
 8001c22:	f000 f9dd 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001c26:	e088      	b.n	8001d3a <TIM_DeInit+0x182>
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a49      	ldr	r2, [pc, #292]	; (8001d50 <TIM_DeInit+0x198>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d108      	bne.n	8001c42 <TIM_DeInit+0x8a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001c30:	2101      	movs	r1, #1
 8001c32:	2008      	movs	r0, #8
 8001c34:	f000 f9d4 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8001c38:	2100      	movs	r1, #0
 8001c3a:	2008      	movs	r0, #8
 8001c3c:	f000 f9d0 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001c40:	e07b      	b.n	8001d3a <TIM_DeInit+0x182>
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a43      	ldr	r2, [pc, #268]	; (8001d54 <TIM_DeInit+0x19c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d108      	bne.n	8001c5c <TIM_DeInit+0xa4>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	2010      	movs	r0, #16
 8001c4e:	f000 f9c7 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001c52:	2100      	movs	r1, #0
 8001c54:	2010      	movs	r0, #16
 8001c56:	f000 f9c3 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001c5a:	e06e      	b.n	8001d3a <TIM_DeInit+0x182>
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a3e      	ldr	r2, [pc, #248]	; (8001d58 <TIM_DeInit+0x1a0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d108      	bne.n	8001c76 <TIM_DeInit+0xbe>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001c64:	2101      	movs	r1, #1
 8001c66:	2020      	movs	r0, #32
 8001c68:	f000 f9ba 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2020      	movs	r0, #32
 8001c70:	f000 f9b6 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001c74:	e061      	b.n	8001d3a <TIM_DeInit+0x182>
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a38      	ldr	r2, [pc, #224]	; (8001d5c <TIM_DeInit+0x1a4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d108      	bne.n	8001c90 <TIM_DeInit+0xd8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8001c7e:	2101      	movs	r1, #1
 8001c80:	2002      	movs	r0, #2
 8001c82:	f000 f9cd 	bl	8002020 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8001c86:	2100      	movs	r1, #0
 8001c88:	2002      	movs	r0, #2
 8001c8a:	f000 f9c9 	bl	8002020 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001c8e:	e054      	b.n	8001d3a <TIM_DeInit+0x182>
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a33      	ldr	r2, [pc, #204]	; (8001d60 <TIM_DeInit+0x1a8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d10a      	bne.n	8001cae <TIM_DeInit+0xf6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8001c98:	2101      	movs	r1, #1
 8001c9a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001c9e:	f000 f9bf 	bl	8002020 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001ca8:	f000 f9ba 	bl	8002020 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001cac:	e045      	b.n	8001d3a <TIM_DeInit+0x182>
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a2c      	ldr	r2, [pc, #176]	; (8001d64 <TIM_DeInit+0x1ac>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d10a      	bne.n	8001ccc <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001cbc:	f000 f9b0 	bl	8002020 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001cc6:	f000 f9ab 	bl	8002020 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001cca:	e036      	b.n	8001d3a <TIM_DeInit+0x182>
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a26      	ldr	r2, [pc, #152]	; (8001d68 <TIM_DeInit+0x1b0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d10a      	bne.n	8001cea <TIM_DeInit+0x132>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001cda:	f000 f9a1 	bl	8002020 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001cde:	2100      	movs	r1, #0
 8001ce0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001ce4:	f000 f99c 	bl	8002020 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001ce8:	e027      	b.n	8001d3a <TIM_DeInit+0x182>
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a1f      	ldr	r2, [pc, #124]	; (8001d6c <TIM_DeInit+0x1b4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d108      	bne.n	8001d04 <TIM_DeInit+0x14c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	2040      	movs	r0, #64	; 0x40
 8001cf6:	f000 f973 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	2040      	movs	r0, #64	; 0x40
 8001cfe:	f000 f96f 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001d02:	e01a      	b.n	8001d3a <TIM_DeInit+0x182>
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a1a      	ldr	r2, [pc, #104]	; (8001d70 <TIM_DeInit+0x1b8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d108      	bne.n	8001d1e <TIM_DeInit+0x166>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	2080      	movs	r0, #128	; 0x80
 8001d10:	f000 f966 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001d14:	2100      	movs	r1, #0
 8001d16:	2080      	movs	r0, #128	; 0x80
 8001d18:	f000 f962 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001d1c:	e00d      	b.n	8001d3a <TIM_DeInit+0x182>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <TIM_DeInit+0x1bc>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d109      	bne.n	8001d3a <TIM_DeInit+0x182>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8001d26:	2101      	movs	r1, #1
 8001d28:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d2c:	f000 f958 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8001d30:	2100      	movs	r1, #0
 8001d32:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d36:	f000 f953 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40010000 	.word	0x40010000
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40000800 	.word	0x40000800
 8001d50:	40000c00 	.word	0x40000c00
 8001d54:	40001000 	.word	0x40001000
 8001d58:	40001400 	.word	0x40001400
 8001d5c:	40010400 	.word	0x40010400
 8001d60:	40014000 	.word	0x40014000
 8001d64:	40014400 	.word	0x40014400
 8001d68:	40014800 	.word	0x40014800
 8001d6c:	40001800 	.word	0x40001800
 8001d70:	40001c00 	.word	0x40001c00
 8001d74:	40002000 	.word	0x40002000

08001d78 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a29      	ldr	r2, [pc, #164]	; (8001e34 <TIM_TimeBaseInit+0xbc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d013      	beq.n	8001dbc <TIM_TimeBaseInit+0x44>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a28      	ldr	r2, [pc, #160]	; (8001e38 <TIM_TimeBaseInit+0xc0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d00f      	beq.n	8001dbc <TIM_TimeBaseInit+0x44>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da2:	d00b      	beq.n	8001dbc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a25      	ldr	r2, [pc, #148]	; (8001e3c <TIM_TimeBaseInit+0xc4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d007      	beq.n	8001dbc <TIM_TimeBaseInit+0x44>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a24      	ldr	r2, [pc, #144]	; (8001e40 <TIM_TimeBaseInit+0xc8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d003      	beq.n	8001dbc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a23      	ldr	r2, [pc, #140]	; (8001e44 <TIM_TimeBaseInit+0xcc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d108      	bne.n	8001dce <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001dbc:	89fb      	ldrh	r3, [r7, #14]
 8001dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	885a      	ldrh	r2, [r3, #2]
 8001dc8:	89fb      	ldrh	r3, [r7, #14]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <TIM_TimeBaseInit+0xd0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00c      	beq.n	8001df0 <TIM_TimeBaseInit+0x78>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <TIM_TimeBaseInit+0xd4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d008      	beq.n	8001df0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001dde:	89fb      	ldrh	r3, [r7, #14]
 8001de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	891a      	ldrh	r2, [r3, #8]
 8001dea:	89fb      	ldrh	r3, [r7, #14]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	89fa      	ldrh	r2, [r7, #14]
 8001df4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	881a      	ldrh	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <TIM_TimeBaseInit+0xbc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d003      	beq.n	8001e16 <TIM_TimeBaseInit+0x9e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <TIM_TimeBaseInit+0xc0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d104      	bne.n	8001e20 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	7a9b      	ldrb	r3, [r3, #10]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	829a      	strh	r2, [r3, #20]
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40010000 	.word	0x40010000
 8001e38:	40010400 	.word	0x40010400
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40000800 	.word	0x40000800
 8001e44:	40000c00 	.word	0x40000c00
 8001e48:	40001000 	.word	0x40001000
 8001e4c:	40001400 	.word	0x40001400

08001e50 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001e72:	e007      	b.n	8001e84 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f023 0301 	bic.w	r3, r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	801a      	strh	r2, [r3, #0]
  }
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	889b      	ldrh	r3, [r3, #4]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	889b      	ldrh	r3, [r3, #4]
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	887b      	ldrh	r3, [r7, #2]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	809a      	strh	r2, [r3, #4]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	819a      	strh	r2, [r3, #12]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop

08001ee8 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	891b      	ldrh	r3, [r3, #8]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	887b      	ldrh	r3, [r7, #2]
 8001f00:	4013      	ands	r3, r2
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	e001      	b.n	8001f12 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d006      	beq.n	8001f40 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001f32:	490a      	ldr	r1, [pc, #40]	; (8001f5c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001f3e:	e006      	b.n	8001f4e <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001f40:	4906      	ldr	r1, [pc, #24]	; (8001f5c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d006      	beq.n	8001f80 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001f72:	490a      	ldr	r1, [pc, #40]	; (8001f9c <RCC_APB1PeriphClockCmd+0x3c>)
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <RCC_APB1PeriphClockCmd+0x3c>)
 8001f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001f7e:	e006      	b.n	8001f8e <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001f80:	4906      	ldr	r1, [pc, #24]	; (8001f9c <RCC_APB1PeriphClockCmd+0x3c>)
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <RCC_APB1PeriphClockCmd+0x3c>)
 8001f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800

08001fa0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001fb2:	490a      	ldr	r1, [pc, #40]	; (8001fdc <RCC_APB2PeriphClockCmd+0x3c>)
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <RCC_APB2PeriphClockCmd+0x3c>)
 8001fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001fbe:	e006      	b.n	8001fce <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001fc0:	4906      	ldr	r1, [pc, #24]	; (8001fdc <RCC_APB2PeriphClockCmd+0x3c>)
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <RCC_APB2PeriphClockCmd+0x3c>)
 8001fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4013      	ands	r3, r2
 8001fcc:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800

08001fe0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001ff2:	490a      	ldr	r1, [pc, #40]	; (800201c <RCC_APB1PeriphResetCmd+0x3c>)
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <RCC_APB1PeriphResetCmd+0x3c>)
 8001ff6:	6a1a      	ldr	r2, [r3, #32]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001ffe:	e006      	b.n	800200e <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002000:	4906      	ldr	r1, [pc, #24]	; (800201c <RCC_APB1PeriphResetCmd+0x3c>)
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <RCC_APB1PeriphResetCmd+0x3c>)
 8002004:	6a1a      	ldr	r2, [r3, #32]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	43db      	mvns	r3, r3
 800200a:	4013      	ands	r3, r2
 800200c:	620b      	str	r3, [r1, #32]
  }
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800

08002020 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d006      	beq.n	8002040 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002032:	490a      	ldr	r1, [pc, #40]	; (800205c <RCC_APB2PeriphResetCmd+0x3c>)
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <RCC_APB2PeriphResetCmd+0x3c>)
 8002036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4313      	orrs	r3, r2
 800203c:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 800203e:	e006      	b.n	800204e <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8002040:	4906      	ldr	r1, [pc, #24]	; (800205c <RCC_APB2PeriphResetCmd+0x3c>)
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <RCC_APB2PeriphResetCmd+0x3c>)
 8002044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	43db      	mvns	r3, r3
 800204a:	4013      	ands	r3, r2
 800204c:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800

08002060 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	e076      	b.n	800216a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800207c:	2201      	movs	r2, #1
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	429a      	cmp	r2, r3
 8002096:	d165      	bne.n	8002164 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2103      	movs	r1, #3
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	401a      	ands	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	791b      	ldrb	r3, [r3, #4]
 80020b6:	4619      	mov	r1, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	791b      	ldrb	r3, [r3, #4]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d003      	beq.n	80020d6 <GPIO_Init+0x76>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d12e      	bne.n	8002134 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2103      	movs	r1, #3
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	401a      	ands	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	795b      	ldrb	r3, [r3, #5]
 80020f4:	4619      	mov	r1, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	b29b      	uxth	r3, r3
 800210c:	2101      	movs	r1, #1
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	401a      	ands	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	799b      	ldrb	r3, [r3, #6]
 8002122:	4619      	mov	r1, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	b29b      	uxth	r3, r3
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	b29b      	uxth	r3, r3
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	b29b      	uxth	r3, r3
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2103      	movs	r1, #3
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	401a      	ands	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	79db      	ldrb	r3, [r3, #7]
 8002154:	4619      	mov	r1, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	3301      	adds	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b0f      	cmp	r3, #15
 800216e:	d985      	bls.n	800207c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8002170:	bf00      	nop
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	887b      	ldrh	r3, [r7, #2]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e001      	b.n	80021a2 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f023 0201 	bic.w	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2221      	movs	r2, #33	; 0x21
 80021e6:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a46      	ldr	r2, [pc, #280]	; (8002304 <DMA_DeInit+0x154>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d103      	bne.n	80021f8 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80021f0:	4b45      	ldr	r3, [pc, #276]	; (8002308 <DMA_DeInit+0x158>)
 80021f2:	223d      	movs	r2, #61	; 0x3d
 80021f4:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80021f6:	e07e      	b.n	80022f6 <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a44      	ldr	r2, [pc, #272]	; (800230c <DMA_DeInit+0x15c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d104      	bne.n	800220a <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8002200:	4b41      	ldr	r3, [pc, #260]	; (8002308 <DMA_DeInit+0x158>)
 8002202:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8002206:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8002208:	e075      	b.n	80022f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a40      	ldr	r2, [pc, #256]	; (8002310 <DMA_DeInit+0x160>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d104      	bne.n	800221c <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8002212:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <DMA_DeInit+0x158>)
 8002214:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8002218:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800221a:	e06c      	b.n	80022f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a3d      	ldr	r2, [pc, #244]	; (8002314 <DMA_DeInit+0x164>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d104      	bne.n	800222e <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8002224:	4b38      	ldr	r3, [pc, #224]	; (8002308 <DMA_DeInit+0x158>)
 8002226:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800222a:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800222c:	e063      	b.n	80022f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a39      	ldr	r2, [pc, #228]	; (8002318 <DMA_DeInit+0x168>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d103      	bne.n	800223e <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8002236:	4b34      	ldr	r3, [pc, #208]	; (8002308 <DMA_DeInit+0x158>)
 8002238:	4a38      	ldr	r2, [pc, #224]	; (800231c <DMA_DeInit+0x16c>)
 800223a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800223c:	e05b      	b.n	80022f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a37      	ldr	r2, [pc, #220]	; (8002320 <DMA_DeInit+0x170>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d103      	bne.n	800224e <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8002246:	4b30      	ldr	r3, [pc, #192]	; (8002308 <DMA_DeInit+0x158>)
 8002248:	4a36      	ldr	r2, [pc, #216]	; (8002324 <DMA_DeInit+0x174>)
 800224a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800224c:	e053      	b.n	80022f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a35      	ldr	r2, [pc, #212]	; (8002328 <DMA_DeInit+0x178>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d103      	bne.n	800225e <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8002256:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <DMA_DeInit+0x158>)
 8002258:	4a34      	ldr	r2, [pc, #208]	; (800232c <DMA_DeInit+0x17c>)
 800225a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800225c:	e04b      	b.n	80022f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a33      	ldr	r2, [pc, #204]	; (8002330 <DMA_DeInit+0x180>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d104      	bne.n	8002270 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8002266:	4b28      	ldr	r3, [pc, #160]	; (8002308 <DMA_DeInit+0x158>)
 8002268:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800226c:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800226e:	e042      	b.n	80022f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a30      	ldr	r2, [pc, #192]	; (8002334 <DMA_DeInit+0x184>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d103      	bne.n	8002280 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8002278:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <DMA_DeInit+0x188>)
 800227a:	223d      	movs	r2, #61	; 0x3d
 800227c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800227e:	e03a      	b.n	80022f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a2e      	ldr	r2, [pc, #184]	; (800233c <DMA_DeInit+0x18c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d104      	bne.n	8002292 <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8002288:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <DMA_DeInit+0x188>)
 800228a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800228e:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8002290:	e031      	b.n	80022f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a2a      	ldr	r2, [pc, #168]	; (8002340 <DMA_DeInit+0x190>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d104      	bne.n	80022a4 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800229a:	4b27      	ldr	r3, [pc, #156]	; (8002338 <DMA_DeInit+0x188>)
 800229c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80022a0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80022a2:	e028      	b.n	80022f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a27      	ldr	r2, [pc, #156]	; (8002344 <DMA_DeInit+0x194>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d104      	bne.n	80022b6 <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80022ac:	4b22      	ldr	r3, [pc, #136]	; (8002338 <DMA_DeInit+0x188>)
 80022ae:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80022b2:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80022b4:	e01f      	b.n	80022f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a23      	ldr	r2, [pc, #140]	; (8002348 <DMA_DeInit+0x198>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d103      	bne.n	80022c6 <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <DMA_DeInit+0x188>)
 80022c0:	4a16      	ldr	r2, [pc, #88]	; (800231c <DMA_DeInit+0x16c>)
 80022c2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80022c4:	e017      	b.n	80022f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a20      	ldr	r2, [pc, #128]	; (800234c <DMA_DeInit+0x19c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d103      	bne.n	80022d6 <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <DMA_DeInit+0x188>)
 80022d0:	4a14      	ldr	r2, [pc, #80]	; (8002324 <DMA_DeInit+0x174>)
 80022d2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80022d4:	e00f      	b.n	80022f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a1d      	ldr	r2, [pc, #116]	; (8002350 <DMA_DeInit+0x1a0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d103      	bne.n	80022e6 <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <DMA_DeInit+0x188>)
 80022e0:	4a12      	ldr	r2, [pc, #72]	; (800232c <DMA_DeInit+0x17c>)
 80022e2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80022e4:	e007      	b.n	80022f6 <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a1a      	ldr	r2, [pc, #104]	; (8002354 <DMA_DeInit+0x1a4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d103      	bne.n	80022f6 <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80022ee:	4b12      	ldr	r3, [pc, #72]	; (8002338 <DMA_DeInit+0x188>)
 80022f0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80022f4:	60da      	str	r2, [r3, #12]
    }
  }
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40026010 	.word	0x40026010
 8002308:	40026000 	.word	0x40026000
 800230c:	40026028 	.word	0x40026028
 8002310:	40026040 	.word	0x40026040
 8002314:	40026058 	.word	0x40026058
 8002318:	40026070 	.word	0x40026070
 800231c:	2000003d 	.word	0x2000003d
 8002320:	40026088 	.word	0x40026088
 8002324:	20000f40 	.word	0x20000f40
 8002328:	400260a0 	.word	0x400260a0
 800232c:	203d0000 	.word	0x203d0000
 8002330:	400260b8 	.word	0x400260b8
 8002334:	40026410 	.word	0x40026410
 8002338:	40026400 	.word	0x40026400
 800233c:	40026428 	.word	0x40026428
 8002340:	40026440 	.word	0x40026440
 8002344:	40026458 	.word	0x40026458
 8002348:	40026470 	.word	0x40026470
 800234c:	40026488 	.word	0x40026488
 8002350:	400264a0 	.word	0x400264a0
 8002354:	400264b8 	.word	0x400264b8

08002358 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4b25      	ldr	r3, [pc, #148]	; (8002404 <DMA_Init+0xac>)
 8002370:	4013      	ands	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002382:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800238e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800239a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80023a6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ac:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0307 	bic.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	4313      	orrs	r3, r2
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	60da      	str	r2, [r3, #12]
}
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	f01c803f 	.word	0xf01c803f

08002408 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	639a      	str	r2, [r3, #56]	; 0x38
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop

08002478 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d006      	beq.n	8002498 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002496:	e005      	b.n	80024a4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 0201 	bic.w	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	601a      	str	r2, [r3, #0]
  }
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	e001      	b.n	80024d2 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a15      	ldr	r2, [pc, #84]	; (800254c <DMA_GetFlagStatus+0x6c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d802      	bhi.n	8002500 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <DMA_GetFlagStatus+0x70>)
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	e001      	b.n	8002504 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002500:	4b14      	ldr	r3, [pc, #80]	; (8002554 <DMA_GetFlagStatus+0x74>)
 8002502:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	e002      	b.n	800251c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002522:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002526:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	4013      	ands	r3, r2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002532:	2301      	movs	r3, #1
 8002534:	75fb      	strb	r3, [r7, #23]
 8002536:	e001      	b.n	800253c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8002538:	2300      	movs	r3, #0
 800253a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800253c:	7dfb      	ldrb	r3, [r7, #23]
}
 800253e:	4618      	mov	r0, r3
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	4002640f 	.word	0x4002640f
 8002550:	40026000 	.word	0x40026000
 8002554:	40026400 	.word	0x40026400

08002558 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a10      	ldr	r2, [pc, #64]	; (80025a8 <DMA_ClearFlag+0x50>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d802      	bhi.n	8002570 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <DMA_ClearFlag+0x54>)
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	e001      	b.n	8002574 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002570:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <DMA_ClearFlag+0x58>)
 8002572:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002584:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 800258c:	e006      	b.n	800259c <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002594:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	6093      	str	r3, [r2, #8]
  }    
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	4002640f 	.word	0x4002640f
 80025ac:	40026000 	.word	0x40026000
 80025b0:	40026400 	.word	0x40026400

080025b4 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	4613      	mov	r3, r2
 80025c0:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00f      	beq.n	80025ec <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d006      	beq.n	80025e0 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	615a      	str	r2, [r3, #20]
 80025de:	e005      	b.n	80025ec <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b80      	cmp	r3, #128	; 0x80
 80025f0:	d014      	beq.n	800261c <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 031e 	and.w	r3, r3, #30
 8002602:	431a      	orrs	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8002608:	e008      	b.n	800261c <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f003 031e 	and.w	r3, r3, #30
 8002614:	43db      	mvns	r3, r3
 8002616:	401a      	ands	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	601a      	str	r2, [r3, #0]
    }    
  }
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a22      	ldr	r2, [pc, #136]	; (80026cc <DMA_GetITStatus+0xa4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d802      	bhi.n	800264c <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <DMA_GetITStatus+0xa8>)
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	e001      	b.n	8002650 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800264c:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <DMA_GetITStatus+0xac>)
 800264e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002656:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	0adb      	lsrs	r3, r3, #11
 8002662:	f003 031e 	and.w	r3, r3, #30
 8002666:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4013      	ands	r3, r2
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	e004      	b.n	800267e <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267c:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	e002      	b.n	8002696 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800269c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <DMA_GetITStatus+0x90>
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 80026b2:	2301      	movs	r3, #1
 80026b4:	75fb      	strb	r3, [r7, #23]
 80026b6:	e001      	b.n	80026bc <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 80026b8:	2300      	movs	r3, #0
 80026ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 80026bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	371c      	adds	r7, #28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	4002640f 	.word	0x4002640f
 80026d0:	40026000 	.word	0x40026000
 80026d4:	40026400 	.word	0x40026400

080026d8 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a10      	ldr	r2, [pc, #64]	; (8002728 <DMA_ClearITPendingBit+0x50>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d802      	bhi.n	80026f0 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <DMA_ClearITPendingBit+0x54>)
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	e001      	b.n	80026f4 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <DMA_ClearITPendingBit+0x58>)
 80026f2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002704:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 800270c:	e006      	b.n	800271c <DMA_ClearITPendingBit+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002714:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	6093      	str	r3, [r2, #8]
  }   
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	4002640f 	.word	0x4002640f
 800272c:	40026000 	.word	0x40026000
 8002730:	40026400 	.word	0x40026400

08002734 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8002738:	2101      	movs	r1, #1
 800273a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800273e:	f7ff fc4f 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8002742:	2100      	movs	r1, #0
 8002744:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002748:	f7ff fc4a 	bl	8001fe0 <RCC_APB1PeriphResetCmd>
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}

08002750 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8002762:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <DAC_Init+0x64>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8002768:	f640 72fe 	movw	r2, #4094	; 0xffe
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4013      	ands	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8002788:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800278e:	4313      	orrs	r3, r2
 8002790:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <DAC_Init+0x64>)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6013      	str	r3, [r2, #0]
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40007400 	.word	0x40007400

080027b8 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d009      	beq.n	80027de <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 80027ca:	490d      	ldr	r1, [pc, #52]	; (8002800 <DAC_Cmd+0x48>)
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <DAC_Cmd+0x48>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2001      	movs	r0, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	fa00 f303 	lsl.w	r3, r0, r3
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 80027dc:	e009      	b.n	80027f2 <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 80027de:	4908      	ldr	r1, [pc, #32]	; (8002800 <DAC_Cmd+0x48>)
 80027e0:	4b07      	ldr	r3, [pc, #28]	; (8002800 <DAC_Cmd+0x48>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	2001      	movs	r0, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	fa00 f303 	lsl.w	r3, r0, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	4013      	ands	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
  }
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40007400 	.word	0x40007400

08002804 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <DAC_SetChannel1Data+0x34>)
 8002816:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	3308      	adds	r3, #8
 8002820:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	461a      	mov	r2, r3
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	6013      	str	r3, [r2, #0]
}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40007400 	.word	0x40007400

0800283c <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 800284e:	490e      	ldr	r1, [pc, #56]	; (8002888 <DAC_DMACmd+0x4c>)
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <DAC_DMACmd+0x4c>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	fa00 f303 	lsl.w	r3, r0, r3
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 8002862:	e00a      	b.n	800287a <DAC_DMACmd+0x3e>
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8002864:	4908      	ldr	r1, [pc, #32]	; (8002888 <DAC_DMACmd+0x4c>)
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <DAC_DMACmd+0x4c>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	fa00 f303 	lsl.w	r3, r0, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	4013      	ands	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
  }
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40007400 	.word	0x40007400

0800288c <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8002890:	2101      	movs	r1, #1
 8002892:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002896:	f7ff fbc3 	bl	8002020 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 800289a:	2100      	movs	r1, #0
 800289c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80028a0:	f7ff fbbe 	bl	8002020 <RCC_APB2PeriphResetCmd>
}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80028c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028ca:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	791b      	ldrb	r3, [r3, #4]
 80028d0:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80028d6:	4313      	orrs	r3, r2
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4b18      	ldr	r3, [pc, #96]	; (8002950 <ADC_Init+0xa8>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80028fa:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8002900:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	795b      	ldrb	r3, [r3, #5]
 8002906:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8002908:	4313      	orrs	r3, r2
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002922:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	7d1b      	ldrb	r3, [r3, #20]
 8002928:	3b01      	subs	r3, #1
 800292a:	b2da      	uxtb	r2, r3
 800292c:	7afb      	ldrb	r3, [r7, #11]
 800292e:	4313      	orrs	r3, r2
 8002930:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8002932:	7afb      	ldrb	r3, [r7, #11]
 8002934:	051b      	lsls	r3, r3, #20
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	c0fff7fd 	.word	0xc0fff7fd

08002954 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8002960:	4b0e      	ldr	r3, [pc, #56]	; (800299c <ADC_CommonInit+0x48>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <ADC_CommonInit+0x4c>)
 800296a:	4013      	ands	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8002976:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800297c:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8002982:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 800298a:	4a04      	ldr	r2, [pc, #16]	; (800299c <ADC_CommonInit+0x48>)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6053      	str	r3, [r2, #4]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40012300 	.word	0x40012300
 80029a0:	fffc30e0 	.word	0xfffc30e0

080029a4 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d006      	beq.n	80029c4 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f043 0201 	orr.w	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80029c2:	e005      	b.n	80029d0 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f023 0201 	bic.w	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	609a      	str	r2, [r3, #8]
  }
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	4608      	mov	r0, r1
 80029e6:	4611      	mov	r1, r2
 80029e8:	461a      	mov	r2, r3
 80029ea:	4603      	mov	r3, r0
 80029ec:	70fb      	strb	r3, [r7, #3]
 80029ee:	460b      	mov	r3, r1
 80029f0:	70bb      	strb	r3, [r7, #2]
 80029f2:	4613      	mov	r3, r2
 80029f4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	2b09      	cmp	r3, #9
 8002a02:	d923      	bls.n	8002a4c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8002a0a:	78fb      	ldrb	r3, [r7, #3]
 8002a0c:	f1a3 020a 	sub.w	r2, r3, #10
 8002a10:	4613      	mov	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	2207      	movs	r2, #7
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4013      	ands	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8002a28:	7879      	ldrb	r1, [r7, #1]
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	f1a3 020a 	sub.w	r2, r3, #10
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	e01e      	b.n	8002a8a <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	2207      	movs	r2, #7
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8002a6c:	7879      	ldrb	r1, [r7, #1]
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	4613      	mov	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8002a8a:	78bb      	ldrb	r3, [r7, #2]
 8002a8c:	2b06      	cmp	r3, #6
 8002a8e:	d821      	bhi.n	8002ad4 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a94:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8002a96:	78bb      	ldrb	r3, [r7, #2]
 8002a98:	1e5a      	subs	r2, r3, #1
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	221f      	movs	r2, #31
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8002ab2:	78f9      	ldrb	r1, [r7, #3]
 8002ab4:	78bb      	ldrb	r3, [r7, #2]
 8002ab6:	1e5a      	subs	r2, r3, #1
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8002ad2:	e047      	b.n	8002b64 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8002ad4:	78bb      	ldrb	r3, [r7, #2]
 8002ad6:	2b0c      	cmp	r3, #12
 8002ad8:	d821      	bhi.n	8002b1e <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8002ae0:	78bb      	ldrb	r3, [r7, #2]
 8002ae2:	1fda      	subs	r2, r3, #7
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	221f      	movs	r2, #31
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8002afc:	78f9      	ldrb	r1, [r7, #3]
 8002afe:	78bb      	ldrb	r3, [r7, #2]
 8002b00:	1fda      	subs	r2, r3, #7
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8002b1c:	e022      	b.n	8002b64 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8002b24:	78bb      	ldrb	r3, [r7, #2]
 8002b26:	f1a3 020d 	sub.w	r2, r3, #13
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	221f      	movs	r2, #31
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8002b42:	78f9      	ldrb	r1, [r7, #3]
 8002b44:	78bb      	ldrb	r3, [r7, #2]
 8002b46:	f1a3 020d 	sub.w	r2, r3, #13
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d006      	beq.n	8002b90 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8002b8e:	e005      	b.n	8002b9c <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d006      	beq.n	8002bc8 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8002bc6:	e005      	b.n	8002bd4 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]
 8002bec:	2300      	movs	r3, #0
 8002bee:	73bb      	strb	r3, [r7, #14]
 8002bf0:	230f      	movs	r3, #15
 8002bf2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	78db      	ldrb	r3, [r3, #3]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d038      	beq.n	8002c6e <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002bfc:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <NVIC_Init+0xbc>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	f1c3 0304 	rsb	r3, r3, #4
 8002c10:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8002c12:	7b7a      	ldrb	r2, [r7, #13]
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	fa42 f303 	asr.w	r3, r2, r3
 8002c1a:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	785b      	ldrb	r3, [r3, #1]
 8002c20:	461a      	mov	r2, r3
 8002c22:	7bbb      	ldrb	r3, [r7, #14]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	789a      	ldrb	r2, [r3, #2]
 8002c2e:	7b7b      	ldrb	r3, [r7, #13]
 8002c30:	4013      	ands	r3, r2
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002c40:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <NVIC_Init+0xc0>)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	4413      	add	r3, r2
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002c4e:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <NVIC_Init+0xc0>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	095b      	lsrs	r3, r3, #5
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	2101      	movs	r1, #1
 8002c64:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002c68:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002c6c:	e00f      	b.n	8002c8e <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002c6e:	490c      	ldr	r1, [pc, #48]	; (8002ca0 <NVIC_Init+0xc0>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	f003 031f 	and.w	r3, r3, #31
 8002c82:	2201      	movs	r2, #1
 8002c84:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002c86:	f100 0320 	add.w	r3, r0, #32
 8002c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	e000ed00 	.word	0xe000ed00
 8002ca0:	e000e100 	.word	0xe000e100

08002ca4 <__libc_init_array>:
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <__libc_init_array+0x3c>)
 8002ca8:	4c0e      	ldr	r4, [pc, #56]	; (8002ce4 <__libc_init_array+0x40>)
 8002caa:	1ae4      	subs	r4, r4, r3
 8002cac:	10a4      	asrs	r4, r4, #2
 8002cae:	2500      	movs	r5, #0
 8002cb0:	461e      	mov	r6, r3
 8002cb2:	42a5      	cmp	r5, r4
 8002cb4:	d004      	beq.n	8002cc0 <__libc_init_array+0x1c>
 8002cb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cba:	4798      	blx	r3
 8002cbc:	3501      	adds	r5, #1
 8002cbe:	e7f8      	b.n	8002cb2 <__libc_init_array+0xe>
 8002cc0:	f000 fdc8 	bl	8003854 <_init>
 8002cc4:	4c08      	ldr	r4, [pc, #32]	; (8002ce8 <__libc_init_array+0x44>)
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <__libc_init_array+0x48>)
 8002cc8:	1ae4      	subs	r4, r4, r3
 8002cca:	10a4      	asrs	r4, r4, #2
 8002ccc:	2500      	movs	r5, #0
 8002cce:	461e      	mov	r6, r3
 8002cd0:	42a5      	cmp	r5, r4
 8002cd2:	d004      	beq.n	8002cde <__libc_init_array+0x3a>
 8002cd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cd8:	4798      	blx	r3
 8002cda:	3501      	adds	r5, #1
 8002cdc:	e7f8      	b.n	8002cd0 <__libc_init_array+0x2c>
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
 8002ce0:	08003ca8 	.word	0x08003ca8
 8002ce4:	08003ca8 	.word	0x08003ca8
 8002ce8:	08003cac 	.word	0x08003cac
 8002cec:	08003ca8 	.word	0x08003ca8

08002cf0 <malloc>:
 8002cf0:	4b02      	ldr	r3, [pc, #8]	; (8002cfc <malloc+0xc>)
 8002cf2:	4601      	mov	r1, r0
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	f000 b803 	b.w	8002d00 <_malloc_r>
 8002cfa:	bf00      	nop
 8002cfc:	20000088 	.word	0x20000088

08002d00 <_malloc_r>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	1ccd      	adds	r5, r1, #3
 8002d04:	f025 0503 	bic.w	r5, r5, #3
 8002d08:	3508      	adds	r5, #8
 8002d0a:	2d0c      	cmp	r5, #12
 8002d0c:	bf38      	it	cc
 8002d0e:	250c      	movcc	r5, #12
 8002d10:	2d00      	cmp	r5, #0
 8002d12:	4606      	mov	r6, r0
 8002d14:	db01      	blt.n	8002d1a <_malloc_r+0x1a>
 8002d16:	42a9      	cmp	r1, r5
 8002d18:	d902      	bls.n	8002d20 <_malloc_r+0x20>
 8002d1a:	230c      	movs	r3, #12
 8002d1c:	6033      	str	r3, [r6, #0]
 8002d1e:	e046      	b.n	8002dae <_malloc_r+0xae>
 8002d20:	f000 f85c 	bl	8002ddc <__malloc_lock>
 8002d24:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <_malloc_r+0xb4>)
 8002d26:	681c      	ldr	r4, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	b1a1      	cbz	r1, 8002d58 <_malloc_r+0x58>
 8002d2e:	680b      	ldr	r3, [r1, #0]
 8002d30:	1b5b      	subs	r3, r3, r5
 8002d32:	d40e      	bmi.n	8002d52 <_malloc_r+0x52>
 8002d34:	2b0b      	cmp	r3, #11
 8002d36:	d903      	bls.n	8002d40 <_malloc_r+0x40>
 8002d38:	600b      	str	r3, [r1, #0]
 8002d3a:	18cc      	adds	r4, r1, r3
 8002d3c:	50cd      	str	r5, [r1, r3]
 8002d3e:	e01e      	b.n	8002d7e <_malloc_r+0x7e>
 8002d40:	428c      	cmp	r4, r1
 8002d42:	bf0d      	iteet	eq
 8002d44:	6863      	ldreq	r3, [r4, #4]
 8002d46:	684b      	ldrne	r3, [r1, #4]
 8002d48:	6063      	strne	r3, [r4, #4]
 8002d4a:	6013      	streq	r3, [r2, #0]
 8002d4c:	bf18      	it	ne
 8002d4e:	460c      	movne	r4, r1
 8002d50:	e015      	b.n	8002d7e <_malloc_r+0x7e>
 8002d52:	460c      	mov	r4, r1
 8002d54:	6849      	ldr	r1, [r1, #4]
 8002d56:	e7e9      	b.n	8002d2c <_malloc_r+0x2c>
 8002d58:	4c17      	ldr	r4, [pc, #92]	; (8002db8 <_malloc_r+0xb8>)
 8002d5a:	6823      	ldr	r3, [r4, #0]
 8002d5c:	b91b      	cbnz	r3, 8002d66 <_malloc_r+0x66>
 8002d5e:	4630      	mov	r0, r6
 8002d60:	f000 f82c 	bl	8002dbc <_sbrk_r>
 8002d64:	6020      	str	r0, [r4, #0]
 8002d66:	4629      	mov	r1, r5
 8002d68:	4630      	mov	r0, r6
 8002d6a:	f000 f827 	bl	8002dbc <_sbrk_r>
 8002d6e:	1c43      	adds	r3, r0, #1
 8002d70:	d018      	beq.n	8002da4 <_malloc_r+0xa4>
 8002d72:	1cc4      	adds	r4, r0, #3
 8002d74:	f024 0403 	bic.w	r4, r4, #3
 8002d78:	42a0      	cmp	r0, r4
 8002d7a:	d10d      	bne.n	8002d98 <_malloc_r+0x98>
 8002d7c:	6025      	str	r5, [r4, #0]
 8002d7e:	4630      	mov	r0, r6
 8002d80:	f000 f82d 	bl	8002dde <__malloc_unlock>
 8002d84:	f104 000b 	add.w	r0, r4, #11
 8002d88:	1d23      	adds	r3, r4, #4
 8002d8a:	f020 0007 	bic.w	r0, r0, #7
 8002d8e:	1ac3      	subs	r3, r0, r3
 8002d90:	d00e      	beq.n	8002db0 <_malloc_r+0xb0>
 8002d92:	425a      	negs	r2, r3
 8002d94:	50e2      	str	r2, [r4, r3]
 8002d96:	bd70      	pop	{r4, r5, r6, pc}
 8002d98:	1a21      	subs	r1, r4, r0
 8002d9a:	4630      	mov	r0, r6
 8002d9c:	f000 f80e 	bl	8002dbc <_sbrk_r>
 8002da0:	3001      	adds	r0, #1
 8002da2:	d1eb      	bne.n	8002d7c <_malloc_r+0x7c>
 8002da4:	230c      	movs	r3, #12
 8002da6:	6033      	str	r3, [r6, #0]
 8002da8:	4630      	mov	r0, r6
 8002daa:	f000 f818 	bl	8002dde <__malloc_unlock>
 8002dae:	2000      	movs	r0, #0
 8002db0:	bd70      	pop	{r4, r5, r6, pc}
 8002db2:	bf00      	nop
 8002db4:	200000b0 	.word	0x200000b0
 8002db8:	200000ac 	.word	0x200000ac

08002dbc <_sbrk_r>:
 8002dbc:	b538      	push	{r3, r4, r5, lr}
 8002dbe:	4c06      	ldr	r4, [pc, #24]	; (8002dd8 <_sbrk_r+0x1c>)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	4605      	mov	r5, r0
 8002dc4:	4608      	mov	r0, r1
 8002dc6:	6023      	str	r3, [r4, #0]
 8002dc8:	f000 fd36 	bl	8003838 <_sbrk>
 8002dcc:	1c43      	adds	r3, r0, #1
 8002dce:	d102      	bne.n	8002dd6 <_sbrk_r+0x1a>
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	b103      	cbz	r3, 8002dd6 <_sbrk_r+0x1a>
 8002dd4:	602b      	str	r3, [r5, #0]
 8002dd6:	bd38      	pop	{r3, r4, r5, pc}
 8002dd8:	20000138 	.word	0x20000138

08002ddc <__malloc_lock>:
 8002ddc:	4770      	bx	lr

08002dde <__malloc_unlock>:
 8002dde:	4770      	bx	lr

08002de0 <sinf>:
 8002de0:	ee10 3a10 	vmov	r3, s0
 8002de4:	b507      	push	{r0, r1, r2, lr}
 8002de6:	4a1d      	ldr	r2, [pc, #116]	; (8002e5c <sinf+0x7c>)
 8002de8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dec:	4293      	cmp	r3, r2
 8002dee:	dc03      	bgt.n	8002df8 <sinf+0x18>
 8002df0:	2000      	movs	r0, #0
 8002df2:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8002e60 <sinf+0x80>
 8002df6:	e014      	b.n	8002e22 <sinf+0x42>
 8002df8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002dfc:	db02      	blt.n	8002e04 <sinf+0x24>
 8002dfe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002e02:	e028      	b.n	8002e56 <sinf+0x76>
 8002e04:	4668      	mov	r0, sp
 8002e06:	f000 f82d 	bl	8002e64 <__ieee754_rem_pio2f>
 8002e0a:	f000 0003 	and.w	r0, r0, #3
 8002e0e:	2801      	cmp	r0, #1
 8002e10:	d00a      	beq.n	8002e28 <sinf+0x48>
 8002e12:	2802      	cmp	r0, #2
 8002e14:	d00f      	beq.n	8002e36 <sinf+0x56>
 8002e16:	b9b0      	cbnz	r0, 8002e46 <sinf+0x66>
 8002e18:	eddd 0a01 	vldr	s1, [sp, #4]
 8002e1c:	ed9d 0a00 	vldr	s0, [sp]
 8002e20:	2001      	movs	r0, #1
 8002e22:	f000 fc0d 	bl	8003640 <__kernel_sinf>
 8002e26:	e016      	b.n	8002e56 <sinf+0x76>
 8002e28:	eddd 0a01 	vldr	s1, [sp, #4]
 8002e2c:	ed9d 0a00 	vldr	s0, [sp]
 8002e30:	f000 f942 	bl	80030b8 <__kernel_cosf>
 8002e34:	e00f      	b.n	8002e56 <sinf+0x76>
 8002e36:	2001      	movs	r0, #1
 8002e38:	eddd 0a01 	vldr	s1, [sp, #4]
 8002e3c:	ed9d 0a00 	vldr	s0, [sp]
 8002e40:	f000 fbfe 	bl	8003640 <__kernel_sinf>
 8002e44:	e005      	b.n	8002e52 <sinf+0x72>
 8002e46:	eddd 0a01 	vldr	s1, [sp, #4]
 8002e4a:	ed9d 0a00 	vldr	s0, [sp]
 8002e4e:	f000 f933 	bl	80030b8 <__kernel_cosf>
 8002e52:	eeb1 0a40 	vneg.f32	s0, s0
 8002e56:	b003      	add	sp, #12
 8002e58:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e5c:	3f490fd8 	.word	0x3f490fd8
 8002e60:	00000000 	.word	0x00000000

08002e64 <__ieee754_rem_pio2f>:
 8002e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e66:	ee10 6a10 	vmov	r6, s0
 8002e6a:	4b85      	ldr	r3, [pc, #532]	; (8003080 <__ieee754_rem_pio2f+0x21c>)
 8002e6c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8002e70:	429c      	cmp	r4, r3
 8002e72:	b087      	sub	sp, #28
 8002e74:	4605      	mov	r5, r0
 8002e76:	dc04      	bgt.n	8002e82 <__ieee754_rem_pio2f+0x1e>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	ed85 0a00 	vstr	s0, [r5]
 8002e7e:	6043      	str	r3, [r0, #4]
 8002e80:	e0b7      	b.n	8002ff2 <__ieee754_rem_pio2f+0x18e>
 8002e82:	4b80      	ldr	r3, [pc, #512]	; (8003084 <__ieee754_rem_pio2f+0x220>)
 8002e84:	429c      	cmp	r4, r3
 8002e86:	dc37      	bgt.n	8002ef8 <__ieee754_rem_pio2f+0x94>
 8002e88:	2e00      	cmp	r6, #0
 8002e8a:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8003088 <__ieee754_rem_pio2f+0x224>
 8002e8e:	4b7f      	ldr	r3, [pc, #508]	; (800308c <__ieee754_rem_pio2f+0x228>)
 8002e90:	f024 040f 	bic.w	r4, r4, #15
 8002e94:	dd17      	ble.n	8002ec6 <__ieee754_rem_pio2f+0x62>
 8002e96:	429c      	cmp	r4, r3
 8002e98:	ee70 7a47 	vsub.f32	s15, s0, s14
 8002e9c:	bf09      	itett	eq
 8002e9e:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8003090 <__ieee754_rem_pio2f+0x22c>
 8002ea2:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8003094 <__ieee754_rem_pio2f+0x230>
 8002ea6:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8002eaa:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8003098 <__ieee754_rem_pio2f+0x234>
 8002eae:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8002eb2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002eb6:	edc0 6a00 	vstr	s13, [r0]
 8002eba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ebe:	edc0 7a01 	vstr	s15, [r0, #4]
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	e0da      	b.n	800307c <__ieee754_rem_pio2f+0x218>
 8002ec6:	429c      	cmp	r4, r3
 8002ec8:	ee70 7a07 	vadd.f32	s15, s0, s14
 8002ecc:	bf09      	itett	eq
 8002ece:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8003090 <__ieee754_rem_pio2f+0x22c>
 8002ed2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8003094 <__ieee754_rem_pio2f+0x230>
 8002ed6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8002eda:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8003098 <__ieee754_rem_pio2f+0x234>
 8002ede:	ee77 6a87 	vadd.f32	s13, s15, s14
 8002ee2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ee6:	edc0 6a00 	vstr	s13, [r0]
 8002eea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002eee:	edc0 7a01 	vstr	s15, [r0, #4]
 8002ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef6:	e0c1      	b.n	800307c <__ieee754_rem_pio2f+0x218>
 8002ef8:	4b68      	ldr	r3, [pc, #416]	; (800309c <__ieee754_rem_pio2f+0x238>)
 8002efa:	429c      	cmp	r4, r3
 8002efc:	dc70      	bgt.n	8002fe0 <__ieee754_rem_pio2f+0x17c>
 8002efe:	f000 fbe7 	bl	80036d0 <fabsf>
 8002f02:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80030a0 <__ieee754_rem_pio2f+0x23c>
 8002f06:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002f0a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002f0e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003088 <__ieee754_rem_pio2f+0x224>
 8002f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f16:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002f1a:	ee17 0a90 	vmov	r0, s15
 8002f1e:	eef1 7a46 	vneg.f32	s15, s12
 8002f22:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002f26:	281f      	cmp	r0, #31
 8002f28:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8003094 <__ieee754_rem_pio2f+0x230>
 8002f2c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8002f30:	ee70 6a47 	vsub.f32	s13, s0, s14
 8002f34:	ee16 3a90 	vmov	r3, s13
 8002f38:	dc07      	bgt.n	8002f4a <__ieee754_rem_pio2f+0xe6>
 8002f3a:	1e47      	subs	r7, r0, #1
 8002f3c:	4959      	ldr	r1, [pc, #356]	; (80030a4 <__ieee754_rem_pio2f+0x240>)
 8002f3e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8002f42:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8002f46:	428a      	cmp	r2, r1
 8002f48:	d105      	bne.n	8002f56 <__ieee754_rem_pio2f+0xf2>
 8002f4a:	15e4      	asrs	r4, r4, #23
 8002f4c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8002f50:	1aa2      	subs	r2, r4, r2
 8002f52:	2a08      	cmp	r2, #8
 8002f54:	dc01      	bgt.n	8002f5a <__ieee754_rem_pio2f+0xf6>
 8002f56:	602b      	str	r3, [r5, #0]
 8002f58:	e02f      	b.n	8002fba <__ieee754_rem_pio2f+0x156>
 8002f5a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003090 <__ieee754_rem_pio2f+0x22c>
 8002f5e:	eef0 6a40 	vmov.f32	s13, s0
 8002f62:	eee7 6a87 	vfma.f32	s13, s15, s14
 8002f66:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002f6a:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002f6e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003098 <__ieee754_rem_pio2f+0x234>
 8002f72:	ee96 0a07 	vfnms.f32	s0, s12, s14
 8002f76:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8002f7a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f7e:	ee15 3a90 	vmov	r3, s11
 8002f82:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8002f86:	1aa4      	subs	r4, r4, r2
 8002f88:	2c19      	cmp	r4, #25
 8002f8a:	dc04      	bgt.n	8002f96 <__ieee754_rem_pio2f+0x132>
 8002f8c:	edc5 5a00 	vstr	s11, [r5]
 8002f90:	eeb0 0a66 	vmov.f32	s0, s13
 8002f94:	e011      	b.n	8002fba <__ieee754_rem_pio2f+0x156>
 8002f96:	eddf 5a44 	vldr	s11, [pc, #272]	; 80030a8 <__ieee754_rem_pio2f+0x244>
 8002f9a:	eeb0 0a66 	vmov.f32	s0, s13
 8002f9e:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8002fa2:	ee36 7ac0 	vsub.f32	s14, s13, s0
 8002fa6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8002faa:	eddf 7a40 	vldr	s15, [pc, #256]	; 80030ac <__ieee754_rem_pio2f+0x248>
 8002fae:	ee96 7a27 	vfnms.f32	s14, s12, s15
 8002fb2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8002fb6:	edc5 7a00 	vstr	s15, [r5]
 8002fba:	edd5 6a00 	vldr	s13, [r5]
 8002fbe:	ee70 7a66 	vsub.f32	s15, s0, s13
 8002fc2:	2e00      	cmp	r6, #0
 8002fc4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8002fc8:	ed85 0a01 	vstr	s0, [r5, #4]
 8002fcc:	da56      	bge.n	800307c <__ieee754_rem_pio2f+0x218>
 8002fce:	eef1 6a66 	vneg.f32	s13, s13
 8002fd2:	eeb1 0a40 	vneg.f32	s0, s0
 8002fd6:	edc5 6a00 	vstr	s13, [r5]
 8002fda:	ed85 0a01 	vstr	s0, [r5, #4]
 8002fde:	e04c      	b.n	800307a <__ieee754_rem_pio2f+0x216>
 8002fe0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8002fe4:	db07      	blt.n	8002ff6 <__ieee754_rem_pio2f+0x192>
 8002fe6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002fea:	edc0 7a01 	vstr	s15, [r0, #4]
 8002fee:	edc0 7a00 	vstr	s15, [r0]
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	e042      	b.n	800307c <__ieee754_rem_pio2f+0x218>
 8002ff6:	15e2      	asrs	r2, r4, #23
 8002ff8:	3a86      	subs	r2, #134	; 0x86
 8002ffa:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8002ffe:	ee06 3a90 	vmov	s13, r3
 8003002:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 8003006:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80030b0 <__ieee754_rem_pio2f+0x24c>
 800300a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800300e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8003012:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800301a:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 800301e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003022:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003026:	edcd 6a04 	vstr	s13, [sp, #16]
 800302a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003036:	edcd 7a05 	vstr	s15, [sp, #20]
 800303a:	d107      	bne.n	800304c <__ieee754_rem_pio2f+0x1e8>
 800303c:	eef5 6a40 	vcmp.f32	s13, #0.0
 8003040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003044:	bf14      	ite	ne
 8003046:	2302      	movne	r3, #2
 8003048:	2301      	moveq	r3, #1
 800304a:	e000      	b.n	800304e <__ieee754_rem_pio2f+0x1ea>
 800304c:	2303      	movs	r3, #3
 800304e:	4919      	ldr	r1, [pc, #100]	; (80030b4 <__ieee754_rem_pio2f+0x250>)
 8003050:	9101      	str	r1, [sp, #4]
 8003052:	2102      	movs	r1, #2
 8003054:	9100      	str	r1, [sp, #0]
 8003056:	a803      	add	r0, sp, #12
 8003058:	4629      	mov	r1, r5
 800305a:	f000 f88b 	bl	8003174 <__kernel_rem_pio2f>
 800305e:	2e00      	cmp	r6, #0
 8003060:	da0c      	bge.n	800307c <__ieee754_rem_pio2f+0x218>
 8003062:	edd5 7a00 	vldr	s15, [r5]
 8003066:	eef1 7a67 	vneg.f32	s15, s15
 800306a:	edc5 7a00 	vstr	s15, [r5]
 800306e:	edd5 7a01 	vldr	s15, [r5, #4]
 8003072:	eef1 7a67 	vneg.f32	s15, s15
 8003076:	edc5 7a01 	vstr	s15, [r5, #4]
 800307a:	4240      	negs	r0, r0
 800307c:	b007      	add	sp, #28
 800307e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003080:	3f490fd8 	.word	0x3f490fd8
 8003084:	4016cbe3 	.word	0x4016cbe3
 8003088:	3fc90f80 	.word	0x3fc90f80
 800308c:	3fc90fd0 	.word	0x3fc90fd0
 8003090:	37354400 	.word	0x37354400
 8003094:	37354443 	.word	0x37354443
 8003098:	2e85a308 	.word	0x2e85a308
 800309c:	43490f80 	.word	0x43490f80
 80030a0:	3f22f984 	.word	0x3f22f984
 80030a4:	080038d8 	.word	0x080038d8
 80030a8:	2e85a300 	.word	0x2e85a300
 80030ac:	248d3132 	.word	0x248d3132
 80030b0:	43800000 	.word	0x43800000
 80030b4:	08003958 	.word	0x08003958

080030b8 <__kernel_cosf>:
 80030b8:	ee10 3a10 	vmov	r3, s0
 80030bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030c0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80030c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030c8:	da05      	bge.n	80030d6 <__kernel_cosf+0x1e>
 80030ca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80030ce:	ee17 2a90 	vmov	r2, s15
 80030d2:	2a00      	cmp	r2, #0
 80030d4:	d03b      	beq.n	800314e <__kernel_cosf+0x96>
 80030d6:	ee20 7a00 	vmul.f32	s14, s0, s0
 80030da:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8003154 <__kernel_cosf+0x9c>
 80030de:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003158 <__kernel_cosf+0xa0>
 80030e2:	eddf 5a1e 	vldr	s11, [pc, #120]	; 800315c <__kernel_cosf+0xa4>
 80030e6:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <__kernel_cosf+0xa8>)
 80030e8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80030ec:	4293      	cmp	r3, r2
 80030ee:	ee60 0a20 	vmul.f32	s1, s0, s1
 80030f2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80030f6:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8003164 <__kernel_cosf+0xac>
 80030fa:	eea7 6a25 	vfma.f32	s12, s14, s11
 80030fe:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8003168 <__kernel_cosf+0xb0>
 8003102:	eee7 5a06 	vfma.f32	s11, s14, s12
 8003106:	ed9f 6a19 	vldr	s12, [pc, #100]	; 800316c <__kernel_cosf+0xb4>
 800310a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800310e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8003112:	ee26 6a07 	vmul.f32	s12, s12, s14
 8003116:	dc06      	bgt.n	8003126 <__kernel_cosf+0x6e>
 8003118:	eed7 0a06 	vfnms.f32	s1, s14, s12
 800311c:	eed7 0a25 	vfnms.f32	s1, s14, s11
 8003120:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8003124:	4770      	bx	lr
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <__kernel_cosf+0xb8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	bfda      	itte	le
 800312c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8003130:	ee07 3a90 	vmovle	s15, r3
 8003134:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 8003138:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800313c:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8003140:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8003144:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003148:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800314c:	4770      	bx	lr
 800314e:	eeb0 0a66 	vmov.f32	s0, s13
 8003152:	4770      	bx	lr
 8003154:	310f74f6 	.word	0x310f74f6
 8003158:	ad47d74e 	.word	0xad47d74e
 800315c:	b493f27c 	.word	0xb493f27c
 8003160:	3e999999 	.word	0x3e999999
 8003164:	37d00d01 	.word	0x37d00d01
 8003168:	bab60b61 	.word	0xbab60b61
 800316c:	3d2aaaab 	.word	0x3d2aaaab
 8003170:	3f480000 	.word	0x3f480000

08003174 <__kernel_rem_pio2f>:
 8003174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003178:	ed2d 8b04 	vpush	{d8-d9}
 800317c:	b0d5      	sub	sp, #340	; 0x154
 800317e:	460f      	mov	r7, r1
 8003180:	9000      	str	r0, [sp, #0]
 8003182:	49cf      	ldr	r1, [pc, #828]	; (80034c0 <__kernel_rem_pio2f+0x34c>)
 8003184:	9862      	ldr	r0, [sp, #392]	; 0x188
 8003186:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 8003188:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800318c:	f103 3aff 	add.w	sl, r3, #4294967295
 8003190:	1ed0      	subs	r0, r2, #3
 8003192:	2408      	movs	r4, #8
 8003194:	fb90 f0f4 	sdiv	r0, r0, r4
 8003198:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800319c:	1c45      	adds	r5, r0, #1
 800319e:	ebca 0e00 	rsb	lr, sl, r0
 80031a2:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80031a6:	eb09 0c0a 	add.w	ip, r9, sl
 80031aa:	ac18      	add	r4, sp, #96	; 0x60
 80031ac:	eb06 088e 	add.w	r8, r6, lr, lsl #2
 80031b0:	2200      	movs	r2, #0
 80031b2:	4562      	cmp	r2, ip
 80031b4:	dc0e      	bgt.n	80031d4 <__kernel_rem_pio2f+0x60>
 80031b6:	eb1e 0f02 	cmn.w	lr, r2
 80031ba:	bf57      	itett	pl
 80031bc:	f858 1022 	ldrpl.w	r1, [r8, r2, lsl #2]
 80031c0:	eddf 7ac0 	vldrmi	s15, [pc, #768]	; 80034c4 <__kernel_rem_pio2f+0x350>
 80031c4:	ee07 1a90 	vmovpl	s15, r1
 80031c8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80031cc:	3201      	adds	r2, #1
 80031ce:	ece4 7a01 	vstmia	r4!, {s15}
 80031d2:	e7ee      	b.n	80031b2 <__kernel_rem_pio2f+0x3e>
 80031d4:	f50d 7c80 	add.w	ip, sp, #256	; 0x100
 80031d8:	2400      	movs	r4, #0
 80031da:	454c      	cmp	r4, r9
 80031dc:	dc18      	bgt.n	8003210 <__kernel_rem_pio2f+0x9c>
 80031de:	191a      	adds	r2, r3, r4
 80031e0:	a918      	add	r1, sp, #96	; 0x60
 80031e2:	f8dd e000 	ldr.w	lr, [sp]
 80031e6:	eddf 7ab7 	vldr	s15, [pc, #732]	; 80034c4 <__kernel_rem_pio2f+0x350>
 80031ea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80031ee:	f04f 0800 	mov.w	r8, #0
 80031f2:	45d0      	cmp	r8, sl
 80031f4:	dc08      	bgt.n	8003208 <__kernel_rem_pio2f+0x94>
 80031f6:	ecfe 6a01 	vldmia	lr!, {s13}
 80031fa:	ed32 7a01 	vldmdb	r2!, {s14}
 80031fe:	f108 0801 	add.w	r8, r8, #1
 8003202:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003206:	e7f4      	b.n	80031f2 <__kernel_rem_pio2f+0x7e>
 8003208:	ecec 7a01 	vstmia	ip!, {s15}
 800320c:	3401      	adds	r4, #1
 800320e:	e7e4      	b.n	80031da <__kernel_rem_pio2f+0x66>
 8003210:	aa04      	add	r2, sp, #16
 8003212:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8003216:	9201      	str	r2, [sp, #4]
 8003218:	eddf 8aab 	vldr	s17, [pc, #684]	; 80034c8 <__kernel_rem_pio2f+0x354>
 800321c:	ed9f 9aab 	vldr	s18, [pc, #684]	; 80034cc <__kernel_rem_pio2f+0x358>
 8003220:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 8003224:	9202      	str	r2, [sp, #8]
 8003226:	464c      	mov	r4, r9
 8003228:	aa54      	add	r2, sp, #336	; 0x150
 800322a:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 800322e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8003232:	f108 38ff 	add.w	r8, r8, #4294967295
 8003236:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 800323a:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800323e:	aa54      	add	r2, sp, #336	; 0x150
 8003240:	eb02 0008 	add.w	r0, r2, r8
 8003244:	384c      	subs	r0, #76	; 0x4c
 8003246:	2200      	movs	r2, #0
 8003248:	1aa6      	subs	r6, r4, r2
 800324a:	2e00      	cmp	r6, #0
 800324c:	dd14      	ble.n	8003278 <__kernel_rem_pio2f+0x104>
 800324e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8003252:	ae04      	add	r6, sp, #16
 8003254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800325c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8003260:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003264:	ee10 1a10 	vmov	r1, s0
 8003268:	ed30 0a01 	vldmdb	r0!, {s0}
 800326c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8003270:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003274:	3201      	adds	r2, #1
 8003276:	e7e7      	b.n	8003248 <__kernel_rem_pio2f+0xd4>
 8003278:	4628      	mov	r0, r5
 800327a:	9303      	str	r3, [sp, #12]
 800327c:	f000 fa72 	bl	8003764 <scalbnf>
 8003280:	eeb0 8a40 	vmov.f32	s16, s0
 8003284:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8003288:	ee28 0a00 	vmul.f32	s0, s16, s0
 800328c:	f000 fa28 	bl	80036e0 <floorf>
 8003290:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8003294:	eea0 8a67 	vfms.f32	s16, s0, s15
 8003298:	2d00      	cmp	r5, #0
 800329a:	9b03      	ldr	r3, [sp, #12]
 800329c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80032a0:	ee17 ba90 	vmov	fp, s15
 80032a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032a8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80032ac:	dd14      	ble.n	80032d8 <__kernel_rem_pio2f+0x164>
 80032ae:	f104 3eff 	add.w	lr, r4, #4294967295
 80032b2:	aa04      	add	r2, sp, #16
 80032b4:	f1c5 0608 	rsb	r6, r5, #8
 80032b8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80032bc:	fa42 f006 	asr.w	r0, r2, r6
 80032c0:	fa00 f606 	lsl.w	r6, r0, r6
 80032c4:	a904      	add	r1, sp, #16
 80032c6:	1b92      	subs	r2, r2, r6
 80032c8:	f1c5 0607 	rsb	r6, r5, #7
 80032cc:	4483      	add	fp, r0
 80032ce:	f841 202e 	str.w	r2, [r1, lr, lsl #2]
 80032d2:	fa42 f606 	asr.w	r6, r2, r6
 80032d6:	e00f      	b.n	80032f8 <__kernel_rem_pio2f+0x184>
 80032d8:	d105      	bne.n	80032e6 <__kernel_rem_pio2f+0x172>
 80032da:	1e62      	subs	r2, r4, #1
 80032dc:	a904      	add	r1, sp, #16
 80032de:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80032e2:	1236      	asrs	r6, r6, #8
 80032e4:	e008      	b.n	80032f8 <__kernel_rem_pio2f+0x184>
 80032e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80032ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80032ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f2:	da04      	bge.n	80032fe <__kernel_rem_pio2f+0x18a>
 80032f4:	2600      	movs	r6, #0
 80032f6:	e03f      	b.n	8003378 <__kernel_rem_pio2f+0x204>
 80032f8:	2e00      	cmp	r6, #0
 80032fa:	dc01      	bgt.n	8003300 <__kernel_rem_pio2f+0x18c>
 80032fc:	e03c      	b.n	8003378 <__kernel_rem_pio2f+0x204>
 80032fe:	2602      	movs	r6, #2
 8003300:	2200      	movs	r2, #0
 8003302:	f10b 0b01 	add.w	fp, fp, #1
 8003306:	4610      	mov	r0, r2
 8003308:	4294      	cmp	r4, r2
 800330a:	dd0f      	ble.n	800332c <__kernel_rem_pio2f+0x1b8>
 800330c:	a904      	add	r1, sp, #16
 800330e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8003312:	b918      	cbnz	r0, 800331c <__kernel_rem_pio2f+0x1a8>
 8003314:	b141      	cbz	r1, 8003328 <__kernel_rem_pio2f+0x1b4>
 8003316:	f5c1 7080 	rsb	r0, r1, #256	; 0x100
 800331a:	e001      	b.n	8003320 <__kernel_rem_pio2f+0x1ac>
 800331c:	f1c1 00ff 	rsb	r0, r1, #255	; 0xff
 8003320:	a904      	add	r1, sp, #16
 8003322:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8003326:	2001      	movs	r0, #1
 8003328:	3201      	adds	r2, #1
 800332a:	e7ed      	b.n	8003308 <__kernel_rem_pio2f+0x194>
 800332c:	2d00      	cmp	r5, #0
 800332e:	dd15      	ble.n	800335c <__kernel_rem_pio2f+0x1e8>
 8003330:	2d01      	cmp	r5, #1
 8003332:	d009      	beq.n	8003348 <__kernel_rem_pio2f+0x1d4>
 8003334:	2d02      	cmp	r5, #2
 8003336:	d111      	bne.n	800335c <__kernel_rem_pio2f+0x1e8>
 8003338:	f104 3eff 	add.w	lr, r4, #4294967295
 800333c:	aa04      	add	r2, sp, #16
 800333e:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8003342:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003346:	e006      	b.n	8003356 <__kernel_rem_pio2f+0x1e2>
 8003348:	f104 3eff 	add.w	lr, r4, #4294967295
 800334c:	aa04      	add	r2, sp, #16
 800334e:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8003352:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003356:	a904      	add	r1, sp, #16
 8003358:	f841 202e 	str.w	r2, [r1, lr, lsl #2]
 800335c:	2e02      	cmp	r6, #2
 800335e:	d10b      	bne.n	8003378 <__kernel_rem_pio2f+0x204>
 8003360:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003364:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003368:	b130      	cbz	r0, 8003378 <__kernel_rem_pio2f+0x204>
 800336a:	4628      	mov	r0, r5
 800336c:	9303      	str	r3, [sp, #12]
 800336e:	f000 f9f9 	bl	8003764 <scalbnf>
 8003372:	9b03      	ldr	r3, [sp, #12]
 8003374:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003378:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800337c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003380:	d154      	bne.n	800342c <__kernel_rem_pio2f+0x2b8>
 8003382:	f104 3cff 	add.w	ip, r4, #4294967295
 8003386:	4660      	mov	r0, ip
 8003388:	2200      	movs	r2, #0
 800338a:	4548      	cmp	r0, r9
 800338c:	db05      	blt.n	800339a <__kernel_rem_pio2f+0x226>
 800338e:	a904      	add	r1, sp, #16
 8003390:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003394:	3801      	subs	r0, #1
 8003396:	430a      	orrs	r2, r1
 8003398:	e7f7      	b.n	800338a <__kernel_rem_pio2f+0x216>
 800339a:	2a00      	cmp	r2, #0
 800339c:	d13d      	bne.n	800341a <__kernel_rem_pio2f+0x2a6>
 800339e:	2201      	movs	r2, #1
 80033a0:	f06f 0603 	mvn.w	r6, #3
 80033a4:	fb06 f002 	mul.w	r0, r6, r2
 80033a8:	9901      	ldr	r1, [sp, #4]
 80033aa:	5808      	ldr	r0, [r1, r0]
 80033ac:	b908      	cbnz	r0, 80033b2 <__kernel_rem_pio2f+0x23e>
 80033ae:	3201      	adds	r2, #1
 80033b0:	e7f8      	b.n	80033a4 <__kernel_rem_pio2f+0x230>
 80033b2:	eb03 0e04 	add.w	lr, r3, r4
 80033b6:	1c60      	adds	r0, r4, #1
 80033b8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80033bc:	f108 0804 	add.w	r8, r8, #4
 80033c0:	2600      	movs	r6, #0
 80033c2:	4414      	add	r4, r2
 80033c4:	42a0      	cmp	r0, r4
 80033c6:	f73f af2f 	bgt.w	8003228 <__kernel_rem_pio2f+0xb4>
 80033ca:	3604      	adds	r6, #4
 80033cc:	a918      	add	r1, sp, #96	; 0x60
 80033ce:	eb06 020e 	add.w	r2, r6, lr
 80033d2:	440a      	add	r2, r1
 80033d4:	9902      	ldr	r1, [sp, #8]
 80033d6:	f8dd b000 	ldr.w	fp, [sp]
 80033da:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80033de:	9103      	str	r1, [sp, #12]
 80033e0:	ee07 1a90 	vmov	s15, r1
 80033e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033e8:	f04f 0c00 	mov.w	ip, #0
 80033ec:	ed42 7a01 	vstr	s15, [r2, #-4]
 80033f0:	eddf 7a34 	vldr	s15, [pc, #208]	; 80034c4 <__kernel_rem_pio2f+0x350>
 80033f4:	45d4      	cmp	ip, sl
 80033f6:	dc08      	bgt.n	800340a <__kernel_rem_pio2f+0x296>
 80033f8:	ecfb 6a01 	vldmia	fp!, {s13}
 80033fc:	ed32 7a01 	vldmdb	r2!, {s14}
 8003400:	f10c 0c01 	add.w	ip, ip, #1
 8003404:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003408:	e7f4      	b.n	80033f4 <__kernel_rem_pio2f+0x280>
 800340a:	eb06 0208 	add.w	r2, r6, r8
 800340e:	a940      	add	r1, sp, #256	; 0x100
 8003410:	440a      	add	r2, r1
 8003412:	edc2 7a00 	vstr	s15, [r2]
 8003416:	3001      	adds	r0, #1
 8003418:	e7d4      	b.n	80033c4 <__kernel_rem_pio2f+0x250>
 800341a:	3d08      	subs	r5, #8
 800341c:	4664      	mov	r4, ip
 800341e:	ab04      	add	r3, sp, #16
 8003420:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003424:	bb6b      	cbnz	r3, 8003482 <__kernel_rem_pio2f+0x30e>
 8003426:	3c01      	subs	r4, #1
 8003428:	3d08      	subs	r5, #8
 800342a:	e7f8      	b.n	800341e <__kernel_rem_pio2f+0x2aa>
 800342c:	4268      	negs	r0, r5
 800342e:	eeb0 0a48 	vmov.f32	s0, s16
 8003432:	f000 f997 	bl	8003764 <scalbnf>
 8003436:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80034cc <__kernel_rem_pio2f+0x358>
 800343a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800343e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003442:	db17      	blt.n	8003474 <__kernel_rem_pio2f+0x300>
 8003444:	eddf 7a20 	vldr	s15, [pc, #128]	; 80034c8 <__kernel_rem_pio2f+0x354>
 8003448:	ee60 7a27 	vmul.f32	s15, s0, s15
 800344c:	aa04      	add	r2, sp, #16
 800344e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003452:	3508      	adds	r5, #8
 8003454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003458:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800345c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003460:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003464:	ee10 3a10 	vmov	r3, s0
 8003468:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800346c:	3401      	adds	r4, #1
 800346e:	ee17 3a90 	vmov	r3, s15
 8003472:	e004      	b.n	800347e <__kernel_rem_pio2f+0x30a>
 8003474:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003478:	aa04      	add	r2, sp, #16
 800347a:	ee10 3a10 	vmov	r3, s0
 800347e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8003482:	4628      	mov	r0, r5
 8003484:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003488:	f000 f96c 	bl	8003764 <scalbnf>
 800348c:	00a3      	lsls	r3, r4, #2
 800348e:	a940      	add	r1, sp, #256	; 0x100
 8003490:	1d1a      	adds	r2, r3, #4
 8003492:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80034c8 <__kernel_rem_pio2f+0x354>
 8003496:	1888      	adds	r0, r1, r2
 8003498:	4621      	mov	r1, r4
 800349a:	2900      	cmp	r1, #0
 800349c:	db18      	blt.n	80034d0 <__kernel_rem_pio2f+0x35c>
 800349e:	ad04      	add	r5, sp, #16
 80034a0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80034a4:	9500      	str	r5, [sp, #0]
 80034a6:	ee07 5a90 	vmov	s15, r5
 80034aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ae:	3901      	subs	r1, #1
 80034b0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80034b4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80034b8:	ed60 7a01 	vstmdb	r0!, {s15}
 80034bc:	e7ed      	b.n	800349a <__kernel_rem_pio2f+0x326>
 80034be:	bf00      	nop
 80034c0:	08003c70 	.word	0x08003c70
 80034c4:	00000000 	.word	0x00000000
 80034c8:	3b800000 	.word	0x3b800000
 80034cc:	43800000 	.word	0x43800000
 80034d0:	f10d 0cb0 	add.w	ip, sp, #176	; 0xb0
 80034d4:	2100      	movs	r1, #0
 80034d6:	1a65      	subs	r5, r4, r1
 80034d8:	d417      	bmi.n	800350a <__kernel_rem_pio2f+0x396>
 80034da:	a840      	add	r0, sp, #256	; 0x100
 80034dc:	f8df e15c 	ldr.w	lr, [pc, #348]	; 800363c <__kernel_rem_pio2f+0x4c8>
 80034e0:	eddf 7a55 	vldr	s15, [pc, #340]	; 8003638 <__kernel_rem_pio2f+0x4c4>
 80034e4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80034e8:	2000      	movs	r0, #0
 80034ea:	4548      	cmp	r0, r9
 80034ec:	dc09      	bgt.n	8003502 <__kernel_rem_pio2f+0x38e>
 80034ee:	4288      	cmp	r0, r1
 80034f0:	dc07      	bgt.n	8003502 <__kernel_rem_pio2f+0x38e>
 80034f2:	ecfe 6a01 	vldmia	lr!, {s13}
 80034f6:	ecb5 7a01 	vldmia	r5!, {s14}
 80034fa:	3001      	adds	r0, #1
 80034fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003500:	e7f3      	b.n	80034ea <__kernel_rem_pio2f+0x376>
 8003502:	ecec 7a01 	vstmia	ip!, {s15}
 8003506:	3101      	adds	r1, #1
 8003508:	e7e5      	b.n	80034d6 <__kernel_rem_pio2f+0x362>
 800350a:	9962      	ldr	r1, [sp, #392]	; 0x188
 800350c:	2903      	cmp	r1, #3
 800350e:	f200 808c 	bhi.w	800362a <__kernel_rem_pio2f+0x4b6>
 8003512:	e8df f001 	tbb	[pc, r1]
 8003516:	070d      	.short	0x070d
 8003518:	0207      	.short	0x0207
 800351a:	a92c      	add	r1, sp, #176	; 0xb0
 800351c:	440b      	add	r3, r1
 800351e:	4619      	mov	r1, r3
 8003520:	4620      	mov	r0, r4
 8003522:	e03b      	b.n	800359c <__kernel_rem_pio2f+0x428>
 8003524:	ab2c      	add	r3, sp, #176	; 0xb0
 8003526:	441a      	add	r2, r3
 8003528:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003638 <__kernel_rem_pio2f+0x4c4>
 800352c:	4623      	mov	r3, r4
 800352e:	e011      	b.n	8003554 <__kernel_rem_pio2f+0x3e0>
 8003530:	ab2c      	add	r3, sp, #176	; 0xb0
 8003532:	eddf 7a41 	vldr	s15, [pc, #260]	; 8003638 <__kernel_rem_pio2f+0x4c4>
 8003536:	441a      	add	r2, r3
 8003538:	2c00      	cmp	r4, #0
 800353a:	db05      	blt.n	8003548 <__kernel_rem_pio2f+0x3d4>
 800353c:	ed32 7a01 	vldmdb	r2!, {s14}
 8003540:	3c01      	subs	r4, #1
 8003542:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003546:	e7f7      	b.n	8003538 <__kernel_rem_pio2f+0x3c4>
 8003548:	b10e      	cbz	r6, 800354e <__kernel_rem_pio2f+0x3da>
 800354a:	eef1 7a67 	vneg.f32	s15, s15
 800354e:	edc7 7a00 	vstr	s15, [r7]
 8003552:	e06a      	b.n	800362a <__kernel_rem_pio2f+0x4b6>
 8003554:	2b00      	cmp	r3, #0
 8003556:	db05      	blt.n	8003564 <__kernel_rem_pio2f+0x3f0>
 8003558:	ed72 7a01 	vldmdb	r2!, {s15}
 800355c:	3b01      	subs	r3, #1
 800355e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003562:	e7f7      	b.n	8003554 <__kernel_rem_pio2f+0x3e0>
 8003564:	b116      	cbz	r6, 800356c <__kernel_rem_pio2f+0x3f8>
 8003566:	eef1 7a47 	vneg.f32	s15, s14
 800356a:	e001      	b.n	8003570 <__kernel_rem_pio2f+0x3fc>
 800356c:	eef0 7a47 	vmov.f32	s15, s14
 8003570:	edc7 7a00 	vstr	s15, [r7]
 8003574:	eddd 7a2c 	vldr	s15, [sp, #176]	; 0xb0
 8003578:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800357c:	aa2d      	add	r2, sp, #180	; 0xb4
 800357e:	2301      	movs	r3, #1
 8003580:	429c      	cmp	r4, r3
 8003582:	db05      	blt.n	8003590 <__kernel_rem_pio2f+0x41c>
 8003584:	ecb2 7a01 	vldmia	r2!, {s14}
 8003588:	3301      	adds	r3, #1
 800358a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800358e:	e7f7      	b.n	8003580 <__kernel_rem_pio2f+0x40c>
 8003590:	b10e      	cbz	r6, 8003596 <__kernel_rem_pio2f+0x422>
 8003592:	eef1 7a67 	vneg.f32	s15, s15
 8003596:	edc7 7a01 	vstr	s15, [r7, #4]
 800359a:	e046      	b.n	800362a <__kernel_rem_pio2f+0x4b6>
 800359c:	2800      	cmp	r0, #0
 800359e:	dd0f      	ble.n	80035c0 <__kernel_rem_pio2f+0x44c>
 80035a0:	ed71 7a01 	vldmdb	r1!, {s15}
 80035a4:	edd1 6a01 	vldr	s13, [r1, #4]
 80035a8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80035ac:	3801      	subs	r0, #1
 80035ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035b2:	ed81 7a00 	vstr	s14, [r1]
 80035b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ba:	edc1 7a01 	vstr	s15, [r1, #4]
 80035be:	e7ed      	b.n	800359c <__kernel_rem_pio2f+0x428>
 80035c0:	4621      	mov	r1, r4
 80035c2:	2901      	cmp	r1, #1
 80035c4:	dd0f      	ble.n	80035e6 <__kernel_rem_pio2f+0x472>
 80035c6:	ed73 7a01 	vldmdb	r3!, {s15}
 80035ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80035ce:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80035d2:	3901      	subs	r1, #1
 80035d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035d8:	ed83 7a00 	vstr	s14, [r3]
 80035dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035e0:	edc3 7a01 	vstr	s15, [r3, #4]
 80035e4:	e7ed      	b.n	80035c2 <__kernel_rem_pio2f+0x44e>
 80035e6:	ab2c      	add	r3, sp, #176	; 0xb0
 80035e8:	eddf 7a13 	vldr	s15, [pc, #76]	; 8003638 <__kernel_rem_pio2f+0x4c4>
 80035ec:	441a      	add	r2, r3
 80035ee:	2c01      	cmp	r4, #1
 80035f0:	dd05      	ble.n	80035fe <__kernel_rem_pio2f+0x48a>
 80035f2:	ed32 7a01 	vldmdb	r2!, {s14}
 80035f6:	3c01      	subs	r4, #1
 80035f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035fc:	e7f7      	b.n	80035ee <__kernel_rem_pio2f+0x47a>
 80035fe:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 8003602:	ed9d 7a2d 	vldr	s14, [sp, #180]	; 0xb4
 8003606:	b926      	cbnz	r6, 8003612 <__kernel_rem_pio2f+0x49e>
 8003608:	edc7 6a00 	vstr	s13, [r7]
 800360c:	ed87 7a01 	vstr	s14, [r7, #4]
 8003610:	e009      	b.n	8003626 <__kernel_rem_pio2f+0x4b2>
 8003612:	eef1 6a66 	vneg.f32	s13, s13
 8003616:	eeb1 7a47 	vneg.f32	s14, s14
 800361a:	edc7 6a00 	vstr	s13, [r7]
 800361e:	ed87 7a01 	vstr	s14, [r7, #4]
 8003622:	eef1 7a67 	vneg.f32	s15, s15
 8003626:	edc7 7a02 	vstr	s15, [r7, #8]
 800362a:	f00b 0007 	and.w	r0, fp, #7
 800362e:	b055      	add	sp, #340	; 0x154
 8003630:	ecbd 8b04 	vpop	{d8-d9}
 8003634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003638:	00000000 	.word	0x00000000
 800363c:	08003c7c 	.word	0x08003c7c

08003640 <__kernel_sinf>:
 8003640:	ee10 3a10 	vmov	r3, s0
 8003644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003648:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800364c:	da04      	bge.n	8003658 <__kernel_sinf+0x18>
 800364e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003652:	ee17 3a90 	vmov	r3, s15
 8003656:	b35b      	cbz	r3, 80036b0 <__kernel_sinf+0x70>
 8003658:	ee20 7a00 	vmul.f32	s14, s0, s0
 800365c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80036b4 <__kernel_sinf+0x74>
 8003660:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80036b8 <__kernel_sinf+0x78>
 8003664:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003668:	eddf 7a14 	vldr	s15, [pc, #80]	; 80036bc <__kernel_sinf+0x7c>
 800366c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8003670:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80036c0 <__kernel_sinf+0x80>
 8003674:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003678:	eddf 7a12 	vldr	s15, [pc, #72]	; 80036c4 <__kernel_sinf+0x84>
 800367c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003680:	eee7 7a06 	vfma.f32	s15, s14, s12
 8003684:	b930      	cbnz	r0, 8003694 <__kernel_sinf+0x54>
 8003686:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80036c8 <__kernel_sinf+0x88>
 800368a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800368e:	eea6 0a86 	vfma.f32	s0, s13, s12
 8003692:	4770      	bx	lr
 8003694:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003698:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800369c:	eee0 7a86 	vfma.f32	s15, s1, s12
 80036a0:	eed7 0a27 	vfnms.f32	s1, s14, s15
 80036a4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80036cc <__kernel_sinf+0x8c>
 80036a8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80036ac:	ee30 0a60 	vsub.f32	s0, s0, s1
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	2f2ec9d3 	.word	0x2f2ec9d3
 80036b8:	b2d72f34 	.word	0xb2d72f34
 80036bc:	3638ef1b 	.word	0x3638ef1b
 80036c0:	b9500d01 	.word	0xb9500d01
 80036c4:	3c088889 	.word	0x3c088889
 80036c8:	be2aaaab 	.word	0xbe2aaaab
 80036cc:	3e2aaaab 	.word	0x3e2aaaab

080036d0 <fabsf>:
 80036d0:	ee10 3a10 	vmov	r3, s0
 80036d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036d8:	ee00 3a10 	vmov	s0, r3
 80036dc:	4770      	bx	lr
	...

080036e0 <floorf>:
 80036e0:	ee10 3a10 	vmov	r3, s0
 80036e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80036e8:	0dca      	lsrs	r2, r1, #23
 80036ea:	3a7f      	subs	r2, #127	; 0x7f
 80036ec:	2a16      	cmp	r2, #22
 80036ee:	dc28      	bgt.n	8003742 <floorf+0x62>
 80036f0:	2a00      	cmp	r2, #0
 80036f2:	da0f      	bge.n	8003714 <floorf+0x34>
 80036f4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003758 <floorf+0x78>
 80036f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80036fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003704:	dd24      	ble.n	8003750 <floorf+0x70>
 8003706:	2b00      	cmp	r3, #0
 8003708:	da21      	bge.n	800374e <floorf+0x6e>
 800370a:	4a14      	ldr	r2, [pc, #80]	; (800375c <floorf+0x7c>)
 800370c:	2900      	cmp	r1, #0
 800370e:	bf18      	it	ne
 8003710:	4613      	movne	r3, r2
 8003712:	e01d      	b.n	8003750 <floorf+0x70>
 8003714:	4912      	ldr	r1, [pc, #72]	; (8003760 <floorf+0x80>)
 8003716:	4111      	asrs	r1, r2
 8003718:	420b      	tst	r3, r1
 800371a:	d01b      	beq.n	8003754 <floorf+0x74>
 800371c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8003758 <floorf+0x78>
 8003720:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003724:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372c:	dd10      	ble.n	8003750 <floorf+0x70>
 800372e:	2b00      	cmp	r3, #0
 8003730:	bfbe      	ittt	lt
 8003732:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8003736:	fa40 f202 	asrlt.w	r2, r0, r2
 800373a:	189b      	addlt	r3, r3, r2
 800373c:	ea23 0301 	bic.w	r3, r3, r1
 8003740:	e006      	b.n	8003750 <floorf+0x70>
 8003742:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003746:	d305      	bcc.n	8003754 <floorf+0x74>
 8003748:	ee30 0a00 	vadd.f32	s0, s0, s0
 800374c:	4770      	bx	lr
 800374e:	2300      	movs	r3, #0
 8003750:	ee00 3a10 	vmov	s0, r3
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	7149f2ca 	.word	0x7149f2ca
 800375c:	bf800000 	.word	0xbf800000
 8003760:	007fffff 	.word	0x007fffff

08003764 <scalbnf>:
 8003764:	b508      	push	{r3, lr}
 8003766:	ee10 2a10 	vmov	r2, s0
 800376a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800376e:	ed2d 8b02 	vpush	{d8}
 8003772:	eef0 0a40 	vmov.f32	s1, s0
 8003776:	d045      	beq.n	8003804 <scalbnf+0xa0>
 8003778:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800377c:	d302      	bcc.n	8003784 <scalbnf+0x20>
 800377e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003782:	e03f      	b.n	8003804 <scalbnf+0xa0>
 8003784:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003788:	d211      	bcs.n	80037ae <scalbnf+0x4a>
 800378a:	4b20      	ldr	r3, [pc, #128]	; (800380c <scalbnf+0xa8>)
 800378c:	eddf 7a20 	vldr	s15, [pc, #128]	; 8003810 <scalbnf+0xac>
 8003790:	4298      	cmp	r0, r3
 8003792:	ee60 0a27 	vmul.f32	s1, s0, s15
 8003796:	db05      	blt.n	80037a4 <scalbnf+0x40>
 8003798:	ee10 2a90 	vmov	r2, s1
 800379c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80037a0:	3b19      	subs	r3, #25
 80037a2:	e005      	b.n	80037b0 <scalbnf+0x4c>
 80037a4:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8003814 <scalbnf+0xb0>
 80037a8:	ee20 0a80 	vmul.f32	s0, s1, s0
 80037ac:	e02a      	b.n	8003804 <scalbnf+0xa0>
 80037ae:	0ddb      	lsrs	r3, r3, #23
 80037b0:	4403      	add	r3, r0
 80037b2:	2bfe      	cmp	r3, #254	; 0xfe
 80037b4:	dc0f      	bgt.n	80037d6 <scalbnf+0x72>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	dd06      	ble.n	80037c8 <scalbnf+0x64>
 80037ba:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80037be:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80037c2:	ee00 3a10 	vmov	s0, r3
 80037c6:	e01d      	b.n	8003804 <scalbnf+0xa0>
 80037c8:	f113 0f16 	cmn.w	r3, #22
 80037cc:	da0f      	bge.n	80037ee <scalbnf+0x8a>
 80037ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 80037d2:	4298      	cmp	r0, r3
 80037d4:	dd02      	ble.n	80037dc <scalbnf+0x78>
 80037d6:	ed9f 8a10 	vldr	s16, [pc, #64]	; 8003818 <scalbnf+0xb4>
 80037da:	e001      	b.n	80037e0 <scalbnf+0x7c>
 80037dc:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8003814 <scalbnf+0xb0>
 80037e0:	eeb0 0a48 	vmov.f32	s0, s16
 80037e4:	f000 f81c 	bl	8003820 <copysignf>
 80037e8:	ee20 0a08 	vmul.f32	s0, s0, s16
 80037ec:	e00a      	b.n	8003804 <scalbnf+0xa0>
 80037ee:	3319      	adds	r3, #25
 80037f0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80037f4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80037f8:	ee00 3a90 	vmov	s1, r3
 80037fc:	eddf 7a07 	vldr	s15, [pc, #28]	; 800381c <scalbnf+0xb8>
 8003800:	ee20 0aa7 	vmul.f32	s0, s1, s15
 8003804:	ecbd 8b02 	vpop	{d8}
 8003808:	bd08      	pop	{r3, pc}
 800380a:	bf00      	nop
 800380c:	ffff3cb0 	.word	0xffff3cb0
 8003810:	4c000000 	.word	0x4c000000
 8003814:	0da24260 	.word	0x0da24260
 8003818:	7149f2ca 	.word	0x7149f2ca
 800381c:	33000000 	.word	0x33000000

08003820 <copysignf>:
 8003820:	ee10 3a10 	vmov	r3, s0
 8003824:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003828:	ee10 3a90 	vmov	r3, s1
 800382c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003830:	4313      	orrs	r3, r2
 8003832:	ee00 3a10 	vmov	s0, r3
 8003836:	4770      	bx	lr

08003838 <_sbrk>:
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <_sbrk+0x14>)
 800383a:	6819      	ldr	r1, [r3, #0]
 800383c:	4602      	mov	r2, r0
 800383e:	b909      	cbnz	r1, 8003844 <_sbrk+0xc>
 8003840:	4903      	ldr	r1, [pc, #12]	; (8003850 <_sbrk+0x18>)
 8003842:	6019      	str	r1, [r3, #0]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	4402      	add	r2, r0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	4770      	bx	lr
 800384c:	200000b4 	.word	0x200000b4
 8003850:	2000013c 	.word	0x2000013c

08003854 <_init>:
 8003854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003856:	bf00      	nop
 8003858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385a:	bc08      	pop	{r3}
 800385c:	469e      	mov	lr, r3
 800385e:	4770      	bx	lr

08003860 <_fini>:
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003862:	bf00      	nop
 8003864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003866:	bc08      	pop	{r3}
 8003868:	469e      	mov	lr, r3
 800386a:	4770      	bx	lr
