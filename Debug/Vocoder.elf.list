
Vocoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001bd0  08001bd0  00011bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001be8  08001be8  00011be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001bec  08001bec  00011bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08001bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  7 .bss          0001f49c  20000020  20000020  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2001f4bc  2001f4bc  00020020  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   000087f9  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000013b8  00000000  00000000  00028849  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b88  00000000  00000000  00029c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ab0  00000000  00000000  0002a790  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003857  00000000  00000000  0002b240  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003850  00000000  00000000  0002ea97  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000322e7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000031c0  00000000  00000000  00032368  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00035528  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001bb8 	.word	0x08001bb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08001bb8 	.word	0x08001bb8

080001c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001cc:	4a16      	ldr	r2, [pc, #88]	; (8000228 <SystemInit+0x60>)
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <SystemInit+0x60>)
 80001d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001dc:	4a13      	ldr	r2, [pc, #76]	; (800022c <SystemInit+0x64>)
 80001de:	4b13      	ldr	r3, [pc, #76]	; (800022c <SystemInit+0x64>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e8:	4b10      	ldr	r3, [pc, #64]	; (800022c <SystemInit+0x64>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ee:	4a0f      	ldr	r2, [pc, #60]	; (800022c <SystemInit+0x64>)
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <SystemInit+0x64>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <SystemInit+0x64>)
 8000200:	4a0b      	ldr	r2, [pc, #44]	; (8000230 <SystemInit+0x68>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	4a09      	ldr	r2, [pc, #36]	; (800022c <SystemInit+0x64>)
 8000206:	4b09      	ldr	r3, [pc, #36]	; (800022c <SystemInit+0x64>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <SystemInit+0x64>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000216:	f000 f80d 	bl	8000234 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <SystemInit+0x60>)
 800021c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000220:	609a      	str	r2, [r3, #8]
#endif
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	e000ed00 	.word	0xe000ed00
 800022c:	40023800 	.word	0x40023800
 8000230:	24003010 	.word	0x24003010

08000234 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	2300      	movs	r3, #0
 8000240:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000242:	4a36      	ldr	r2, [pc, #216]	; (800031c <SetSysClock+0xe8>)
 8000244:	4b35      	ldr	r3, [pc, #212]	; (800031c <SetSysClock+0xe8>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800024c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800024e:	4b33      	ldr	r3, [pc, #204]	; (800031c <SetSysClock+0xe8>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000256:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3301      	adds	r3, #1
 800025c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d103      	bne.n	800026c <SetSysClock+0x38>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800026a:	d1f0      	bne.n	800024e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800026c:	4b2b      	ldr	r3, [pc, #172]	; (800031c <SetSysClock+0xe8>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000274:	2b00      	cmp	r3, #0
 8000276:	d002      	beq.n	800027e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000278:	2301      	movs	r3, #1
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	e001      	b.n	8000282 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800027e:	2300      	movs	r3, #0
 8000280:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	2b01      	cmp	r3, #1
 8000286:	d142      	bne.n	800030e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000288:	4a24      	ldr	r2, [pc, #144]	; (800031c <SetSysClock+0xe8>)
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <SetSysClock+0xe8>)
 800028c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800028e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000292:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000294:	4a22      	ldr	r2, [pc, #136]	; (8000320 <SetSysClock+0xec>)
 8000296:	4b22      	ldr	r3, [pc, #136]	; (8000320 <SetSysClock+0xec>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800029e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80002a0:	4a1e      	ldr	r2, [pc, #120]	; (800031c <SetSysClock+0xe8>)
 80002a2:	4b1e      	ldr	r3, [pc, #120]	; (800031c <SetSysClock+0xe8>)
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80002a8:	4a1c      	ldr	r2, [pc, #112]	; (800031c <SetSysClock+0xe8>)
 80002aa:	4b1c      	ldr	r3, [pc, #112]	; (800031c <SetSysClock+0xe8>)
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002b2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002b4:	4a19      	ldr	r2, [pc, #100]	; (800031c <SetSysClock+0xe8>)
 80002b6:	4b19      	ldr	r3, [pc, #100]	; (800031c <SetSysClock+0xe8>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002be:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002c0:	4b16      	ldr	r3, [pc, #88]	; (800031c <SetSysClock+0xe8>)
 80002c2:	4a18      	ldr	r2, [pc, #96]	; (8000324 <SetSysClock+0xf0>)
 80002c4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002c6:	4a15      	ldr	r2, [pc, #84]	; (800031c <SetSysClock+0xe8>)
 80002c8:	4b14      	ldr	r3, [pc, #80]	; (800031c <SetSysClock+0xe8>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002d0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002d2:	bf00      	nop
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <SetSysClock+0xe8>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d0f9      	beq.n	80002d4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80002e0:	4b11      	ldr	r3, [pc, #68]	; (8000328 <SetSysClock+0xf4>)
 80002e2:	f240 6205 	movw	r2, #1541	; 0x605
 80002e6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002e8:	4a0c      	ldr	r2, [pc, #48]	; (800031c <SetSysClock+0xe8>)
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <SetSysClock+0xe8>)
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	f023 0303 	bic.w	r3, r3, #3
 80002f2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002f4:	4a09      	ldr	r2, [pc, #36]	; (800031c <SetSysClock+0xe8>)
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <SetSysClock+0xe8>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	f043 0302 	orr.w	r3, r3, #2
 80002fe:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000300:	bf00      	nop
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <SetSysClock+0xe8>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	f003 030c 	and.w	r3, r3, #12
 800030a:	2b08      	cmp	r3, #8
 800030c:	d1f9      	bne.n	8000302 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40023800 	.word	0x40023800
 8000320:	40007000 	.word	0x40007000
 8000324:	07405408 	.word	0x07405408
 8000328:	40023c00 	.word	0x40023c00

0800032c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop

0800033c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000340:	e7fe      	b.n	8000340 <HardFault_Handler+0x4>
 8000342:	bf00      	nop

08000344 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000348:	e7fe      	b.n	8000348 <MemManage_Handler+0x4>
 800034a:	bf00      	nop

0800034c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000350:	e7fe      	b.n	8000350 <BusFault_Handler+0x4>
 8000352:	bf00      	nop

08000354 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000358:	e7fe      	b.n	8000358 <UsageFault_Handler+0x4>
 800035a:	bf00      	nop

0800035c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop

0800036c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop

0800037c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop

0800038c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop

0800039c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800039c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003a2:	e003      	b.n	80003ac <LoopCopyDataInit>

080003a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003aa:	3104      	adds	r1, #4

080003ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003ac:	480b      	ldr	r0, [pc, #44]	; (80003dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003b4:	d3f6      	bcc.n	80003a4 <CopyDataInit>
  ldr  r2, =_sbss
 80003b6:	4a0b      	ldr	r2, [pc, #44]	; (80003e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003b8:	e002      	b.n	80003c0 <LoopFillZerobss>

080003ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003bc:	f842 3b04 	str.w	r3, [r2], #4

080003c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003c4:	d3f9      	bcc.n	80003ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003c6:	f7ff feff 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ca:	f001 fbcf 	bl	8001b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ce:	f000 fa23 	bl	8000818 <main>
  bx  lr    
 80003d2:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003d4:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80003d8:	08001bf0 	.word	0x08001bf0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003e0:	20000020 	.word	0x20000020
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80003e4:	20000020 	.word	0x20000020
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003e8:	2001f4bc 	.word	0x2001f4bc

080003ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003ec:	e7fe      	b.n	80003ec <ADC_IRQHandler>
	...

080003f0 <initAudioOutDAC>:
void initAudioOutTIM(void);
void initAudioOutNVIC(void);
void initAudioOutDMA(uint16_t* buffer, uint32_t size);

void initAudioOutDAC(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 80003f6:	2101      	movs	r1, #1
 80003f8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80003fc:	f000 fd2e 	bl	8000e5c <RCC_APB1PeriphClockCmd>
	DAC_InitTypeDef DACStruct;
	DACStruct.DAC_Trigger = DAC_Trigger_T6_TRGO;
 8000400:	2304      	movs	r3, #4
 8000402:	603b      	str	r3, [r7, #0]
	DACStruct.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8000404:	2300      	movs	r3, #0
 8000406:	607b      	str	r3, [r7, #4]
	DACStruct.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
	DAC_Init(DAC_Channel_1, &DACStruct);
 800040c:	463b      	mov	r3, r7
 800040e:	4619      	mov	r1, r3
 8000410:	2000      	movs	r0, #0
 8000412:	f001 f901 	bl	8001618 <DAC_Init>
	DAC_DMACmd(DAC_Channel_1, ENABLE);
 8000416:	2101      	movs	r1, #1
 8000418:	2000      	movs	r0, #0
 800041a:	f001 f973 	bl	8001704 <DAC_DMACmd>
	DAC_Cmd(DAC_Channel_1, ENABLE);
 800041e:	2101      	movs	r1, #1
 8000420:	2000      	movs	r0, #0
 8000422:	f001 f92d 	bl	8001680 <DAC_Cmd>
}
 8000426:	bf00      	nop
 8000428:	3710      	adds	r7, #16
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop

08000430 <initAudioOutGPIO>:

void initAudioOutGPIO(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000436:	2101      	movs	r1, #1
 8000438:	2001      	movs	r0, #1
 800043a:	f000 fcef 	bl	8000e1c <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef GPIOStruct;
	GPIOStruct.GPIO_Pin = GPIO_Pin_4;//channel 1
 800043e:	2310      	movs	r3, #16
 8000440:	603b      	str	r3, [r7, #0]
	GPIOStruct.GPIO_Speed = GPIO_Mode_AN;
 8000442:	2303      	movs	r3, #3
 8000444:	717b      	strb	r3, [r7, #5]
	GPIOStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8000446:	2300      	movs	r3, #0
 8000448:	717b      	strb	r3, [r7, #5]
	GPIOStruct.GPIO_OType = GPIO_OType_PP;
 800044a:	2300      	movs	r3, #0
 800044c:	71bb      	strb	r3, [r7, #6]
	GPIOStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIOStruct);
 8000452:	463b      	mov	r3, r7
 8000454:	4619      	mov	r1, r3
 8000456:	4803      	ldr	r0, [pc, #12]	; (8000464 <initAudioOutGPIO+0x34>)
 8000458:	f000 fd80 	bl	8000f5c <GPIO_Init>
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40020000 	.word	0x40020000

08000468 <initAudioOutTIM>:

//Timer 6 Runs at 84MHz
void initAudioOutTIM(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 800046e:	2101      	movs	r1, #1
 8000470:	2010      	movs	r0, #16
 8000472:	f000 fcf3 	bl	8000e5c <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseInitTypeDef TimerStruct;
	TimerStruct.TIM_Period = 2625*4-1;
 8000476:	f642 1303 	movw	r3, #10499	; 0x2903
 800047a:	60bb      	str	r3, [r7, #8]
	TimerStruct.TIM_Prescaler = 1-1;
 800047c:	2300      	movs	r3, #0
 800047e:	80bb      	strh	r3, [r7, #4]
	TimerStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	81bb      	strh	r3, [r7, #12]
	TimerStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000484:	2300      	movs	r3, #0
 8000486:	80fb      	strh	r3, [r7, #6]
	TimerStruct.TIM_RepetitionCounter = 0x0000;
 8000488:	2300      	movs	r3, #0
 800048a:	73bb      	strb	r3, [r7, #14]
	TIM_TimeBaseInit(TIM6, &TimerStruct);
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	4619      	mov	r1, r3
 8000490:	4807      	ldr	r0, [pc, #28]	; (80004b0 <initAudioOutTIM+0x48>)
 8000492:	f000 fbef 	bl	8000c74 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);
 8000496:	2120      	movs	r1, #32
 8000498:	4805      	ldr	r0, [pc, #20]	; (80004b0 <initAudioOutTIM+0x48>)
 800049a:	f000 fc77 	bl	8000d8c <TIM_SelectOutputTrigger>
	TIM_Cmd(TIM6, ENABLE);
 800049e:	2101      	movs	r1, #1
 80004a0:	4803      	ldr	r0, [pc, #12]	; (80004b0 <initAudioOutTIM+0x48>)
 80004a2:	f000 fc53 	bl	8000d4c <TIM_Cmd>
}
 80004a6:	bf00      	nop
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40001000 	.word	0x40001000

080004b4 <initAudioOutNVIC>:

void initAudioOutNVIC(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVICStruct;
	NVICStruct.NVIC_IRQChannel = DMA1_Stream5_IRQn;
 80004ba:	2310      	movs	r3, #16
 80004bc:	713b      	strb	r3, [r7, #4]
	NVICStruct.NVIC_IRQChannelCmd = ENABLE;
 80004be:	2301      	movs	r3, #1
 80004c0:	71fb      	strb	r3, [r7, #7]
	NVICStruct.NVIC_IRQChannelPreemptionPriority=0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	717b      	strb	r3, [r7, #5]
	NVICStruct.NVIC_IRQChannelSubPriority=0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVICStruct);
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	4618      	mov	r0, r3
 80004ce:	f001 faeb 	bl	8001aa8 <NVIC_Init>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop

080004dc <initAudioOutDMA>:

void initAudioOutDMA(uint16_t* buffer, uint32_t size)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b092      	sub	sp, #72	; 0x48
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 80004e6:	2101      	movs	r1, #1
 80004e8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80004ec:	f000 fc96 	bl	8000e1c <RCC_AHB1PeriphClockCmd>
	DMA_DeInit(DMA1_Stream5);
 80004f0:	481d      	ldr	r0, [pc, #116]	; (8000568 <initAudioOutDMA+0x8c>)
 80004f2:	f000 fdc1 	bl	8001078 <DMA_DeInit>
	DMA_InitTypeDef DMAStruct;
	DMA_StructInit(&DMAStruct);
 80004f6:	f107 030c 	add.w	r3, r7, #12
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fee8 	bl	80012d0 <DMA_StructInit>
	DMAStruct.DMA_Channel = DMA_Channel_7;
 8000500:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8000504:	60fb      	str	r3, [r7, #12]
	DMAStruct.DMA_PeripheralBaseAddr =(uint32_t)(DAC_BASE + 0x08);
 8000506:	4b19      	ldr	r3, [pc, #100]	; (800056c <initAudioOutDMA+0x90>)
 8000508:	613b      	str	r3, [r7, #16]
	DMAStruct.DMA_Memory0BaseAddr = (uint32_t)(buffer);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	617b      	str	r3, [r7, #20]
	DMAStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 800050e:	2340      	movs	r3, #64	; 0x40
 8000510:	61bb      	str	r3, [r7, #24]
	DMAStruct.DMA_BufferSize = size;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	61fb      	str	r3, [r7, #28]
	DMAStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8000516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051a:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMAStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800051c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000520:	627b      	str	r3, [r7, #36]	; 0x24
	DMAStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000522:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28
	DMAStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000528:	2300      	movs	r3, #0
 800052a:	623b      	str	r3, [r7, #32]
	DMAStruct.DMA_Mode = DMA_Mode_Normal;
 800052c:	2300      	movs	r3, #0
 800052e:	633b      	str	r3, [r7, #48]	; 0x30
	DMAStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8000530:	2300      	movs	r3, #0
 8000532:	63bb      	str	r3, [r7, #56]	; 0x38
	DMAStruct.DMA_Priority = DMA_Priority_High;
 8000534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000538:	637b      	str	r3, [r7, #52]	; 0x34
	DMAStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800053a:	2300      	movs	r3, #0
 800053c:	643b      	str	r3, [r7, #64]	; 0x40
	DMAStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800053e:	2300      	movs	r3, #0
 8000540:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_ITConfig(DMA1_Stream5, DMA_IT_TC, ENABLE);
 8000542:	2201      	movs	r2, #1
 8000544:	2110      	movs	r1, #16
 8000546:	4808      	ldr	r0, [pc, #32]	; (8000568 <initAudioOutDMA+0x8c>)
 8000548:	f000 ff98 	bl	800147c <DMA_ITConfig>
	DMA_Init(DMA1_Stream5, &DMAStruct);
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	4619      	mov	r1, r3
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <initAudioOutDMA+0x8c>)
 8000554:	f000 fe64 	bl	8001220 <DMA_Init>
	DMA_Cmd(DMA1_Stream5, ENABLE);
 8000558:	2101      	movs	r1, #1
 800055a:	4803      	ldr	r0, [pc, #12]	; (8000568 <initAudioOutDMA+0x8c>)
 800055c:	f000 fef0 	bl	8001340 <DMA_Cmd>
}
 8000560:	bf00      	nop
 8000562:	3748      	adds	r7, #72	; 0x48
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40026088 	.word	0x40026088
 800056c:	40007408 	.word	0x40007408

08000570 <initAudioOut>:

void initAudioOut(uint16_t* buffer, uint32_t size)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	DAC_DeInit();
 800057a:	f001 f83f 	bl	80015fc <DAC_DeInit>
	TIM_DeInit(TIM6);
 800057e:	480b      	ldr	r0, [pc, #44]	; (80005ac <initAudioOut+0x3c>)
 8000580:	f000 fa98 	bl	8000ab4 <TIM_DeInit>
	DMA_DeInit(DMA1_Stream5);
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <initAudioOut+0x40>)
 8000586:	f000 fd77 	bl	8001078 <DMA_DeInit>
	initAudioOutDAC();
 800058a:	f7ff ff31 	bl	80003f0 <initAudioOutDAC>
	initAudioOutGPIO();
 800058e:	f7ff ff4f 	bl	8000430 <initAudioOutGPIO>
	initAudioOutTIM();
 8000592:	f7ff ff69 	bl	8000468 <initAudioOutTIM>
	initAudioOutNVIC();
 8000596:	f7ff ff8d 	bl	80004b4 <initAudioOutNVIC>
	initAudioOutDMA(buffer,size);
 800059a:	6839      	ldr	r1, [r7, #0]
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f7ff ff9d 	bl	80004dc <initAudioOutDMA>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40001000 	.word	0x40001000
 80005b0:	40026088 	.word	0x40026088

080005b4 <initAudioInGPIO>:
void initAudioInNVIC(void);
void initAudioInDMA(uint16_t* buffer, uint32_t size);


void initAudioInGPIO(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 80005ba:	2101      	movs	r1, #1
 80005bc:	2004      	movs	r0, #4
 80005be:	f000 fc2d 	bl	8000e1c <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIOStruct;
	GPIOStruct.GPIO_Mode = GPIO_Mode_AN;
 80005c2:	2303      	movs	r3, #3
 80005c4:	713b      	strb	r3, [r7, #4]
	GPIOStruct.GPIO_Pin = GPIO_Pin_2;
 80005c6:	2304      	movs	r3, #4
 80005c8:	603b      	str	r3, [r7, #0]
	GPIOStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	71fb      	strb	r3, [r7, #7]
	GPIOStruct.GPIO_Speed = GPIO_Speed_2MHz;
 80005ce:	2300      	movs	r3, #0
 80005d0:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOC, &GPIOStruct);
 80005d2:	463b      	mov	r3, r7
 80005d4:	4619      	mov	r1, r3
 80005d6:	4803      	ldr	r0, [pc, #12]	; (80005e4 <initAudioInGPIO+0x30>)
 80005d8:	f000 fcc0 	bl	8000f5c <GPIO_Init>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40020800 	.word	0x40020800

080005e8 <initAudioInTIM>:

void initAudioInTIM(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 80005ee:	2101      	movs	r1, #1
 80005f0:	2001      	movs	r0, #1
 80005f2:	f000 fc33 	bl	8000e5c <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef TimerStruct;
	TimerStruct.TIM_Period = 2625*4-1;
 80005f6:	f642 1303 	movw	r3, #10499	; 0x2903
 80005fa:	60bb      	str	r3, [r7, #8]
	TimerStruct.TIM_Prescaler = 1-1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	80bb      	strh	r3, [r7, #4]
	TimerStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000600:	2300      	movs	r3, #0
 8000602:	80fb      	strh	r3, [r7, #6]
	TimerStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM2, &TimerStruct);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4619      	mov	r1, r3
 800060c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000610:	f000 fb30 	bl	8000c74 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM2,TIM_TRGOSource_Update);
 8000614:	2120      	movs	r1, #32
 8000616:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800061a:	f000 fbb7 	bl	8000d8c <TIM_SelectOutputTrigger>
	TIM_Cmd(TIM2, ENABLE);
 800061e:	2101      	movs	r1, #1
 8000620:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000624:	f000 fb92 	bl	8000d4c <TIM_Cmd>
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <initAudioInADC>:

void initAudioInADC(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);
 8000636:	2101      	movs	r1, #1
 8000638:	f44f 7080 	mov.w	r0, #256	; 0x100
 800063c:	f000 fc2e 	bl	8000e9c <RCC_APB2PeriphClockCmd>
	ADC_CommonInitTypeDef ADCCommonStruct;
	ADCCommonStruct.ADC_Mode = ADC_Mode_Independent;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
	ADCCommonStruct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]
	ADCCommonStruct.ADC_Prescaler = ADC_Prescaler_Div2;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
	ADCCommonStruct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800064c:	2300      	movs	r3, #0
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
	ADC_CommonInit(&ADCCommonStruct);
 8000650:	f107 0318 	add.w	r3, r7, #24
 8000654:	4618      	mov	r0, r3
 8000656:	f001 f8e1 	bl	800181c <ADC_CommonInit>

	ADC_InitTypeDef ADCStruct;
	ADCStruct.ADC_ContinuousConvMode = DISABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	717b      	strb	r3, [r7, #5]
	ADCStruct.ADC_DataAlign = ADC_DataAlign_Right;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
	ADCStruct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_TRGO;
 8000662:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000666:	60fb      	str	r3, [r7, #12]
	ADCStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 8000668:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
	ADCStruct.ADC_NbrOfConversion = 1;
 800066e:	2301      	movs	r3, #1
 8000670:	753b      	strb	r3, [r7, #20]
	ADCStruct.ADC_Resolution = ADC_Resolution_12b;
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
	ADCStruct.ADC_ScanConvMode = DISABLE;
 8000676:	2300      	movs	r3, #0
 8000678:	713b      	strb	r3, [r7, #4]
	ADC_Init(ADC1, &ADCStruct);
 800067a:	463b      	mov	r3, r7
 800067c:	4619      	mov	r1, r3
 800067e:	480c      	ldr	r0, [pc, #48]	; (80006b0 <initAudioInADC+0x80>)
 8000680:	f001 f876 	bl	8001770 <ADC_Init>

	ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 1, ADC_SampleTime_15Cycles);
 8000684:	2301      	movs	r3, #1
 8000686:	2201      	movs	r2, #1
 8000688:	210c      	movs	r1, #12
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <initAudioInADC+0x80>)
 800068c:	f001 f90a 	bl	80018a4 <ADC_RegularChannelConfig>
	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
 8000690:	2101      	movs	r1, #1
 8000692:	4807      	ldr	r0, [pc, #28]	; (80006b0 <initAudioInADC+0x80>)
 8000694:	f001 f9ec 	bl	8001a70 <ADC_DMARequestAfterLastTransferCmd>
	ADC_DMACmd(ADC1, ENABLE);
 8000698:	2101      	movs	r1, #1
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <initAudioInADC+0x80>)
 800069c:	f001 f9cc 	bl	8001a38 <ADC_DMACmd>
	ADC_Cmd(ADC1, ENABLE);
 80006a0:	2101      	movs	r1, #1
 80006a2:	4803      	ldr	r0, [pc, #12]	; (80006b0 <initAudioInADC+0x80>)
 80006a4:	f001 f8e2 	bl	800186c <ADC_Cmd>
}
 80006a8:	bf00      	nop
 80006aa:	3728      	adds	r7, #40	; 0x28
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40012000 	.word	0x40012000

080006b4 <initAudioInNVIC>:

void initAudioInNVIC(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVICStruct;
	NVICStruct.NVIC_IRQChannel = DMA2_Stream0_IRQn;
 80006ba:	2338      	movs	r3, #56	; 0x38
 80006bc:	713b      	strb	r3, [r7, #4]
	NVICStruct.NVIC_IRQChannelCmd = ENABLE;
 80006be:	2301      	movs	r3, #1
 80006c0:	71fb      	strb	r3, [r7, #7]
	NVICStruct.NVIC_IRQChannelPreemptionPriority=0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	717b      	strb	r3, [r7, #5]
	NVICStruct.NVIC_IRQChannelSubPriority=0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVICStruct);
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f9eb 	bl	8001aa8 <NVIC_Init>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop

080006dc <initAudioInDMA>:

void initAudioInDMA(uint16_t* buffer, uint32_t size)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b092      	sub	sp, #72	; 0x48
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 ,ENABLE);
 80006e6:	2101      	movs	r1, #1
 80006e8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80006ec:	f000 fb96 	bl	8000e1c <RCC_AHB1PeriphClockCmd>

	DMA_InitTypeDef DMAStruct;
	DMA_DeInit(DMA2_Stream0);
 80006f0:	481b      	ldr	r0, [pc, #108]	; (8000760 <initAudioInDMA+0x84>)
 80006f2:	f000 fcc1 	bl	8001078 <DMA_DeInit>
	DMAStruct.DMA_Channel = DMA_Channel_0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
	DMAStruct.DMA_PeripheralBaseAddr = (uint32_t)(&ADC1->DR);
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <initAudioInDMA+0x88>)
 80006fc:	613b      	str	r3, [r7, #16]
	DMAStruct.DMA_Memory0BaseAddr = (uint32_t)(buffer);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	617b      	str	r3, [r7, #20]
	DMAStruct.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
	DMAStruct.DMA_BufferSize = size;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	61fb      	str	r3, [r7, #28]
	DMAStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 800070a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMAStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
	DMAStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000716:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
	DMAStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
	DMAStruct.DMA_Mode = DMA_Mode_Normal;
 8000720:	2300      	movs	r3, #0
 8000722:	633b      	str	r3, [r7, #48]	; 0x30
	DMAStruct.DMA_Priority = DMA_Priority_High;
 8000724:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000728:	637b      	str	r3, [r7, #52]	; 0x34
	DMAStruct.DMA_FIFOMode = DMA_FIFOMode_Enable;
 800072a:	2304      	movs	r3, #4
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
	DMAStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 800072e:	2301      	movs	r3, #1
 8000730:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMAStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8000732:	2300      	movs	r3, #0
 8000734:	643b      	str	r3, [r7, #64]	; 0x40
	DMAStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8000736:	2300      	movs	r3, #0
 8000738:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init(DMA2_Stream0, &DMAStruct);
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	4619      	mov	r1, r3
 8000740:	4807      	ldr	r0, [pc, #28]	; (8000760 <initAudioInDMA+0x84>)
 8000742:	f000 fd6d 	bl	8001220 <DMA_Init>
	DMA_ITConfig(DMA2_Stream0, DMA_IT_TC, ENABLE);
 8000746:	2201      	movs	r2, #1
 8000748:	2110      	movs	r1, #16
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <initAudioInDMA+0x84>)
 800074c:	f000 fe96 	bl	800147c <DMA_ITConfig>
	DMA_Cmd(DMA2_Stream0, ENABLE);
 8000750:	2101      	movs	r1, #1
 8000752:	4803      	ldr	r0, [pc, #12]	; (8000760 <initAudioInDMA+0x84>)
 8000754:	f000 fdf4 	bl	8001340 <DMA_Cmd>
}
 8000758:	bf00      	nop
 800075a:	3748      	adds	r7, #72	; 0x48
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40026410 	.word	0x40026410
 8000764:	4001204c 	.word	0x4001204c

08000768 <initAudioIn>:

void initAudioIn(uint16_t* buffer, uint32_t size)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
	TIM_DeInit(TIM2);
 8000772:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000776:	f000 f99d 	bl	8000ab4 <TIM_DeInit>
	ADC_DeInit();
 800077a:	f000 ffeb 	bl	8001754 <ADC_DeInit>
	DMA_DeInit(DMA2_Stream0);
 800077e:	4809      	ldr	r0, [pc, #36]	; (80007a4 <initAudioIn+0x3c>)
 8000780:	f000 fc7a 	bl	8001078 <DMA_DeInit>
	initAudioInGPIO();
 8000784:	f7ff ff16 	bl	80005b4 <initAudioInGPIO>
	initAudioInTIM();
 8000788:	f7ff ff2e 	bl	80005e8 <initAudioInTIM>
	initAudioInADC();
 800078c:	f7ff ff50 	bl	8000630 <initAudioInADC>
	initAudioInNVIC();
 8000790:	f7ff ff90 	bl	80006b4 <initAudioInNVIC>
	initAudioInDMA(buffer, size);
 8000794:	6839      	ldr	r1, [r7, #0]
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ffa0 	bl	80006dc <initAudioInDMA>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40026410 	.word	0x40026410

080007a8 <DMA2_Stream0_IRQHandler>:

uint8_t inputDone = 0;
uint8_t outputDone = 0;
uint16_t buffer[64000];

void DMA2_Stream0_IRQHandler(void){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	if (DMA_GetITStatus(DMA2_Stream0, DMA_IT_TCIF0))
 80007ac:	490a      	ldr	r1, [pc, #40]	; (80007d8 <DMA2_Stream0_IRQHandler+0x30>)
 80007ae:	480b      	ldr	r0, [pc, #44]	; (80007dc <DMA2_Stream0_IRQHandler+0x34>)
 80007b0:	f000 fe9e 	bl	80014f0 <DMA_GetITStatus>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00b      	beq.n	80007d2 <DMA2_Stream0_IRQHandler+0x2a>
	{
		DMA_ClearITPendingBit(DMA2_Stream0, DMA_IT_TCIF0);
 80007ba:	4907      	ldr	r1, [pc, #28]	; (80007d8 <DMA2_Stream0_IRQHandler+0x30>)
 80007bc:	4807      	ldr	r0, [pc, #28]	; (80007dc <DMA2_Stream0_IRQHandler+0x34>)
 80007be:	f000 feef 	bl	80015a0 <DMA_ClearITPendingBit>
		inputDone = 1;
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <DMA2_Stream0_IRQHandler+0x38>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]
		initAudioOut(buffer,64000); //FOR SOME PERVERSE REASON IT WORKS WHEN ITS HERE
 80007c8:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <DMA2_Stream0_IRQHandler+0x3c>)
 80007ce:	f7ff fecf 	bl	8000570 <initAudioOut>
	}
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	10008020 	.word	0x10008020
 80007dc:	40026410 	.word	0x40026410
 80007e0:	2000003c 	.word	0x2000003c
 80007e4:	20000040 	.word	0x20000040

080007e8 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	if (DMA_GetITStatus(DMA1_Stream5, DMA_IT_TCIF5))
 80007ec:	4907      	ldr	r1, [pc, #28]	; (800080c <DMA1_Stream5_IRQHandler+0x24>)
 80007ee:	4808      	ldr	r0, [pc, #32]	; (8000810 <DMA1_Stream5_IRQHandler+0x28>)
 80007f0:	f000 fe7e 	bl	80014f0 <DMA_GetITStatus>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d006      	beq.n	8000808 <DMA1_Stream5_IRQHandler+0x20>
	{
		DMA_ClearITPendingBit(DMA1_Stream5, DMA_IT_TCIF5);
 80007fa:	4904      	ldr	r1, [pc, #16]	; (800080c <DMA1_Stream5_IRQHandler+0x24>)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <DMA1_Stream5_IRQHandler+0x28>)
 80007fe:	f000 fecf 	bl	80015a0 <DMA_ClearITPendingBit>
		outputDone = 1;
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <DMA1_Stream5_IRQHandler+0x2c>)
 8000804:	2201      	movs	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
	}
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20008800 	.word	0x20008800
 8000810:	40026088 	.word	0x40026088
 8000814:	2000003d 	.word	0x2000003d

08000818 <main>:

int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
	int i = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]

	initAudioIn(buffer, 64000);
 8000822:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <main+0x54>)
 8000828:	f7ff ff9e 	bl	8000768 <initAudioIn>

	while (1)
	{
		i++;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3301      	adds	r3, #1
 8000830:	607b      	str	r3, [r7, #4]
		if(inputDone)
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <main+0x58>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d006      	beq.n	8000848 <main+0x30>
		{
			STM_EVAL_LEDInit(LED5);
 800083a:	2002      	movs	r0, #2
 800083c:	f000 f8dc 	bl	80009f8 <STM_EVAL_LEDInit>
			STM_EVAL_LEDOn(LED5);
 8000840:	2002      	movs	r0, #2
 8000842:	f000 f907 	bl	8000a54 <STM_EVAL_LEDOn>
 8000846:	e002      	b.n	800084e <main+0x36>
		}
		else
		{
			STM_EVAL_LEDOff(LED5);
 8000848:	2002      	movs	r0, #2
 800084a:	f000 f91b 	bl	8000a84 <STM_EVAL_LEDOff>
		}
		if(outputDone)
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <main+0x5c>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d006      	beq.n	8000864 <main+0x4c>
		{
			STM_EVAL_LEDInit(LED4);
 8000856:	2000      	movs	r0, #0
 8000858:	f000 f8ce 	bl	80009f8 <STM_EVAL_LEDInit>
			STM_EVAL_LEDOn(LED4);
 800085c:	2000      	movs	r0, #0
 800085e:	f000 f8f9 	bl	8000a54 <STM_EVAL_LEDOn>
 8000862:	e7e3      	b.n	800082c <main+0x14>
		}
		else
		{
			STM_EVAL_LEDOff(LED4);
 8000864:	2000      	movs	r0, #0
 8000866:	f000 f90d 	bl	8000a84 <STM_EVAL_LEDOff>
		}
	}
 800086a:	e7df      	b.n	800082c <main+0x14>
 800086c:	20000040 	.word	0x20000040
 8000870:	2000003c 	.word	0x2000003c
 8000874:	2000003d 	.word	0x2000003d

08000878 <EVAL_AUDIO_TransferComplete_CallBack>:
}



void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){return;}
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop

08000890 <EVAL_AUDIO_GetSampleCallBack>:
uint16_t EVAL_AUDIO_GetSampleCallBack(void){return -1;}
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
 8000894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop

080008a4 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80008a8:	4b37      	ldr	r3, [pc, #220]	; (8000988 <Audio_MAL_IRQHandler+0xe4>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b37      	ldr	r3, [pc, #220]	; (800098c <Audio_MAL_IRQHandler+0xe8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	4610      	mov	r0, r2
 80008b4:	f000 fd78 	bl	80013a8 <DMA_GetFlagStatus>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d062      	beq.n	8000984 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80008be:	4b34      	ldr	r3, [pc, #208]	; (8000990 <Audio_MAL_IRQHandler+0xec>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d04a      	beq.n	800095c <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80008c6:	bf00      	nop
 80008c8:	4b2f      	ldr	r3, [pc, #188]	; (8000988 <Audio_MAL_IRQHandler+0xe4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fd53 	bl	8001378 <DMA_GetCmdStatus>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1f7      	bne.n	80008c8 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80008d8:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <Audio_MAL_IRQHandler+0xe4>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b2b      	ldr	r3, [pc, #172]	; (800098c <Audio_MAL_IRQHandler+0xe8>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	4610      	mov	r0, r2
 80008e4:	f000 fd9c 	bl	8001420 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80008e8:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <Audio_MAL_IRQHandler+0xf0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <Audio_MAL_IRQHandler+0xf4>)
 80008f0:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <Audio_MAL_IRQHandler+0xec>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008fa:	4293      	cmp	r3, r2
 80008fc:	bf28      	it	cs
 80008fe:	4613      	movcs	r3, r2
 8000900:	4a25      	ldr	r2, [pc, #148]	; (8000998 <Audio_MAL_IRQHandler+0xf4>)
 8000902:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000904:	4b20      	ldr	r3, [pc, #128]	; (8000988 <Audio_MAL_IRQHandler+0xe4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4923      	ldr	r1, [pc, #140]	; (8000998 <Audio_MAL_IRQHandler+0xf4>)
 800090a:	4618      	mov	r0, r3
 800090c:	f000 fc88 	bl	8001220 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000910:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <Audio_MAL_IRQHandler+0xe4>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2101      	movs	r1, #1
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fd12 	bl	8001340 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <Audio_MAL_IRQHandler+0xf0>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <Audio_MAL_IRQHandler+0xec>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000928:	428b      	cmp	r3, r1
 800092a:	bf28      	it	cs
 800092c:	460b      	movcs	r3, r1
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	4a18      	ldr	r2, [pc, #96]	; (8000994 <Audio_MAL_IRQHandler+0xf0>)
 8000934:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <Audio_MAL_IRQHandler+0xec>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <Audio_MAL_IRQHandler+0xec>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000942:	428b      	cmp	r3, r1
 8000944:	bf28      	it	cs
 8000946:	460b      	movcs	r3, r1
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	4a11      	ldr	r2, [pc, #68]	; (8000990 <Audio_MAL_IRQHandler+0xec>)
 800094c:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <Audio_MAL_IRQHandler+0xe4>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fcf3 	bl	8001340 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800095a:	e013      	b.n	8000984 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <Audio_MAL_IRQHandler+0xe4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fcec 	bl	8001340 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <Audio_MAL_IRQHandler+0xe4>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <Audio_MAL_IRQHandler+0xe8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	4610      	mov	r0, r2
 8000974:	f000 fd54 	bl	8001420 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <Audio_MAL_IRQHandler+0xf0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff7a 	bl	8000878 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000008 	.word	0x20000008
 800098c:	2000000c 	.word	0x2000000c
 8000990:	20000000 	.word	0x20000000
 8000994:	2001f440 	.word	0x2001f440
 8000998:	2001f480 	.word	0x2001f480

0800099c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80009a0:	f7ff ff80 	bl	80008a4 <Audio_MAL_IRQHandler>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80009ac:	f7ff ff7a 	bl	80008a4 <Audio_MAL_IRQHandler>
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80009b8:	2102      	movs	r1, #2
 80009ba:	480d      	ldr	r0, [pc, #52]	; (80009f0 <SPI3_IRQHandler+0x3c>)
 80009bc:	f000 fa12 	bl	8000de4 <SPI_I2S_GetFlagStatus>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d011      	beq.n	80009ea <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <SPI3_IRQHandler+0x40>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d106      	bne.n	80009dc <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80009ce:	f7ff ff5f 	bl	8000890 <EVAL_AUDIO_GetSampleCallBack>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4619      	mov	r1, r3
 80009d6:	2004      	movs	r0, #4
 80009d8:	f000 fe78 	bl	80016cc <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80009dc:	f7ff ff58 	bl	8000890 <EVAL_AUDIO_GetSampleCallBack>
 80009e0:	4603      	mov	r3, r0
 80009e2:	4619      	mov	r1, r3
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <SPI3_IRQHandler+0x3c>)
 80009e6:	f000 f9ed 	bl	8000dc4 <SPI_I2S_SendData>
  }
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40003c00 	.word	0x40003c00
 80009f4:	20000004 	.word	0x20000004

080009f8 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <STM_EVAL_LEDInit+0x50>)
 8000a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fa05 	bl	8000e1c <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <STM_EVAL_LEDInit+0x54>)
 8000a16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000a20:	2300      	movs	r3, #0
 8000a22:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <STM_EVAL_LEDInit+0x58>)
 8000a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a34:	f107 0208 	add.w	r2, r7, #8
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 fa8e 	bl	8000f5c <GPIO_Init>
}
 8000a40:	bf00      	nop
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	08001bd8 	.word	0x08001bd8
 8000a4c:	08001bd0 	.word	0x08001bd0
 8000a50:	20000010 	.word	0x20000010

08000a54 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <STM_EVAL_LEDOn+0x28>)
 8000a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a66:	79fa      	ldrb	r2, [r7, #7]
 8000a68:	4905      	ldr	r1, [pc, #20]	; (8000a80 <STM_EVAL_LEDOn+0x2c>)
 8000a6a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000a6e:	831a      	strh	r2, [r3, #24]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	20000010 	.word	0x20000010
 8000a80:	08001bd0 	.word	0x08001bd0

08000a84 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <STM_EVAL_LEDOff+0x28>)
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	79fa      	ldrb	r2, [r7, #7]
 8000a98:	4905      	ldr	r1, [pc, #20]	; (8000ab0 <STM_EVAL_LEDOff+0x2c>)
 8000a9a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000a9e:	835a      	strh	r2, [r3, #26]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	20000010 	.word	0x20000010
 8000ab0:	08001bd0 	.word	0x08001bd0

08000ab4 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a60      	ldr	r2, [pc, #384]	; (8000c40 <TIM_DeInit+0x18c>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d108      	bne.n	8000ad6 <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f000 fa28 	bl	8000f1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8000acc:	2100      	movs	r1, #0
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f000 fa24 	bl	8000f1c <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000ad4:	e0af      	b.n	8000c36 <TIM_DeInit+0x182>
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000adc:	d108      	bne.n	8000af0 <TIM_DeInit+0x3c>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f000 f9fb 	bl	8000edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f000 f9f7 	bl	8000edc <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000aee:	e0a2      	b.n	8000c36 <TIM_DeInit+0x182>
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a54      	ldr	r2, [pc, #336]	; (8000c44 <TIM_DeInit+0x190>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d108      	bne.n	8000b0a <TIM_DeInit+0x56>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8000af8:	2101      	movs	r1, #1
 8000afa:	2002      	movs	r0, #2
 8000afc:	f000 f9ee 	bl	8000edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8000b00:	2100      	movs	r1, #0
 8000b02:	2002      	movs	r0, #2
 8000b04:	f000 f9ea 	bl	8000edc <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000b08:	e095      	b.n	8000c36 <TIM_DeInit+0x182>
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a4e      	ldr	r2, [pc, #312]	; (8000c48 <TIM_DeInit+0x194>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d108      	bne.n	8000b24 <TIM_DeInit+0x70>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000b12:	2101      	movs	r1, #1
 8000b14:	2004      	movs	r0, #4
 8000b16:	f000 f9e1 	bl	8000edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2004      	movs	r0, #4
 8000b1e:	f000 f9dd 	bl	8000edc <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000b22:	e088      	b.n	8000c36 <TIM_DeInit+0x182>
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a49      	ldr	r2, [pc, #292]	; (8000c4c <TIM_DeInit+0x198>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d108      	bne.n	8000b3e <TIM_DeInit+0x8a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	2008      	movs	r0, #8
 8000b30:	f000 f9d4 	bl	8000edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8000b34:	2100      	movs	r1, #0
 8000b36:	2008      	movs	r0, #8
 8000b38:	f000 f9d0 	bl	8000edc <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000b3c:	e07b      	b.n	8000c36 <TIM_DeInit+0x182>
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a43      	ldr	r2, [pc, #268]	; (8000c50 <TIM_DeInit+0x19c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d108      	bne.n	8000b58 <TIM_DeInit+0xa4>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8000b46:	2101      	movs	r1, #1
 8000b48:	2010      	movs	r0, #16
 8000b4a:	f000 f9c7 	bl	8000edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2010      	movs	r0, #16
 8000b52:	f000 f9c3 	bl	8000edc <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000b56:	e06e      	b.n	8000c36 <TIM_DeInit+0x182>
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a3e      	ldr	r2, [pc, #248]	; (8000c54 <TIM_DeInit+0x1a0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d108      	bne.n	8000b72 <TIM_DeInit+0xbe>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8000b60:	2101      	movs	r1, #1
 8000b62:	2020      	movs	r0, #32
 8000b64:	f000 f9ba 	bl	8000edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2020      	movs	r0, #32
 8000b6c:	f000 f9b6 	bl	8000edc <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000b70:	e061      	b.n	8000c36 <TIM_DeInit+0x182>
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a38      	ldr	r2, [pc, #224]	; (8000c58 <TIM_DeInit+0x1a4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d108      	bne.n	8000b8c <TIM_DeInit+0xd8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f000 f9cd 	bl	8000f1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8000b82:	2100      	movs	r1, #0
 8000b84:	2002      	movs	r0, #2
 8000b86:	f000 f9c9 	bl	8000f1c <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000b8a:	e054      	b.n	8000c36 <TIM_DeInit+0x182>
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a33      	ldr	r2, [pc, #204]	; (8000c5c <TIM_DeInit+0x1a8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d10a      	bne.n	8000baa <TIM_DeInit+0xf6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8000b94:	2101      	movs	r1, #1
 8000b96:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b9a:	f000 f9bf 	bl	8000f1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000ba4:	f000 f9ba 	bl	8000f1c <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000ba8:	e045      	b.n	8000c36 <TIM_DeInit+0x182>
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a2c      	ldr	r2, [pc, #176]	; (8000c60 <TIM_DeInit+0x1ac>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d10a      	bne.n	8000bc8 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bb8:	f000 f9b0 	bl	8000f1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bc2:	f000 f9ab 	bl	8000f1c <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000bc6:	e036      	b.n	8000c36 <TIM_DeInit+0x182>
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a26      	ldr	r2, [pc, #152]	; (8000c64 <TIM_DeInit+0x1b0>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d10a      	bne.n	8000be6 <TIM_DeInit+0x132>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000bd6:	f000 f9a1 	bl	8000f1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8000bda:	2100      	movs	r1, #0
 8000bdc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000be0:	f000 f99c 	bl	8000f1c <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000be4:	e027      	b.n	8000c36 <TIM_DeInit+0x182>
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <TIM_DeInit+0x1b4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d108      	bne.n	8000c00 <TIM_DeInit+0x14c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8000bee:	2101      	movs	r1, #1
 8000bf0:	2040      	movs	r0, #64	; 0x40
 8000bf2:	f000 f973 	bl	8000edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2040      	movs	r0, #64	; 0x40
 8000bfa:	f000 f96f 	bl	8000edc <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000bfe:	e01a      	b.n	8000c36 <TIM_DeInit+0x182>
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a1a      	ldr	r2, [pc, #104]	; (8000c6c <TIM_DeInit+0x1b8>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d108      	bne.n	8000c1a <TIM_DeInit+0x166>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8000c08:	2101      	movs	r1, #1
 8000c0a:	2080      	movs	r0, #128	; 0x80
 8000c0c:	f000 f966 	bl	8000edc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8000c10:	2100      	movs	r1, #0
 8000c12:	2080      	movs	r0, #128	; 0x80
 8000c14:	f000 f962 	bl	8000edc <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000c18:	e00d      	b.n	8000c36 <TIM_DeInit+0x182>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <TIM_DeInit+0x1bc>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d109      	bne.n	8000c36 <TIM_DeInit+0x182>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8000c22:	2101      	movs	r1, #1
 8000c24:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c28:	f000 f958 	bl	8000edc <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c32:	f000 f953 	bl	8000edc <RCC_APB1PeriphResetCmd>
    }   
  }
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40010000 	.word	0x40010000
 8000c44:	40000400 	.word	0x40000400
 8000c48:	40000800 	.word	0x40000800
 8000c4c:	40000c00 	.word	0x40000c00
 8000c50:	40001000 	.word	0x40001000
 8000c54:	40001400 	.word	0x40001400
 8000c58:	40010400 	.word	0x40010400
 8000c5c:	40014000 	.word	0x40014000
 8000c60:	40014400 	.word	0x40014400
 8000c64:	40014800 	.word	0x40014800
 8000c68:	40001800 	.word	0x40001800
 8000c6c:	40001c00 	.word	0x40001c00
 8000c70:	40002000 	.word	0x40002000

08000c74 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a29      	ldr	r2, [pc, #164]	; (8000d30 <TIM_TimeBaseInit+0xbc>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d013      	beq.n	8000cb8 <TIM_TimeBaseInit+0x44>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a28      	ldr	r2, [pc, #160]	; (8000d34 <TIM_TimeBaseInit+0xc0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d00f      	beq.n	8000cb8 <TIM_TimeBaseInit+0x44>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c9e:	d00b      	beq.n	8000cb8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a25      	ldr	r2, [pc, #148]	; (8000d38 <TIM_TimeBaseInit+0xc4>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d007      	beq.n	8000cb8 <TIM_TimeBaseInit+0x44>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a24      	ldr	r2, [pc, #144]	; (8000d3c <TIM_TimeBaseInit+0xc8>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d003      	beq.n	8000cb8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a23      	ldr	r2, [pc, #140]	; (8000d40 <TIM_TimeBaseInit+0xcc>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d108      	bne.n	8000cca <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000cb8:	89fb      	ldrh	r3, [r7, #14]
 8000cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cbe:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	885a      	ldrh	r2, [r3, #2]
 8000cc4:	89fb      	ldrh	r3, [r7, #14]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a1d      	ldr	r2, [pc, #116]	; (8000d44 <TIM_TimeBaseInit+0xd0>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d00c      	beq.n	8000cec <TIM_TimeBaseInit+0x78>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a1c      	ldr	r2, [pc, #112]	; (8000d48 <TIM_TimeBaseInit+0xd4>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d008      	beq.n	8000cec <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000cda:	89fb      	ldrh	r3, [r7, #14]
 8000cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ce0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	891a      	ldrh	r2, [r3, #8]
 8000ce6:	89fb      	ldrh	r3, [r7, #14]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	89fa      	ldrh	r2, [r7, #14]
 8000cf0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	881a      	ldrh	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <TIM_TimeBaseInit+0xbc>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d003      	beq.n	8000d12 <TIM_TimeBaseInit+0x9e>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a09      	ldr	r2, [pc, #36]	; (8000d34 <TIM_TimeBaseInit+0xc0>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d104      	bne.n	8000d1c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	7a9b      	ldrb	r3, [r3, #10]
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	829a      	strh	r2, [r3, #20]
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40010000 	.word	0x40010000
 8000d34:	40010400 	.word	0x40010400
 8000d38:	40000400 	.word	0x40000400
 8000d3c:	40000800 	.word	0x40000800
 8000d40:	40000c00 	.word	0x40000c00
 8000d44:	40001000 	.word	0x40001000
 8000d48:	40001400 	.word	0x40001400

08000d4c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d008      	beq.n	8000d70 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000d6e:	e007      	b.n	8000d80 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	f023 0301 	bic.w	r3, r3, #1
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	801a      	strh	r2, [r3, #0]
  }
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	889b      	ldrh	r3, [r3, #4]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	889b      	ldrh	r3, [r3, #4]
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	887b      	ldrh	r3, [r7, #2]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	809a      	strh	r2, [r3, #4]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	887a      	ldrh	r2, [r7, #2]
 8000dd4:	819a      	strh	r2, [r3, #12]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	891b      	ldrh	r3, [r3, #8]
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	887b      	ldrh	r3, [r7, #2]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000e04:	2301      	movs	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e001      	b.n	8000e0e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000e2e:	490a      	ldr	r1, [pc, #40]	; (8000e58 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000e3a:	e006      	b.n	8000e4a <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000e3c:	4906      	ldr	r1, [pc, #24]	; (8000e58 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	4013      	ands	r3, r2
 8000e48:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800

08000e5c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e68:	78fb      	ldrb	r3, [r7, #3]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d006      	beq.n	8000e7c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000e6e:	490a      	ldr	r1, [pc, #40]	; (8000e98 <RCC_APB1PeriphClockCmd+0x3c>)
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <RCC_APB1PeriphClockCmd+0x3c>)
 8000e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000e7a:	e006      	b.n	8000e8a <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000e7c:	4906      	ldr	r1, [pc, #24]	; (8000e98 <RCC_APB1PeriphClockCmd+0x3c>)
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <RCC_APB1PeriphClockCmd+0x3c>)
 8000e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	4013      	ands	r3, r2
 8000e88:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800

08000e9c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d006      	beq.n	8000ebc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000eae:	490a      	ldr	r1, [pc, #40]	; (8000ed8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000eb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000eba:	e006      	b.n	8000eca <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000ebc:	4906      	ldr	r1, [pc, #24]	; (8000ed8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800

08000edc <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d006      	beq.n	8000efc <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000eee:	490a      	ldr	r1, [pc, #40]	; (8000f18 <RCC_APB1PeriphResetCmd+0x3c>)
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <RCC_APB1PeriphResetCmd+0x3c>)
 8000ef2:	6a1a      	ldr	r2, [r3, #32]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8000efa:	e006      	b.n	8000f0a <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000efc:	4906      	ldr	r1, [pc, #24]	; (8000f18 <RCC_APB1PeriphResetCmd+0x3c>)
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <RCC_APB1PeriphResetCmd+0x3c>)
 8000f00:	6a1a      	ldr	r2, [r3, #32]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	4013      	ands	r3, r2
 8000f08:	620b      	str	r3, [r1, #32]
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800

08000f1c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f28:	78fb      	ldrb	r3, [r7, #3]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d006      	beq.n	8000f3c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000f2e:	490a      	ldr	r1, [pc, #40]	; (8000f58 <RCC_APB2PeriphResetCmd+0x3c>)
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <RCC_APB2PeriphResetCmd+0x3c>)
 8000f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000f3a:	e006      	b.n	8000f4a <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000f3c:	4906      	ldr	r1, [pc, #24]	; (8000f58 <RCC_APB2PeriphResetCmd+0x3c>)
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <RCC_APB2PeriphResetCmd+0x3c>)
 8000f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	4013      	ands	r3, r2
 8000f48:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800

08000f5c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	e076      	b.n	8001066 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d165      	bne.n	8001060 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	791b      	ldrb	r3, [r3, #4]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	791b      	ldrb	r3, [r3, #4]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d003      	beq.n	8000fd2 <GPIO_Init+0x76>
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	791b      	ldrb	r3, [r3, #4]
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d12e      	bne.n	8001030 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2103      	movs	r1, #3
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	795b      	ldrb	r3, [r3, #5]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	b29b      	uxth	r3, r3
 8001008:	2101      	movs	r1, #1
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	401a      	ands	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	799b      	ldrb	r3, [r3, #6]
 800101e:	4619      	mov	r1, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	b29b      	uxth	r3, r3
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	b29b      	uxth	r3, r3
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	b29b      	uxth	r3, r3
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2103      	movs	r1, #3
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	401a      	ands	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	79db      	ldrb	r3, [r3, #7]
 8001050:	4619      	mov	r1, r3
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d985      	bls.n	8000f78 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800106c:	bf00      	nop
 800106e:	371c      	adds	r7, #28
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 0201 	bic.w	r2, r3, #1
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2221      	movs	r2, #33	; 0x21
 80010ae:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a46      	ldr	r2, [pc, #280]	; (80011cc <DMA_DeInit+0x154>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d103      	bne.n	80010c0 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80010b8:	4b45      	ldr	r3, [pc, #276]	; (80011d0 <DMA_DeInit+0x158>)
 80010ba:	223d      	movs	r2, #61	; 0x3d
 80010bc:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80010be:	e07e      	b.n	80011be <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a44      	ldr	r2, [pc, #272]	; (80011d4 <DMA_DeInit+0x15c>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d104      	bne.n	80010d2 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 80010c8:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <DMA_DeInit+0x158>)
 80010ca:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80010ce:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80010d0:	e075      	b.n	80011be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a40      	ldr	r2, [pc, #256]	; (80011d8 <DMA_DeInit+0x160>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d104      	bne.n	80010e4 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80010da:	4b3d      	ldr	r3, [pc, #244]	; (80011d0 <DMA_DeInit+0x158>)
 80010dc:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80010e0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80010e2:	e06c      	b.n	80011be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a3d      	ldr	r2, [pc, #244]	; (80011dc <DMA_DeInit+0x164>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d104      	bne.n	80010f6 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 80010ec:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <DMA_DeInit+0x158>)
 80010ee:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80010f2:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80010f4:	e063      	b.n	80011be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a39      	ldr	r2, [pc, #228]	; (80011e0 <DMA_DeInit+0x168>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d103      	bne.n	8001106 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 80010fe:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <DMA_DeInit+0x158>)
 8001100:	4a38      	ldr	r2, [pc, #224]	; (80011e4 <DMA_DeInit+0x16c>)
 8001102:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001104:	e05b      	b.n	80011be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a37      	ldr	r2, [pc, #220]	; (80011e8 <DMA_DeInit+0x170>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d103      	bne.n	8001116 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800110e:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <DMA_DeInit+0x158>)
 8001110:	4a36      	ldr	r2, [pc, #216]	; (80011ec <DMA_DeInit+0x174>)
 8001112:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001114:	e053      	b.n	80011be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a35      	ldr	r2, [pc, #212]	; (80011f0 <DMA_DeInit+0x178>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d103      	bne.n	8001126 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800111e:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <DMA_DeInit+0x158>)
 8001120:	4a34      	ldr	r2, [pc, #208]	; (80011f4 <DMA_DeInit+0x17c>)
 8001122:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001124:	e04b      	b.n	80011be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a33      	ldr	r2, [pc, #204]	; (80011f8 <DMA_DeInit+0x180>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d104      	bne.n	8001138 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <DMA_DeInit+0x158>)
 8001130:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001134:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001136:	e042      	b.n	80011be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a30      	ldr	r2, [pc, #192]	; (80011fc <DMA_DeInit+0x184>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d103      	bne.n	8001148 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8001140:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <DMA_DeInit+0x188>)
 8001142:	223d      	movs	r2, #61	; 0x3d
 8001144:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001146:	e03a      	b.n	80011be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a2e      	ldr	r2, [pc, #184]	; (8001204 <DMA_DeInit+0x18c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d104      	bne.n	800115a <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8001150:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <DMA_DeInit+0x188>)
 8001152:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8001156:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001158:	e031      	b.n	80011be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <DMA_DeInit+0x190>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d104      	bne.n	800116c <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <DMA_DeInit+0x188>)
 8001164:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001168:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800116a:	e028      	b.n	80011be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a27      	ldr	r2, [pc, #156]	; (800120c <DMA_DeInit+0x194>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d104      	bne.n	800117e <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8001174:	4b22      	ldr	r3, [pc, #136]	; (8001200 <DMA_DeInit+0x188>)
 8001176:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800117a:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800117c:	e01f      	b.n	80011be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a23      	ldr	r2, [pc, #140]	; (8001210 <DMA_DeInit+0x198>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d103      	bne.n	800118e <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8001186:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <DMA_DeInit+0x188>)
 8001188:	4a16      	ldr	r2, [pc, #88]	; (80011e4 <DMA_DeInit+0x16c>)
 800118a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800118c:	e017      	b.n	80011be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a20      	ldr	r2, [pc, #128]	; (8001214 <DMA_DeInit+0x19c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d103      	bne.n	800119e <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <DMA_DeInit+0x188>)
 8001198:	4a14      	ldr	r2, [pc, #80]	; (80011ec <DMA_DeInit+0x174>)
 800119a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800119c:	e00f      	b.n	80011be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <DMA_DeInit+0x1a0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d103      	bne.n	80011ae <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <DMA_DeInit+0x188>)
 80011a8:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <DMA_DeInit+0x17c>)
 80011aa:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011ac:	e007      	b.n	80011be <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a1a      	ldr	r2, [pc, #104]	; (800121c <DMA_DeInit+0x1a4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d103      	bne.n	80011be <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <DMA_DeInit+0x188>)
 80011b8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80011bc:	60da      	str	r2, [r3, #12]
    }
  }
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40026010 	.word	0x40026010
 80011d0:	40026000 	.word	0x40026000
 80011d4:	40026028 	.word	0x40026028
 80011d8:	40026040 	.word	0x40026040
 80011dc:	40026058 	.word	0x40026058
 80011e0:	40026070 	.word	0x40026070
 80011e4:	2000003d 	.word	0x2000003d
 80011e8:	40026088 	.word	0x40026088
 80011ec:	20000f40 	.word	0x20000f40
 80011f0:	400260a0 	.word	0x400260a0
 80011f4:	203d0000 	.word	0x203d0000
 80011f8:	400260b8 	.word	0x400260b8
 80011fc:	40026410 	.word	0x40026410
 8001200:	40026400 	.word	0x40026400
 8001204:	40026428 	.word	0x40026428
 8001208:	40026440 	.word	0x40026440
 800120c:	40026458 	.word	0x40026458
 8001210:	40026470 	.word	0x40026470
 8001214:	40026488 	.word	0x40026488
 8001218:	400264a0 	.word	0x400264a0
 800121c:	400264b8 	.word	0x400264b8

08001220 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <DMA_Init+0xac>)
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800124a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001256:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001262:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800126e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001274:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f023 0307 	bic.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4313      	orrs	r3, r2
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	691a      	ldr	r2, [r3, #16]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60da      	str	r2, [r3, #12]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	f01c803f 	.word	0xf01c803f

080012d0 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop

08001340 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d006      	beq.n	8001360 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f043 0201 	orr.w	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800135e:	e005      	b.n	800136c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 0201 	bic.w	r2, r3, #1
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	601a      	str	r2, [r3, #0]
  }
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e001      	b.n	800139a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a15      	ldr	r2, [pc, #84]	; (8001414 <DMA_GetFlagStatus+0x6c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d802      	bhi.n	80013c8 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <DMA_GetFlagStatus+0x70>)
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	e001      	b.n	80013cc <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <DMA_GetFlagStatus+0x74>)
 80013ca:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	e002      	b.n	80013e4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80013ea:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80013fa:	2301      	movs	r3, #1
 80013fc:	75fb      	strb	r3, [r7, #23]
 80013fe:	e001      	b.n	8001404 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001404:	7dfb      	ldrb	r3, [r7, #23]
}
 8001406:	4618      	mov	r0, r3
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	4002640f 	.word	0x4002640f
 8001418:	40026000 	.word	0x40026000
 800141c:	40026400 	.word	0x40026400

08001420 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a10      	ldr	r2, [pc, #64]	; (8001470 <DMA_ClearFlag+0x50>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d802      	bhi.n	8001438 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <DMA_ClearFlag+0x54>)
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	e001      	b.n	800143c <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <DMA_ClearFlag+0x58>)
 800143a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d007      	beq.n	8001456 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800144c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8001454:	e006      	b.n	8001464 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800145c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	6093      	str	r3, [r2, #8]
  }    
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	4002640f 	.word	0x4002640f
 8001474:	40026000 	.word	0x40026000
 8001478:	40026400 	.word	0x40026400

0800147c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	4613      	mov	r3, r2
 8001488:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00f      	beq.n	80014b4 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	e005      	b.n	80014b4 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2b80      	cmp	r3, #128	; 0x80
 80014b8:	d014      	beq.n	80014e4 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d008      	beq.n	80014d2 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f003 031e 	and.w	r3, r3, #30
 80014ca:	431a      	orrs	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80014d0:	e008      	b.n	80014e4 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	f003 031e 	and.w	r3, r3, #30
 80014dc:	43db      	mvns	r3, r3
 80014de:	401a      	ands	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a22      	ldr	r2, [pc, #136]	; (8001594 <DMA_GetITStatus+0xa4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d802      	bhi.n	8001514 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800150e:	4b22      	ldr	r3, [pc, #136]	; (8001598 <DMA_GetITStatus+0xa8>)
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	e001      	b.n	8001518 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <DMA_GetITStatus+0xac>)
 8001516:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800151e:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00a      	beq.n	800153c <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	0adb      	lsrs	r3, r3, #11
 800152a:	f003 031e 	and.w	r3, r3, #30
 800152e:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4013      	ands	r3, r2
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	e004      	b.n	8001546 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001544:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e002      	b.n	800155e <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001564:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001568:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <DMA_GetITStatus+0x90>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800157a:	2301      	movs	r3, #1
 800157c:	75fb      	strb	r3, [r7, #23]
 800157e:	e001      	b.n	8001584 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8001580:	2300      	movs	r3, #0
 8001582:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8001584:	7dfb      	ldrb	r3, [r7, #23]
}
 8001586:	4618      	mov	r0, r3
 8001588:	371c      	adds	r7, #28
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	4002640f 	.word	0x4002640f
 8001598:	40026000 	.word	0x40026000
 800159c:	40026400 	.word	0x40026400

080015a0 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <DMA_ClearITPendingBit+0x50>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d802      	bhi.n	80015b8 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <DMA_ClearITPendingBit+0x54>)
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e001      	b.n	80015bc <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <DMA_ClearITPendingBit+0x58>)
 80015ba:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d007      	beq.n	80015d6 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80015cc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 80015d4:	e006      	b.n	80015e4 <DMA_ClearITPendingBit+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80015dc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	6093      	str	r3, [r2, #8]
  }   
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	4002640f 	.word	0x4002640f
 80015f4:	40026000 	.word	0x40026000
 80015f8:	40026400 	.word	0x40026400

080015fc <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8001600:	2101      	movs	r1, #1
 8001602:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001606:	f7ff fc69 	bl	8000edc <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 800160a:	2100      	movs	r1, #0
 800160c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001610:	f7ff fc64 	bl	8000edc <RCC_APB1PeriphResetCmd>
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <DAC_Init+0x64>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8001630:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4013      	ands	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001650:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001656:	4313      	orrs	r3, r2
 8001658:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <DAC_Init+0x64>)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6013      	str	r3, [r2, #0]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40007400 	.word	0x40007400

08001680 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8001692:	490d      	ldr	r1, [pc, #52]	; (80016c8 <DAC_Cmd+0x48>)
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <DAC_Cmd+0x48>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	2001      	movs	r0, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	fa00 f303 	lsl.w	r3, r0, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 80016a4:	e009      	b.n	80016ba <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 80016a6:	4908      	ldr	r1, [pc, #32]	; (80016c8 <DAC_Cmd+0x48>)
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <DAC_Cmd+0x48>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2001      	movs	r0, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	fa00 f303 	lsl.w	r3, r0, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	4013      	ands	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
  }
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40007400 	.word	0x40007400

080016cc <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <DAC_SetChannel1Data+0x34>)
 80016de:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	3308      	adds	r3, #8
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	461a      	mov	r2, r3
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	6013      	str	r3, [r2, #0]
}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40007400 	.word	0x40007400

08001704 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00a      	beq.n	800172c <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8001716:	490e      	ldr	r1, [pc, #56]	; (8001750 <DAC_DMACmd+0x4c>)
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <DAC_DMACmd+0x4c>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	fa00 f303 	lsl.w	r3, r0, r3
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 800172a:	e00a      	b.n	8001742 <DAC_DMACmd+0x3e>
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 800172c:	4908      	ldr	r1, [pc, #32]	; (8001750 <DAC_DMACmd+0x4c>)
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <DAC_DMACmd+0x4c>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	fa00 f303 	lsl.w	r3, r0, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	4013      	ands	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
  }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40007400 	.word	0x40007400

08001754 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8001758:	2101      	movs	r1, #1
 800175a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800175e:	f7ff fbdd 	bl	8000f1c <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8001762:	2100      	movs	r1, #0
 8001764:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001768:	f7ff fbd8 	bl	8000f1c <RCC_APB2PeriphResetCmd>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800178e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001792:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	791b      	ldrb	r3, [r3, #4]
 8001798:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800179e:	4313      	orrs	r3, r2
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <ADC_Init+0xa8>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80017c2:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80017c8:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	795b      	ldrb	r3, [r3, #5]
 80017ce:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80017d0:	4313      	orrs	r3, r2
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80017ea:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	7d1b      	ldrb	r3, [r3, #20]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	7afb      	ldrb	r3, [r7, #11]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80017fa:	7afb      	ldrb	r3, [r7, #11]
 80017fc:	051b      	lsls	r3, r3, #20
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4313      	orrs	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	c0fff7fd 	.word	0xc0fff7fd

0800181c <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <ADC_CommonInit+0x48>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <ADC_CommonInit+0x4c>)
 8001832:	4013      	ands	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800183e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8001844:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 800184a:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <ADC_CommonInit+0x48>)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6053      	str	r3, [r2, #4]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40012300 	.word	0x40012300
 8001868:	fffc30e0 	.word	0xfffc30e0

0800186c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d006      	beq.n	800188c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f043 0201 	orr.w	r2, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 800188a:	e005      	b.n	8001898 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f023 0201 	bic.w	r2, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	609a      	str	r2, [r3, #8]
  }
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	4608      	mov	r0, r1
 80018ae:	4611      	mov	r1, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	4603      	mov	r3, r0
 80018b4:	70fb      	strb	r3, [r7, #3]
 80018b6:	460b      	mov	r3, r1
 80018b8:	70bb      	strb	r3, [r7, #2]
 80018ba:	4613      	mov	r3, r2
 80018bc:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	2b09      	cmp	r3, #9
 80018ca:	d923      	bls.n	8001914 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	f1a3 020a 	sub.w	r2, r3, #10
 80018d8:	4613      	mov	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4413      	add	r3, r2
 80018de:	2207      	movs	r2, #7
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4013      	ands	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80018f0:	7879      	ldrb	r1, [r7, #1]
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	f1a3 020a 	sub.w	r2, r3, #10
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	4313      	orrs	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	e01e      	b.n	8001952 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800191a:	78fa      	ldrb	r2, [r7, #3]
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	2207      	movs	r2, #7
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	43db      	mvns	r3, r3
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001934:	7879      	ldrb	r1, [r7, #1]
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	4313      	orrs	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8001952:	78bb      	ldrb	r3, [r7, #2]
 8001954:	2b06      	cmp	r3, #6
 8001956:	d821      	bhi.n	800199c <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800195e:	78bb      	ldrb	r3, [r7, #2]
 8001960:	1e5a      	subs	r2, r3, #1
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	221f      	movs	r2, #31
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	43db      	mvns	r3, r3
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4013      	ands	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800197a:	78f9      	ldrb	r1, [r7, #3]
 800197c:	78bb      	ldrb	r3, [r7, #2]
 800197e:	1e5a      	subs	r2, r3, #1
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	4313      	orrs	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800199a:	e047      	b.n	8001a2c <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 800199c:	78bb      	ldrb	r3, [r7, #2]
 800199e:	2b0c      	cmp	r3, #12
 80019a0:	d821      	bhi.n	80019e6 <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80019a8:	78bb      	ldrb	r3, [r7, #2]
 80019aa:	1fda      	subs	r2, r3, #7
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	221f      	movs	r2, #31
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	43db      	mvns	r3, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4013      	ands	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80019c4:	78f9      	ldrb	r1, [r7, #3]
 80019c6:	78bb      	ldrb	r3, [r7, #2]
 80019c8:	1fda      	subs	r2, r3, #7
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4313      	orrs	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80019e4:	e022      	b.n	8001a2c <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80019ec:	78bb      	ldrb	r3, [r7, #2]
 80019ee:	f1a3 020d 	sub.w	r2, r3, #13
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	221f      	movs	r2, #31
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4013      	ands	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8001a0a:	78f9      	ldrb	r1, [r7, #3]
 8001a0c:	78bb      	ldrb	r3, [r7, #2]
 8001a0e:	f1a3 020d 	sub.w	r2, r3, #13
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8001a56:	e005      	b.n	8001a64 <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	609a      	str	r2, [r3, #8]
  }
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d006      	beq.n	8001a90 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8001a8e:	e005      	b.n	8001a9c <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73bb      	strb	r3, [r7, #14]
 8001ab8:	230f      	movs	r3, #15
 8001aba:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	78db      	ldrb	r3, [r3, #3]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d038      	beq.n	8001b36 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001ac4:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <NVIC_Init+0xbc>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	f1c3 0304 	rsb	r3, r3, #4
 8001ad8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8001ada:	7b7a      	ldrb	r2, [r7, #13]
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	fa42 f303 	asr.w	r3, r2, r3
 8001ae2:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	785b      	ldrb	r3, [r3, #1]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	7bbb      	ldrb	r3, [r7, #14]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	789a      	ldrb	r2, [r3, #2]
 8001af6:	7b7b      	ldrb	r3, [r7, #13]
 8001af8:	4013      	ands	r3, r2
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001b08:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <NVIC_Init+0xc0>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001b16:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <NVIC_Init+0xc0>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	095b      	lsrs	r3, r3, #5
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	f003 031f 	and.w	r3, r3, #31
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001b30:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001b34:	e00f      	b.n	8001b56 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001b36:	490c      	ldr	r1, [pc, #48]	; (8001b68 <NVIC_Init+0xc0>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	095b      	lsrs	r3, r3, #5
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001b4e:	f100 0320 	add.w	r3, r0, #32
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00
 8001b68:	e000e100 	.word	0xe000e100

08001b6c <__libc_init_array>:
 8001b6c:	b570      	push	{r4, r5, r6, lr}
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <__libc_init_array+0x3c>)
 8001b70:	4c0e      	ldr	r4, [pc, #56]	; (8001bac <__libc_init_array+0x40>)
 8001b72:	1ae4      	subs	r4, r4, r3
 8001b74:	10a4      	asrs	r4, r4, #2
 8001b76:	2500      	movs	r5, #0
 8001b78:	461e      	mov	r6, r3
 8001b7a:	42a5      	cmp	r5, r4
 8001b7c:	d004      	beq.n	8001b88 <__libc_init_array+0x1c>
 8001b7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b82:	4798      	blx	r3
 8001b84:	3501      	adds	r5, #1
 8001b86:	e7f8      	b.n	8001b7a <__libc_init_array+0xe>
 8001b88:	f000 f816 	bl	8001bb8 <_init>
 8001b8c:	4c08      	ldr	r4, [pc, #32]	; (8001bb0 <__libc_init_array+0x44>)
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <__libc_init_array+0x48>)
 8001b90:	1ae4      	subs	r4, r4, r3
 8001b92:	10a4      	asrs	r4, r4, #2
 8001b94:	2500      	movs	r5, #0
 8001b96:	461e      	mov	r6, r3
 8001b98:	42a5      	cmp	r5, r4
 8001b9a:	d004      	beq.n	8001ba6 <__libc_init_array+0x3a>
 8001b9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ba0:	4798      	blx	r3
 8001ba2:	3501      	adds	r5, #1
 8001ba4:	e7f8      	b.n	8001b98 <__libc_init_array+0x2c>
 8001ba6:	bd70      	pop	{r4, r5, r6, pc}
 8001ba8:	08001be8 	.word	0x08001be8
 8001bac:	08001be8 	.word	0x08001be8
 8001bb0:	08001bec 	.word	0x08001bec
 8001bb4:	08001be8 	.word	0x08001be8

08001bb8 <_init>:
 8001bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bba:	bf00      	nop
 8001bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bbe:	bc08      	pop	{r3}
 8001bc0:	469e      	mov	lr, r3
 8001bc2:	4770      	bx	lr

08001bc4 <_fini>:
 8001bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc6:	bf00      	nop
 8001bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bca:	bc08      	pop	{r3}
 8001bcc:	469e      	mov	lr, r3
 8001bce:	4770      	bx	lr
