
Vocoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002620  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080027c4  080027c4  000127c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080027c8  080027c8  000127c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  20000000  080027cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
  7 .bss          000000b0  2000008c  2000008c  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000013c  2000013c  0002008c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008ade  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000013e1  00000000  00000000  00028b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000bc8  00000000  00000000  00029f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000af0  00000000  00000000  0002ab48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000039e6  00000000  00000000  0002b638  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000038d4  00000000  00000000  0002f01e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000328f2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003428  00000000  00000000  00032970  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00035d98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002790 	.word	0x08002790

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	08002790 	.word	0x08002790

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4a16      	ldr	r2, [pc, #88]	; (8000a9c <SystemInit+0x60>)
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <SystemInit+0x60>)
 8000a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a50:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <SystemInit+0x64>)
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <SystemInit+0x64>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <SystemInit+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <SystemInit+0x64>)
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <SystemInit+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a70:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <SystemInit+0x64>)
 8000a74:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <SystemInit+0x68>)
 8000a76:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a78:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <SystemInit+0x64>)
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <SystemInit+0x64>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <SystemInit+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000a8a:	f000 f80d 	bl	8000aa8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a8e:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <SystemInit+0x60>)
 8000a90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a94:	609a      	str	r2, [r3, #8]
#endif
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	24003010 	.word	0x24003010

08000aa8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000ab6:	4a36      	ldr	r2, [pc, #216]	; (8000b90 <SetSysClock+0xe8>)
 8000ab8:	4b35      	ldr	r3, [pc, #212]	; (8000b90 <SetSysClock+0xe8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ac0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000ac2:	4b33      	ldr	r3, [pc, #204]	; (8000b90 <SetSysClock+0xe8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aca:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d103      	bne.n	8000ae0 <SetSysClock+0x38>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000ade:	d1f0      	bne.n	8000ac2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000ae0:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <SetSysClock+0xe8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d002      	beq.n	8000af2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000aec:	2301      	movs	r3, #1
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	e001      	b.n	8000af6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d142      	bne.n	8000b82 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000afc:	4a24      	ldr	r2, [pc, #144]	; (8000b90 <SetSysClock+0xe8>)
 8000afe:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <SetSysClock+0xe8>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000b08:	4a22      	ldr	r2, [pc, #136]	; (8000b94 <SetSysClock+0xec>)
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <SetSysClock+0xec>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b12:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000b14:	4a1e      	ldr	r2, [pc, #120]	; (8000b90 <SetSysClock+0xe8>)
 8000b16:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <SetSysClock+0xe8>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000b1c:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <SetSysClock+0xe8>)
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <SetSysClock+0xe8>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b26:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000b28:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <SetSysClock+0xe8>)
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <SetSysClock+0xe8>)
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000b32:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <SetSysClock+0xe8>)
 8000b36:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <SetSysClock+0xf0>)
 8000b38:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000b3a:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <SetSysClock+0xe8>)
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <SetSysClock+0xe8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b44:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000b46:	bf00      	nop
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <SetSysClock+0xe8>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0f9      	beq.n	8000b48 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SetSysClock+0xf4>)
 8000b56:	f240 6205 	movw	r2, #1541	; 0x605
 8000b5a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000b5c:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <SetSysClock+0xe8>)
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <SetSysClock+0xe8>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	f023 0303 	bic.w	r3, r3, #3
 8000b66:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000b68:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <SetSysClock+0xe8>)
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <SetSysClock+0xe8>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f043 0302 	orr.w	r3, r3, #2
 8000b72:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000b74:	bf00      	nop
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SetSysClock+0xe8>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	f003 030c 	and.w	r3, r3, #12
 8000b7e:	2b08      	cmp	r3, #8
 8000b80:	d1f9      	bne.n	8000b76 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40007000 	.word	0x40007000
 8000b98:	07405408 	.word	0x07405408
 8000b9c:	40023c00 	.word	0x40023c00

08000ba0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000bb4:	e7fe      	b.n	8000bb4 <HardFault_Handler+0x4>
 8000bb6:	bf00      	nop

08000bb8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>
 8000bbe:	bf00      	nop

08000bc0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000bc4:	e7fe      	b.n	8000bc4 <BusFault_Handler+0x4>
 8000bc6:	bf00      	nop

08000bc8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>
 8000bce:	bf00      	nop

08000bd0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c16:	e003      	b.n	8000c20 <LoopCopyDataInit>

08000c18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c1e:	3104      	adds	r1, #4

08000c20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c20:	480b      	ldr	r0, [pc, #44]	; (8000c50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c28:	d3f6      	bcc.n	8000c18 <CopyDataInit>
  ldr  r2, =_sbss
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c2c:	e002      	b.n	8000c34 <LoopFillZerobss>

08000c2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c30:	f842 3b04 	str.w	r3, [r2], #4

08000c34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c38:	d3f9      	bcc.n	8000c2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c3a:	f7ff feff 	bl	8000a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f001 fcfb 	bl	8002638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c42:	f000 faef 	bl	8001224 <main>
  bx  lr    
 8000c46:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c48:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000c4c:	080027cc 	.word	0x080027cc
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c54:	2000008c 	.word	0x2000008c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000c58:	2000008c 	.word	0x2000008c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c5c:	2000013c 	.word	0x2000013c

08000c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC_IRQHandler>
	...

08000c64 <initAudioOutDAC>:
void initAudioOutTIM(void);
void initAudioOutNVIC(void);
void initAudioOutDMA(uint16_t* buffer, uint32_t size);

void initAudioOutDAC(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000c70:	f000 fe40 	bl	80018f4 <RCC_APB1PeriphClockCmd>
	DAC_InitTypeDef DACStruct;
	DACStruct.DAC_Trigger = DAC_Trigger_T4_TRGO;
 8000c74:	232c      	movs	r3, #44	; 0x2c
 8000c76:	603b      	str	r3, [r7, #0]
	DACStruct.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
	DACStruct.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
	DAC_Init(DAC_Channel_1, &DACStruct);
 8000c80:	463b      	mov	r3, r7
 8000c82:	4619      	mov	r1, r3
 8000c84:	2000      	movs	r0, #0
 8000c86:	f001 fa2d 	bl	80020e4 <DAC_Init>
	DAC_DMACmd(DAC_Channel_1, ENABLE);
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f001 fa9f 	bl	80021d0 <DAC_DMACmd>
	DAC_Cmd(DAC_Channel_1, ENABLE);
 8000c92:	2101      	movs	r1, #1
 8000c94:	2000      	movs	r0, #0
 8000c96:	f001 fa59 	bl	800214c <DAC_Cmd>
}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop

08000ca4 <initAudioOutGPIO>:

void initAudioOutGPIO(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000caa:	2101      	movs	r1, #1
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 fe01 	bl	80018b4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef GPIOStruct;
	GPIOStruct.GPIO_Pin = GPIO_Pin_4;//channel 1
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	603b      	str	r3, [r7, #0]
	GPIOStruct.GPIO_Speed = GPIO_Mode_AN;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	717b      	strb	r3, [r7, #5]
	GPIOStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	717b      	strb	r3, [r7, #5]
	GPIOStruct.GPIO_OType = GPIO_OType_PP;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	71bb      	strb	r3, [r7, #6]
	GPIOStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIOStruct);
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <initAudioOutGPIO+0x34>)
 8000ccc:	f000 fe92 	bl	80019f4 <GPIO_Init>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40020000 	.word	0x40020000

08000cdc <initAudioOutTIM>:

//Timer 4 Runs at 84MHz - Using 16000Hz sampling rate
void initAudioOutTIM(void)
{ //DO NOT USE TIMER 6 - ITS TRGO DOES NOT EXIST - IT SEEMS TO USE TIMER2's instead
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	2004      	movs	r0, #4
 8000ce6:	f000 fe05 	bl	80018f4 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseInitTypeDef TimerStruct;
	TimerStruct.TIM_Period = 5250-1;
 8000cea:	f241 4381 	movw	r3, #5249	; 0x1481
 8000cee:	60bb      	str	r3, [r7, #8]
	TimerStruct.TIM_Prescaler = 1-1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	80bb      	strh	r3, [r7, #4]
	TimerStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	81bb      	strh	r3, [r7, #12]
	TimerStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseInit(TIM4, &TimerStruct);
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4807      	ldr	r0, [pc, #28]	; (8000d20 <initAudioOutTIM+0x44>)
 8000d02:	f000 fcf5 	bl	80016f0 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM4, TIM_TRGOSource_Update);
 8000d06:	2120      	movs	r1, #32
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <initAudioOutTIM+0x44>)
 8000d0a:	f000 fd8b 	bl	8001824 <TIM_SelectOutputTrigger>
	TIM_Cmd(TIM4, ENABLE);
 8000d0e:	2101      	movs	r1, #1
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <initAudioOutTIM+0x44>)
 8000d12:	f000 fd67 	bl	80017e4 <TIM_Cmd>
}
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40000800 	.word	0x40000800

08000d24 <initAudioOutNVIC>:

void initAudioOutNVIC(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVICStruct;
	NVICStruct.NVIC_IRQChannel = DMA1_Stream5_IRQn;
 8000d2a:	2310      	movs	r3, #16
 8000d2c:	713b      	strb	r3, [r7, #4]
	NVICStruct.NVIC_IRQChannelCmd = ENABLE;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	71fb      	strb	r3, [r7, #7]
	NVICStruct.NVIC_IRQChannelPreemptionPriority=0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	717b      	strb	r3, [r7, #5]
	NVICStruct.NVIC_IRQChannelSubPriority=0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVICStruct);
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f001 fc19 	bl	8002574 <NVIC_Init>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop

08000d4c <initAudioOutDMA>:

void initAudioOutDMA(uint16_t* buffer, uint32_t size)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b092      	sub	sp, #72	; 0x48
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 8000d56:	2101      	movs	r1, #1
 8000d58:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000d5c:	f000 fdaa 	bl	80018b4 <RCC_AHB1PeriphClockCmd>
	DMA_DeInit(DMA1_Stream5);
 8000d60:	481d      	ldr	r0, [pc, #116]	; (8000dd8 <initAudioOutDMA+0x8c>)
 8000d62:	f000 feef 	bl	8001b44 <DMA_DeInit>
	DMA_InitTypeDef DMAStruct;
	DMA_StructInit(&DMAStruct);
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 f816 	bl	8001d9c <DMA_StructInit>
	DMAStruct.DMA_Channel = DMA_Channel_7;
 8000d70:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8000d74:	60fb      	str	r3, [r7, #12]
	DMAStruct.DMA_PeripheralBaseAddr =(uint32_t)(DAC_BASE + 0x08);
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <initAudioOutDMA+0x90>)
 8000d78:	613b      	str	r3, [r7, #16]
	DMAStruct.DMA_Memory0BaseAddr = (uint32_t)(buffer);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	617b      	str	r3, [r7, #20]
	DMAStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8000d7e:	2340      	movs	r3, #64	; 0x40
 8000d80:	61bb      	str	r3, [r7, #24]
	DMAStruct.DMA_BufferSize = size;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	61fb      	str	r3, [r7, #28]
	DMAStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8000d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMAStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
	DMAStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000d92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
	DMAStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
	DMAStruct.DMA_Mode = DMA_Mode_Normal;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
	DMAStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8000da0:	2300      	movs	r3, #0
 8000da2:	63bb      	str	r3, [r7, #56]	; 0x38
	DMAStruct.DMA_Priority = DMA_Priority_High;
 8000da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
	DMAStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8000daa:	2300      	movs	r3, #0
 8000dac:	643b      	str	r3, [r7, #64]	; 0x40
	DMAStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8000dae:	2300      	movs	r3, #0
 8000db0:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_ITConfig(DMA1_Stream5, DMA_IT_TC, ENABLE);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2110      	movs	r1, #16
 8000db6:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <initAudioOutDMA+0x8c>)
 8000db8:	f001 f8c6 	bl	8001f48 <DMA_ITConfig>
	DMA_Init(DMA1_Stream5, &DMAStruct);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <initAudioOutDMA+0x8c>)
 8000dc4:	f000 ff92 	bl	8001cec <DMA_Init>
	DMA_Cmd(DMA1_Stream5, ENABLE);
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <initAudioOutDMA+0x8c>)
 8000dcc:	f001 f81e 	bl	8001e0c <DMA_Cmd>
}
 8000dd0:	bf00      	nop
 8000dd2:	3748      	adds	r7, #72	; 0x48
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40026088 	.word	0x40026088
 8000ddc:	40007408 	.word	0x40007408

08000de0 <initAudioOut>:

void initAudioOut(uint16_t* buffer, uint32_t size)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
	DAC_DeInit();
 8000dea:	f001 f96d 	bl	80020c8 <DAC_DeInit>
	TIM_DeInit(TIM4);
 8000dee:	480b      	ldr	r0, [pc, #44]	; (8000e1c <initAudioOut+0x3c>)
 8000df0:	f000 fb9e 	bl	8001530 <TIM_DeInit>
	DMA_DeInit(DMA1_Stream5);
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <initAudioOut+0x40>)
 8000df6:	f000 fea5 	bl	8001b44 <DMA_DeInit>
	initAudioOutDAC();
 8000dfa:	f7ff ff33 	bl	8000c64 <initAudioOutDAC>
	initAudioOutGPIO();
 8000dfe:	f7ff ff51 	bl	8000ca4 <initAudioOutGPIO>
	initAudioOutTIM();
 8000e02:	f7ff ff6b 	bl	8000cdc <initAudioOutTIM>
	initAudioOutNVIC();
 8000e06:	f7ff ff8d 	bl	8000d24 <initAudioOutNVIC>
	initAudioOutDMA(buffer,size);
 8000e0a:	6839      	ldr	r1, [r7, #0]
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff9d 	bl	8000d4c <initAudioOutDMA>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40000800 	.word	0x40000800
 8000e20:	40026088 	.word	0x40026088

08000e24 <initAudioInGPIO>:
void initAudioInNVIC(void);
void initAudioInDMA(uint16_t* buffer, uint32_t size);


void initAudioInGPIO(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	2004      	movs	r0, #4
 8000e2e:	f000 fd41 	bl	80018b4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIOStruct;
	GPIOStruct.GPIO_Mode = GPIO_Mode_AN;
 8000e32:	2303      	movs	r3, #3
 8000e34:	713b      	strb	r3, [r7, #4]
	GPIOStruct.GPIO_Pin = GPIO_Pin_2;
 8000e36:	2304      	movs	r3, #4
 8000e38:	603b      	str	r3, [r7, #0]
	GPIOStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	71fb      	strb	r3, [r7, #7]
	GPIOStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOC, &GPIOStruct);
 8000e42:	463b      	mov	r3, r7
 8000e44:	4619      	mov	r1, r3
 8000e46:	4803      	ldr	r0, [pc, #12]	; (8000e54 <initAudioInGPIO+0x30>)
 8000e48:	f000 fdd4 	bl	80019f4 <GPIO_Init>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40020800 	.word	0x40020800

08000e58 <initAudioInTIM>:

//Timer 2 Runs at 84MHz - Using 16000Hz sampling rate
void initAudioInTIM(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 8000e5e:	2101      	movs	r1, #1
 8000e60:	2001      	movs	r0, #1
 8000e62:	f000 fd47 	bl	80018f4 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef TimerStruct;
	TimerStruct.TIM_Period = 5250-1;
 8000e66:	f241 4381 	movw	r3, #5249	; 0x1481
 8000e6a:	60bb      	str	r3, [r7, #8]
	TimerStruct.TIM_Prescaler = 1-1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	80bb      	strh	r3, [r7, #4]
	TimerStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000e70:	2300      	movs	r3, #0
 8000e72:	80fb      	strh	r3, [r7, #6]
	TimerStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM2, &TimerStruct);
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e80:	f000 fc36 	bl	80016f0 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM2,TIM_TRGOSource_Update);
 8000e84:	2120      	movs	r1, #32
 8000e86:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e8a:	f000 fccb 	bl	8001824 <TIM_SelectOutputTrigger>
	TIM_Cmd(TIM2, ENABLE);
 8000e8e:	2101      	movs	r1, #1
 8000e90:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e94:	f000 fca6 	bl	80017e4 <TIM_Cmd>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <initAudioInADC>:

void initAudioInADC(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000eac:	f000 fd42 	bl	8001934 <RCC_APB2PeriphClockCmd>
	ADC_CommonInitTypeDef ADCCommonStruct;
	ADCCommonStruct.ADC_Mode = ADC_Mode_Independent;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
	ADCCommonStruct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
	ADCCommonStruct.ADC_Prescaler = ADC_Prescaler_Div2;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
	ADCCommonStruct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
	ADC_CommonInit(&ADCCommonStruct);
 8000ec0:	f107 0318 	add.w	r3, r7, #24
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f001 fa0f 	bl	80022e8 <ADC_CommonInit>

	ADC_InitTypeDef ADCStruct;
	ADCStruct.ADC_ContinuousConvMode = DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	717b      	strb	r3, [r7, #5]
	ADCStruct.ADC_DataAlign = ADC_DataAlign_Right;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
	ADCStruct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_TRGO;
 8000ed2:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000ed6:	60fb      	str	r3, [r7, #12]
	ADCStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 8000ed8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000edc:	60bb      	str	r3, [r7, #8]
	ADCStruct.ADC_NbrOfConversion = 1;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	753b      	strb	r3, [r7, #20]
	ADCStruct.ADC_Resolution = ADC_Resolution_12b;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	603b      	str	r3, [r7, #0]
	ADCStruct.ADC_ScanConvMode = DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	713b      	strb	r3, [r7, #4]
	ADC_Init(ADC1, &ADCStruct);
 8000eea:	463b      	mov	r3, r7
 8000eec:	4619      	mov	r1, r3
 8000eee:	480c      	ldr	r0, [pc, #48]	; (8000f20 <initAudioInADC+0x80>)
 8000ef0:	f001 f9a4 	bl	800223c <ADC_Init>

	ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 1, ADC_SampleTime_15Cycles);
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	210c      	movs	r1, #12
 8000efa:	4809      	ldr	r0, [pc, #36]	; (8000f20 <initAudioInADC+0x80>)
 8000efc:	f001 fa38 	bl	8002370 <ADC_RegularChannelConfig>
	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
 8000f00:	2101      	movs	r1, #1
 8000f02:	4807      	ldr	r0, [pc, #28]	; (8000f20 <initAudioInADC+0x80>)
 8000f04:	f001 fb1a 	bl	800253c <ADC_DMARequestAfterLastTransferCmd>
	ADC_DMACmd(ADC1, ENABLE);
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <initAudioInADC+0x80>)
 8000f0c:	f001 fafa 	bl	8002504 <ADC_DMACmd>
	ADC_Cmd(ADC1, ENABLE);
 8000f10:	2101      	movs	r1, #1
 8000f12:	4803      	ldr	r0, [pc, #12]	; (8000f20 <initAudioInADC+0x80>)
 8000f14:	f001 fa10 	bl	8002338 <ADC_Cmd>
}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	; 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40012000 	.word	0x40012000

08000f24 <initAudioInNVIC>:

void initAudioInNVIC(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVICStruct;
	NVICStruct.NVIC_IRQChannel = DMA2_Stream0_IRQn;
 8000f2a:	2338      	movs	r3, #56	; 0x38
 8000f2c:	713b      	strb	r3, [r7, #4]
	NVICStruct.NVIC_IRQChannelCmd = ENABLE;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	71fb      	strb	r3, [r7, #7]
	NVICStruct.NVIC_IRQChannelPreemptionPriority=0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	717b      	strb	r3, [r7, #5]
	NVICStruct.NVIC_IRQChannelSubPriority=0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVICStruct);
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f001 fb19 	bl	8002574 <NVIC_Init>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop

08000f4c <initAudioInDMA>:

void initAudioInDMA(uint16_t* buffer, uint32_t size)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b092      	sub	sp, #72	; 0x48
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 ,ENABLE);
 8000f56:	2101      	movs	r1, #1
 8000f58:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000f5c:	f000 fcaa 	bl	80018b4 <RCC_AHB1PeriphClockCmd>

	DMA_InitTypeDef DMAStruct;
	DMA_DeInit(DMA2_Stream0);
 8000f60:	481b      	ldr	r0, [pc, #108]	; (8000fd0 <initAudioInDMA+0x84>)
 8000f62:	f000 fdef 	bl	8001b44 <DMA_DeInit>
	DMAStruct.DMA_Channel = DMA_Channel_0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
	DMAStruct.DMA_PeripheralBaseAddr = (uint32_t)(&ADC1->DR);
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <initAudioInDMA+0x88>)
 8000f6c:	613b      	str	r3, [r7, #16]
	DMAStruct.DMA_Memory0BaseAddr = (uint32_t)(buffer);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	617b      	str	r3, [r7, #20]
	DMAStruct.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
	DMAStruct.DMA_BufferSize = size;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	61fb      	str	r3, [r7, #28]
	DMAStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8000f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMAStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
	DMAStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000f86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
	DMAStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
	DMAStruct.DMA_Mode = DMA_Mode_Normal;
 8000f90:	2300      	movs	r3, #0
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
	DMAStruct.DMA_Priority = DMA_Priority_High;
 8000f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
	DMAStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	63bb      	str	r3, [r7, #56]	; 0x38
	DMAStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMAStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	643b      	str	r3, [r7, #64]	; 0x40
	DMAStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init(DMA2_Stream0, &DMAStruct);
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <initAudioInDMA+0x84>)
 8000fb2:	f000 fe9b 	bl	8001cec <DMA_Init>
	DMA_ITConfig(DMA2_Stream0, DMA_IT_TC, ENABLE);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2110      	movs	r1, #16
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <initAudioInDMA+0x84>)
 8000fbc:	f000 ffc4 	bl	8001f48 <DMA_ITConfig>
	DMA_Cmd(DMA2_Stream0, ENABLE);
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <initAudioInDMA+0x84>)
 8000fc4:	f000 ff22 	bl	8001e0c <DMA_Cmd>
}
 8000fc8:	bf00      	nop
 8000fca:	3748      	adds	r7, #72	; 0x48
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40026410 	.word	0x40026410
 8000fd4:	4001204c 	.word	0x4001204c

08000fd8 <initAudioIn>:

void initAudioIn(uint16_t* buffer, uint32_t size)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	TIM_DeInit(TIM2);
 8000fe2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fe6:	f000 faa3 	bl	8001530 <TIM_DeInit>
	ADC_DeInit();
 8000fea:	f001 f919 	bl	8002220 <ADC_DeInit>
	DMA_DeInit(DMA2_Stream0);
 8000fee:	4809      	ldr	r0, [pc, #36]	; (8001014 <initAudioIn+0x3c>)
 8000ff0:	f000 fda8 	bl	8001b44 <DMA_DeInit>
	initAudioInGPIO();
 8000ff4:	f7ff ff16 	bl	8000e24 <initAudioInGPIO>
	initAudioInTIM();
 8000ff8:	f7ff ff2e 	bl	8000e58 <initAudioInTIM>
	initAudioInADC();
 8000ffc:	f7ff ff50 	bl	8000ea0 <initAudioInADC>
	initAudioInNVIC();
 8001000:	f7ff ff90 	bl	8000f24 <initAudioInNVIC>
	initAudioInDMA(buffer, size);
 8001004:	6839      	ldr	r1, [r7, #0]
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffa0 	bl	8000f4c <initAudioInDMA>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40026410 	.word	0x40026410

08001018 <triCarrier>:
	initAudioOut(buffer,size);
	initAudioOut(buffer,size);
}

void triCarrier(uint16_t* buffer, uint32_t size, uint16_t freq)
{
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	4613      	mov	r3, r2
 8001024:	80fb      	strh	r3, [r7, #6]
	uint32_t i,j;
	float val;
	uint32_t period = (1.0/freq)*16000;
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fa1f 	bl	800046c <__aeabi_i2d>
 800102e:	4603      	mov	r3, r0
 8001030:	460c      	mov	r4, r1
 8001032:	461a      	mov	r2, r3
 8001034:	4623      	mov	r3, r4
 8001036:	f04f 0000 	mov.w	r0, #0
 800103a:	4935      	ldr	r1, [pc, #212]	; (8001110 <triCarrier+0xf8>)
 800103c:	f7ff fba6 	bl	800078c <__aeabi_ddiv>
 8001040:	4603      	mov	r3, r0
 8001042:	460c      	mov	r4, r1
 8001044:	4618      	mov	r0, r3
 8001046:	4621      	mov	r1, r4
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b31      	ldr	r3, [pc, #196]	; (8001114 <triCarrier+0xfc>)
 800104e:	f7ff fa73 	bl	8000538 <__aeabi_dmul>
 8001052:	4603      	mov	r3, r0
 8001054:	460c      	mov	r4, r1
 8001056:	4618      	mov	r0, r3
 8001058:	4621      	mov	r1, r4
 800105a:	f7ff fc7f 	bl	800095c <__aeabi_d2uiz>
 800105e:	4603      	mov	r3, r0
 8001060:	61fb      	str	r3, [r7, #28]
	for(i=0; i<size; i++)
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
 8001066:	e043      	b.n	80010f0 <triCarrier+0xd8>
	{
		val = (1.0*j)/period;
 8001068:	6a38      	ldr	r0, [r7, #32]
 800106a:	f7ff f9ef 	bl	800044c <__aeabi_ui2d>
 800106e:	4604      	mov	r4, r0
 8001070:	460d      	mov	r5, r1
 8001072:	69f8      	ldr	r0, [r7, #28]
 8001074:	f7ff f9ea 	bl	800044c <__aeabi_ui2d>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4620      	mov	r0, r4
 800107e:	4629      	mov	r1, r5
 8001080:	f7ff fb84 	bl	800078c <__aeabi_ddiv>
 8001084:	4603      	mov	r3, r0
 8001086:	460c      	mov	r4, r1
 8001088:	4618      	mov	r0, r3
 800108a:	4621      	mov	r1, r4
 800108c:	f7ff fc86 	bl	800099c <__aeabi_d2f>
 8001090:	4603      	mov	r3, r0
 8001092:	61bb      	str	r3, [r7, #24]
		if(j>period)
 8001094:	6a3a      	ldr	r2, [r7, #32]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	429a      	cmp	r2, r3
 800109a:	d901      	bls.n	80010a0 <triCarrier+0x88>
		{
			j=0;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
		}
		j++;
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	3301      	adds	r3, #1
 80010a4:	623b      	str	r3, [r7, #32]
		//The 1800 in this case is approximately the 1.5V offset on the input signal
		float temp = val * (buffer[i]-1800);
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80010b4:	ee07 3a90 	vmov	s15, r3
 80010b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80010c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c4:	edc7 7a05 	vstr	s15, [r7, #20]
		buffer[i] = temp+1800;
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010d4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001118 <triCarrier+0x100>
 80010d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010e0:	edc7 7a00 	vstr	s15, [r7]
 80010e4:	883a      	ldrh	r2, [r7, #0]
 80010e6:	b292      	uxth	r2, r2
 80010e8:	801a      	strh	r2, [r3, #0]
void triCarrier(uint16_t* buffer, uint32_t size, uint16_t freq)
{
	uint32_t i,j;
	float val;
	uint32_t period = (1.0/freq)*16000;
	for(i=0; i<size; i++)
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	3301      	adds	r3, #1
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
 80010f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d3b7      	bcc.n	8001068 <triCarrier+0x50>
		j++;
		//The 1800 in this case is approximately the 1.5V offset on the input signal
		float temp = val * (buffer[i]-1800);
		buffer[i] = temp+1800;
	}
	initAudioOut(buffer,size);
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f7ff fe70 	bl	8000de0 <initAudioOut>
	initAudioOut(buffer,size);
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff fe6c 	bl	8000de0 <initAudioOut>
}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	; 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bdb0      	pop	{r4, r5, r7, pc}
 8001110:	3ff00000 	.word	0x3ff00000
 8001114:	40cf4000 	.word	0x40cf4000
 8001118:	44e10000 	.word	0x44e10000

0800111c <initButtons>:
void initButtons(void);
int8_t checkButton(uint8_t butno);

void initButtons(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001122:	2101      	movs	r1, #1
 8001124:	2008      	movs	r0, #8
 8001126:	f000 fbc5 	bl	80018b4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef GPIOStruct;
	GPIOStruct.GPIO_Mode = GPIO_Mode_IN;
 800112a:	2300      	movs	r3, #0
 800112c:	713b      	strb	r3, [r7, #4]
	GPIOStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2;
 800112e:	2307      	movs	r3, #7
 8001130:	603b      	str	r3, [r7, #0]
	GPIOStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001132:	2301      	movs	r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
	GPIOStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8001136:	2300      	movs	r3, #0
 8001138:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOD, &GPIOStruct);
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	4803      	ldr	r0, [pc, #12]	; (800114c <initButtons+0x30>)
 8001140:	f000 fc58 	bl	80019f4 <GPIO_Init>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40020c00 	.word	0x40020c00

08001150 <checkButton>:

int8_t checkButton(uint8_t butno)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	if(butno==0)
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d106      	bne.n	800116e <checkButton+0x1e>
	{
		return GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_0);
 8001160:	2101      	movs	r1, #1
 8001162:	4810      	ldr	r0, [pc, #64]	; (80011a4 <checkButton+0x54>)
 8001164:	f000 fcd4 	bl	8001b10 <GPIO_ReadInputDataBit>
 8001168:	4603      	mov	r3, r0
 800116a:	b25b      	sxtb	r3, r3
 800116c:	e015      	b.n	800119a <checkButton+0x4a>
	}
	else if(butno==1)
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d106      	bne.n	8001182 <checkButton+0x32>
	{
		return GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_1);
 8001174:	2102      	movs	r1, #2
 8001176:	480b      	ldr	r0, [pc, #44]	; (80011a4 <checkButton+0x54>)
 8001178:	f000 fcca 	bl	8001b10 <GPIO_ReadInputDataBit>
 800117c:	4603      	mov	r3, r0
 800117e:	b25b      	sxtb	r3, r3
 8001180:	e00b      	b.n	800119a <checkButton+0x4a>
	}
	else if(butno==2)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d106      	bne.n	8001196 <checkButton+0x46>
	{
		return GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_2);
 8001188:	2104      	movs	r1, #4
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <checkButton+0x54>)
 800118c:	f000 fcc0 	bl	8001b10 <GPIO_ReadInputDataBit>
 8001190:	4603      	mov	r3, r0
 8001192:	b25b      	sxtb	r3, r3
 8001194:	e001      	b.n	800119a <checkButton+0x4a>
	}
	else
	{
		return -1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40020c00 	.word	0x40020c00

080011a8 <DMA2_Stream0_IRQHandler>:
uint8_t process = 0;
uint16_t* buffer;
uint32_t size = 64000;

void DMA2_Stream0_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	if (DMA_GetITStatus(DMA2_Stream0, DMA_IT_TCIF0))
 80011ac:	4909      	ldr	r1, [pc, #36]	; (80011d4 <DMA2_Stream0_IRQHandler+0x2c>)
 80011ae:	480a      	ldr	r0, [pc, #40]	; (80011d8 <DMA2_Stream0_IRQHandler+0x30>)
 80011b0:	f000 ff04 	bl	8001fbc <DMA_GetITStatus>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d009      	beq.n	80011ce <DMA2_Stream0_IRQHandler+0x26>
	{
		DMA_ClearITPendingBit(DMA2_Stream0, DMA_IT_TCIF0);
 80011ba:	4906      	ldr	r1, [pc, #24]	; (80011d4 <DMA2_Stream0_IRQHandler+0x2c>)
 80011bc:	4806      	ldr	r0, [pc, #24]	; (80011d8 <DMA2_Stream0_IRQHandler+0x30>)
 80011be:	f000 ff55 	bl	800206c <DMA_ClearITPendingBit>
		inputDone = 1;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <DMA2_Stream0_IRQHandler+0x34>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]
		process = 1;
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <DMA2_Stream0_IRQHandler+0x38>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
	}
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	10008020 	.word	0x10008020
 80011d8:	40026410 	.word	0x40026410
 80011dc:	20000000 	.word	0x20000000
 80011e0:	200000a8 	.word	0x200000a8

080011e4 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	if (DMA_GetITStatus(DMA1_Stream5, DMA_IT_TCIF5))
 80011e8:	490a      	ldr	r1, [pc, #40]	; (8001214 <DMA1_Stream5_IRQHandler+0x30>)
 80011ea:	480b      	ldr	r0, [pc, #44]	; (8001218 <DMA1_Stream5_IRQHandler+0x34>)
 80011ec:	f000 fee6 	bl	8001fbc <DMA_GetITStatus>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <DMA1_Stream5_IRQHandler+0x2a>
	{
		DMA_ClearITPendingBit(DMA1_Stream5, DMA_IT_TCIF5);
 80011f6:	4907      	ldr	r1, [pc, #28]	; (8001214 <DMA1_Stream5_IRQHandler+0x30>)
 80011f8:	4807      	ldr	r0, [pc, #28]	; (8001218 <DMA1_Stream5_IRQHandler+0x34>)
 80011fa:	f000 ff37 	bl	800206c <DMA_ClearITPendingBit>
		TIM_SetAutoreload(TIM4,5250-1);
 80011fe:	f241 4181 	movw	r1, #5249	; 0x1481
 8001202:	4806      	ldr	r0, [pc, #24]	; (800121c <DMA1_Stream5_IRQHandler+0x38>)
 8001204:	f000 fae0 	bl	80017c8 <TIM_SetAutoreload>
		outputDone = 1;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <DMA1_Stream5_IRQHandler+0x3c>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
	}
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20008800 	.word	0x20008800
 8001218:	40026088 	.word	0x40026088
 800121c:	40000800 	.word	0x40000800
 8001220:	20000001 	.word	0x20000001

08001224 <main>:

int main(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	buffer = (uint16_t*)malloc(sizeof(uint16_t)*size);
 8001228:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <main+0xbc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f001 fa28 	bl	8002684 <malloc>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <main+0xc0>)
 800123a:	601a      	str	r2, [r3, #0]
	initButtons();
 800123c:	f7ff ff6e 	bl	800111c <initButtons>

	while (1)
	{
		if(inputDone)
 8001240:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <main+0xc4>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d009      	beq.n	800125c <main+0x38>
		{
			STM_EVAL_LEDInit(LED4);
 8001248:	2000      	movs	r0, #0
 800124a:	f000 f913 	bl	8001474 <STM_EVAL_LEDInit>
			STM_EVAL_LEDOn(LED4);
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f93e 	bl	80014d0 <STM_EVAL_LEDOn>
			STM_EVAL_LEDOff(LED5);
 8001254:	2002      	movs	r0, #2
 8001256:	f000 f953 	bl	8001500 <STM_EVAL_LEDOff>
 800125a:	e008      	b.n	800126e <main+0x4a>
		}
		else
		{
			STM_EVAL_LEDOff(LED4);
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f94f 	bl	8001500 <STM_EVAL_LEDOff>
			STM_EVAL_LEDInit(LED5);
 8001262:	2002      	movs	r0, #2
 8001264:	f000 f906 	bl	8001474 <STM_EVAL_LEDInit>
			STM_EVAL_LEDOn(LED5);
 8001268:	2002      	movs	r0, #2
 800126a:	f000 f931 	bl	80014d0 <STM_EVAL_LEDOn>
		}
		if(outputDone && checkButton(0)==1)
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <main+0xc8>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d013      	beq.n	800129e <main+0x7a>
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff ff6a 	bl	8001150 <checkButton>
 800127c:	4603      	mov	r3, r0
 800127e:	2b01      	cmp	r3, #1
 8001280:	d10d      	bne.n	800129e <main+0x7a>
		{
			inputDone = 0;
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <main+0xc4>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
			outputDone = 0;
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <main+0xc8>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
			initAudioIn(buffer, size);
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <main+0xc0>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <main+0xbc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4619      	mov	r1, r3
 8001298:	4610      	mov	r0, r2
 800129a:	f7ff fe9d 	bl	8000fd8 <initAudioIn>
		}

		if(process)
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <main+0xcc>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00a      	beq.n	80012bc <main+0x98>
		{
			triCarrier(buffer,size,100);
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <main+0xc0>)
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <main+0xbc>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2264      	movs	r2, #100	; 0x64
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff feb1 	bl	8001018 <triCarrier>
			process = 0;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <main+0xcc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
		}

		if(checkButton(0)==1)
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff ff47 	bl	8001150 <checkButton>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d106      	bne.n	80012d6 <main+0xb2>
		{
			STM_EVAL_LEDInit(LED3);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f000 f8d3 	bl	8001474 <STM_EVAL_LEDInit>
			STM_EVAL_LEDOn(LED3);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f000 f8fe 	bl	80014d0 <STM_EVAL_LEDOn>
 80012d4:	e7b4      	b.n	8001240 <main+0x1c>
		}
		else
		{
			STM_EVAL_LEDOff(LED3);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f000 f912 	bl	8001500 <STM_EVAL_LEDOff>
		}
	}
 80012dc:	e7b0      	b.n	8001240 <main+0x1c>
 80012de:	bf00      	nop
 80012e0:	20000004 	.word	0x20000004
 80012e4:	200000b8 	.word	0x200000b8
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000001 	.word	0x20000001
 80012f0:	200000a8 	.word	0x200000a8

080012f4 <EVAL_AUDIO_TransferComplete_CallBack>:
}


void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){return;}
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop

0800130c <EVAL_AUDIO_GetSampleCallBack>:
uint16_t EVAL_AUDIO_GetSampleCallBack(void){return -1;}
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
 8001310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop

08001320 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8001324:	4b37      	ldr	r3, [pc, #220]	; (8001404 <Audio_MAL_IRQHandler+0xe4>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b37      	ldr	r3, [pc, #220]	; (8001408 <Audio_MAL_IRQHandler+0xe8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	4610      	mov	r0, r2
 8001330:	f000 fda0 	bl	8001e74 <DMA_GetFlagStatus>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d062      	beq.n	8001400 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800133a:	4b34      	ldr	r3, [pc, #208]	; (800140c <Audio_MAL_IRQHandler+0xec>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d04a      	beq.n	80013d8 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8001342:	bf00      	nop
 8001344:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <Audio_MAL_IRQHandler+0xe4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fd7b 	bl	8001e44 <DMA_GetCmdStatus>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f7      	bne.n	8001344 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <Audio_MAL_IRQHandler+0xe4>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <Audio_MAL_IRQHandler+0xe8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	4610      	mov	r0, r2
 8001360:	f000 fdc4 	bl	8001eec <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <Audio_MAL_IRQHandler+0xf0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <Audio_MAL_IRQHandler+0xf4>)
 800136c:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800136e:	4b27      	ldr	r3, [pc, #156]	; (800140c <Audio_MAL_IRQHandler+0xec>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001376:	4293      	cmp	r3, r2
 8001378:	bf28      	it	cs
 800137a:	4613      	movcs	r3, r2
 800137c:	4a25      	ldr	r2, [pc, #148]	; (8001414 <Audio_MAL_IRQHandler+0xf4>)
 800137e:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8001380:	4b20      	ldr	r3, [pc, #128]	; (8001404 <Audio_MAL_IRQHandler+0xe4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4923      	ldr	r1, [pc, #140]	; (8001414 <Audio_MAL_IRQHandler+0xf4>)
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fcb0 	bl	8001cec <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <Audio_MAL_IRQHandler+0xe4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2101      	movs	r1, #1
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fd3a 	bl	8001e0c <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <Audio_MAL_IRQHandler+0xf0>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <Audio_MAL_IRQHandler+0xec>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013a4:	428b      	cmp	r3, r1
 80013a6:	bf28      	it	cs
 80013a8:	460b      	movcs	r3, r1
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	4a18      	ldr	r2, [pc, #96]	; (8001410 <Audio_MAL_IRQHandler+0xf0>)
 80013b0:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <Audio_MAL_IRQHandler+0xec>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <Audio_MAL_IRQHandler+0xec>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013be:	428b      	cmp	r3, r1
 80013c0:	bf28      	it	cs
 80013c2:	460b      	movcs	r3, r1
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	4a11      	ldr	r2, [pc, #68]	; (800140c <Audio_MAL_IRQHandler+0xec>)
 80013c8:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <Audio_MAL_IRQHandler+0xe4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2101      	movs	r1, #1
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 fd1b 	bl	8001e0c <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80013d6:	e013      	b.n	8001400 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <Audio_MAL_IRQHandler+0xe4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fd14 	bl	8001e0c <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <Audio_MAL_IRQHandler+0xe4>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <Audio_MAL_IRQHandler+0xe8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	4610      	mov	r0, r2
 80013f0:	f000 fd7c 	bl	8001eec <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <Audio_MAL_IRQHandler+0xf0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff7a 	bl	80012f4 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000010 	.word	0x20000010
 8001408:	20000014 	.word	0x20000014
 800140c:	20000008 	.word	0x20000008
 8001410:	200000bc 	.word	0x200000bc
 8001414:	200000fc 	.word	0x200000fc

08001418 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800141c:	f7ff ff80 	bl	8001320 <Audio_MAL_IRQHandler>
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001428:	f7ff ff7a 	bl	8001320 <Audio_MAL_IRQHandler>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001434:	2102      	movs	r1, #2
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <SPI3_IRQHandler+0x3c>)
 8001438:	f000 fa20 	bl	800187c <SPI_I2S_GetFlagStatus>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d011      	beq.n	8001466 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <SPI3_IRQHandler+0x40>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d106      	bne.n	8001458 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800144a:	f7ff ff5f 	bl	800130c <EVAL_AUDIO_GetSampleCallBack>
 800144e:	4603      	mov	r3, r0
 8001450:	4619      	mov	r1, r3
 8001452:	2004      	movs	r0, #4
 8001454:	f000 fea0 	bl	8002198 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8001458:	f7ff ff58 	bl	800130c <EVAL_AUDIO_GetSampleCallBack>
 800145c:	4603      	mov	r3, r0
 800145e:	4619      	mov	r1, r3
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <SPI3_IRQHandler+0x3c>)
 8001462:	f000 f9fb 	bl	800185c <SPI_I2S_SendData>
  }
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40003c00 	.word	0x40003c00
 8001470:	2000000c 	.word	0x2000000c

08001474 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <STM_EVAL_LEDInit+0x50>)
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	2101      	movs	r1, #1
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fa13 	bl	80018b4 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <STM_EVAL_LEDInit+0x54>)
 8001492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001496:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001498:	2301      	movs	r3, #1
 800149a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800149c:	2300      	movs	r3, #0
 800149e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80014a4:	2302      	movs	r3, #2
 80014a6:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4a08      	ldr	r2, [pc, #32]	; (80014cc <STM_EVAL_LEDInit+0x58>)
 80014ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b0:	f107 0208 	add.w	r2, r7, #8
 80014b4:	4611      	mov	r1, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fa9c 	bl	80019f4 <GPIO_Init>
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	080027b0 	.word	0x080027b0
 80014c8:	080027a8 	.word	0x080027a8
 80014cc:	20000018 	.word	0x20000018

080014d0 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <STM_EVAL_LEDOn+0x28>)
 80014de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	4905      	ldr	r1, [pc, #20]	; (80014fc <STM_EVAL_LEDOn+0x2c>)
 80014e6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80014ea:	831a      	strh	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	20000018 	.word	0x20000018
 80014fc:	080027a8 	.word	0x080027a8

08001500 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <STM_EVAL_LEDOff+0x28>)
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	79fa      	ldrb	r2, [r7, #7]
 8001514:	4905      	ldr	r1, [pc, #20]	; (800152c <STM_EVAL_LEDOff+0x2c>)
 8001516:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800151a:	835a      	strh	r2, [r3, #26]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	20000018 	.word	0x20000018
 800152c:	080027a8 	.word	0x080027a8

08001530 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a60      	ldr	r2, [pc, #384]	; (80016bc <TIM_DeInit+0x18c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d108      	bne.n	8001552 <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001540:	2101      	movs	r1, #1
 8001542:	2001      	movs	r0, #1
 8001544:	f000 fa36 	bl	80019b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001548:	2100      	movs	r1, #0
 800154a:	2001      	movs	r0, #1
 800154c:	f000 fa32 	bl	80019b4 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001550:	e0af      	b.n	80016b2 <TIM_DeInit+0x182>
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001558:	d108      	bne.n	800156c <TIM_DeInit+0x3c>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800155a:	2101      	movs	r1, #1
 800155c:	2001      	movs	r0, #1
 800155e:	f000 fa09 	bl	8001974 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8001562:	2100      	movs	r1, #0
 8001564:	2001      	movs	r0, #1
 8001566:	f000 fa05 	bl	8001974 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800156a:	e0a2      	b.n	80016b2 <TIM_DeInit+0x182>
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a54      	ldr	r2, [pc, #336]	; (80016c0 <TIM_DeInit+0x190>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d108      	bne.n	8001586 <TIM_DeInit+0x56>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001574:	2101      	movs	r1, #1
 8001576:	2002      	movs	r0, #2
 8001578:	f000 f9fc 	bl	8001974 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800157c:	2100      	movs	r1, #0
 800157e:	2002      	movs	r0, #2
 8001580:	f000 f9f8 	bl	8001974 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001584:	e095      	b.n	80016b2 <TIM_DeInit+0x182>
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4e      	ldr	r2, [pc, #312]	; (80016c4 <TIM_DeInit+0x194>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d108      	bne.n	80015a0 <TIM_DeInit+0x70>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800158e:	2101      	movs	r1, #1
 8001590:	2004      	movs	r0, #4
 8001592:	f000 f9ef 	bl	8001974 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001596:	2100      	movs	r1, #0
 8001598:	2004      	movs	r0, #4
 800159a:	f000 f9eb 	bl	8001974 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800159e:	e088      	b.n	80016b2 <TIM_DeInit+0x182>
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a49      	ldr	r2, [pc, #292]	; (80016c8 <TIM_DeInit+0x198>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d108      	bne.n	80015ba <TIM_DeInit+0x8a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80015a8:	2101      	movs	r1, #1
 80015aa:	2008      	movs	r0, #8
 80015ac:	f000 f9e2 	bl	8001974 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80015b0:	2100      	movs	r1, #0
 80015b2:	2008      	movs	r0, #8
 80015b4:	f000 f9de 	bl	8001974 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80015b8:	e07b      	b.n	80016b2 <TIM_DeInit+0x182>
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a43      	ldr	r2, [pc, #268]	; (80016cc <TIM_DeInit+0x19c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d108      	bne.n	80015d4 <TIM_DeInit+0xa4>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80015c2:	2101      	movs	r1, #1
 80015c4:	2010      	movs	r0, #16
 80015c6:	f000 f9d5 	bl	8001974 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80015ca:	2100      	movs	r1, #0
 80015cc:	2010      	movs	r0, #16
 80015ce:	f000 f9d1 	bl	8001974 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80015d2:	e06e      	b.n	80016b2 <TIM_DeInit+0x182>
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a3e      	ldr	r2, [pc, #248]	; (80016d0 <TIM_DeInit+0x1a0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d108      	bne.n	80015ee <TIM_DeInit+0xbe>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80015dc:	2101      	movs	r1, #1
 80015de:	2020      	movs	r0, #32
 80015e0:	f000 f9c8 	bl	8001974 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80015e4:	2100      	movs	r1, #0
 80015e6:	2020      	movs	r0, #32
 80015e8:	f000 f9c4 	bl	8001974 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80015ec:	e061      	b.n	80016b2 <TIM_DeInit+0x182>
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a38      	ldr	r2, [pc, #224]	; (80016d4 <TIM_DeInit+0x1a4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d108      	bne.n	8001608 <TIM_DeInit+0xd8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80015f6:	2101      	movs	r1, #1
 80015f8:	2002      	movs	r0, #2
 80015fa:	f000 f9db 	bl	80019b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80015fe:	2100      	movs	r1, #0
 8001600:	2002      	movs	r0, #2
 8001602:	f000 f9d7 	bl	80019b4 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001606:	e054      	b.n	80016b2 <TIM_DeInit+0x182>
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a33      	ldr	r2, [pc, #204]	; (80016d8 <TIM_DeInit+0x1a8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d10a      	bne.n	8001626 <TIM_DeInit+0xf6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8001610:	2101      	movs	r1, #1
 8001612:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001616:	f000 f9cd 	bl	80019b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800161a:	2100      	movs	r1, #0
 800161c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001620:	f000 f9c8 	bl	80019b4 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001624:	e045      	b.n	80016b2 <TIM_DeInit+0x182>
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a2c      	ldr	r2, [pc, #176]	; (80016dc <TIM_DeInit+0x1ac>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d10a      	bne.n	8001644 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800162e:	2101      	movs	r1, #1
 8001630:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001634:	f000 f9be 	bl	80019b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8001638:	2100      	movs	r1, #0
 800163a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800163e:	f000 f9b9 	bl	80019b4 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001642:	e036      	b.n	80016b2 <TIM_DeInit+0x182>
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a26      	ldr	r2, [pc, #152]	; (80016e0 <TIM_DeInit+0x1b0>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d10a      	bne.n	8001662 <TIM_DeInit+0x132>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800164c:	2101      	movs	r1, #1
 800164e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001652:	f000 f9af 	bl	80019b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001656:	2100      	movs	r1, #0
 8001658:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800165c:	f000 f9aa 	bl	80019b4 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001660:	e027      	b.n	80016b2 <TIM_DeInit+0x182>
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <TIM_DeInit+0x1b4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d108      	bne.n	800167c <TIM_DeInit+0x14c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800166a:	2101      	movs	r1, #1
 800166c:	2040      	movs	r0, #64	; 0x40
 800166e:	f000 f981 	bl	8001974 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001672:	2100      	movs	r1, #0
 8001674:	2040      	movs	r0, #64	; 0x40
 8001676:	f000 f97d 	bl	8001974 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800167a:	e01a      	b.n	80016b2 <TIM_DeInit+0x182>
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <TIM_DeInit+0x1b8>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d108      	bne.n	8001696 <TIM_DeInit+0x166>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001684:	2101      	movs	r1, #1
 8001686:	2080      	movs	r0, #128	; 0x80
 8001688:	f000 f974 	bl	8001974 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800168c:	2100      	movs	r1, #0
 800168e:	2080      	movs	r0, #128	; 0x80
 8001690:	f000 f970 	bl	8001974 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001694:	e00d      	b.n	80016b2 <TIM_DeInit+0x182>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a14      	ldr	r2, [pc, #80]	; (80016ec <TIM_DeInit+0x1bc>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d109      	bne.n	80016b2 <TIM_DeInit+0x182>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800169e:	2101      	movs	r1, #1
 80016a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016a4:	f000 f966 	bl	8001974 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 80016a8:	2100      	movs	r1, #0
 80016aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016ae:	f000 f961 	bl	8001974 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40010000 	.word	0x40010000
 80016c0:	40000400 	.word	0x40000400
 80016c4:	40000800 	.word	0x40000800
 80016c8:	40000c00 	.word	0x40000c00
 80016cc:	40001000 	.word	0x40001000
 80016d0:	40001400 	.word	0x40001400
 80016d4:	40010400 	.word	0x40010400
 80016d8:	40014000 	.word	0x40014000
 80016dc:	40014400 	.word	0x40014400
 80016e0:	40014800 	.word	0x40014800
 80016e4:	40001800 	.word	0x40001800
 80016e8:	40001c00 	.word	0x40001c00
 80016ec:	40002000 	.word	0x40002000

080016f0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a29      	ldr	r2, [pc, #164]	; (80017ac <TIM_TimeBaseInit+0xbc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d013      	beq.n	8001734 <TIM_TimeBaseInit+0x44>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a28      	ldr	r2, [pc, #160]	; (80017b0 <TIM_TimeBaseInit+0xc0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d00f      	beq.n	8001734 <TIM_TimeBaseInit+0x44>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171a:	d00b      	beq.n	8001734 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <TIM_TimeBaseInit+0xc4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d007      	beq.n	8001734 <TIM_TimeBaseInit+0x44>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a24      	ldr	r2, [pc, #144]	; (80017b8 <TIM_TimeBaseInit+0xc8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d003      	beq.n	8001734 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a23      	ldr	r2, [pc, #140]	; (80017bc <TIM_TimeBaseInit+0xcc>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d108      	bne.n	8001746 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800173a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	885a      	ldrh	r2, [r3, #2]
 8001740:	89fb      	ldrh	r3, [r7, #14]
 8001742:	4313      	orrs	r3, r2
 8001744:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <TIM_TimeBaseInit+0xd0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00c      	beq.n	8001768 <TIM_TimeBaseInit+0x78>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <TIM_TimeBaseInit+0xd4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d008      	beq.n	8001768 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001756:	89fb      	ldrh	r3, [r7, #14]
 8001758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800175c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	891a      	ldrh	r2, [r3, #8]
 8001762:	89fb      	ldrh	r3, [r7, #14]
 8001764:	4313      	orrs	r3, r2
 8001766:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	89fa      	ldrh	r2, [r7, #14]
 800176c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	881a      	ldrh	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <TIM_TimeBaseInit+0xbc>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d003      	beq.n	800178e <TIM_TimeBaseInit+0x9e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <TIM_TimeBaseInit+0xc0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d104      	bne.n	8001798 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	7a9b      	ldrb	r3, [r3, #10]
 8001792:	b29a      	uxth	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	829a      	strh	r2, [r3, #20]
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40010000 	.word	0x40010000
 80017b0:	40010400 	.word	0x40010400
 80017b4:	40000400 	.word	0x40000400
 80017b8:	40000800 	.word	0x40000800
 80017bc:	40000c00 	.word	0x40000c00
 80017c0:	40001000 	.word	0x40001000
 80017c4:	40001400 	.word	0x40001400

080017c8 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d008      	beq.n	8001808 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	b29a      	uxth	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001806:	e007      	b.n	8001818 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	b29a      	uxth	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	801a      	strh	r2, [r3, #0]
  }
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	889b      	ldrh	r3, [r3, #4]
 8001834:	b29b      	uxth	r3, r3
 8001836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800183a:	b29a      	uxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	889b      	ldrh	r3, [r3, #4]
 8001844:	b29a      	uxth	r2, r3
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	4313      	orrs	r3, r2
 800184a:	b29a      	uxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	809a      	strh	r2, [r3, #4]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	819a      	strh	r2, [r3, #12]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop

0800187c <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	891b      	ldrh	r3, [r3, #8]
 8001890:	b29a      	uxth	r2, r3
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	4013      	ands	r3, r2
 8001896:	b29b      	uxth	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d002      	beq.n	80018a2 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800189c:	2301      	movs	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
 80018a0:	e001      	b.n	80018a6 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80018c6:	490a      	ldr	r1, [pc, #40]	; (80018f0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80018ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80018d2:	e006      	b.n	80018e2 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80018d4:	4906      	ldr	r1, [pc, #24]	; (80018f0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80018d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	43db      	mvns	r3, r3
 80018de:	4013      	ands	r3, r2
 80018e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800

080018f4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001906:	490a      	ldr	r1, [pc, #40]	; (8001930 <RCC_APB1PeriphClockCmd+0x3c>)
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <RCC_APB1PeriphClockCmd+0x3c>)
 800190a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4313      	orrs	r3, r2
 8001910:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001912:	e006      	b.n	8001922 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001914:	4906      	ldr	r1, [pc, #24]	; (8001930 <RCC_APB1PeriphClockCmd+0x3c>)
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <RCC_APB1PeriphClockCmd+0x3c>)
 8001918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	43db      	mvns	r3, r3
 800191e:	4013      	ands	r3, r2
 8001920:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800

08001934 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001946:	490a      	ldr	r1, [pc, #40]	; (8001970 <RCC_APB2PeriphClockCmd+0x3c>)
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <RCC_APB2PeriphClockCmd+0x3c>)
 800194a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4313      	orrs	r3, r2
 8001950:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001952:	e006      	b.n	8001962 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001954:	4906      	ldr	r1, [pc, #24]	; (8001970 <RCC_APB2PeriphClockCmd+0x3c>)
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <RCC_APB2PeriphClockCmd+0x3c>)
 8001958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	43db      	mvns	r3, r3
 800195e:	4013      	ands	r3, r2
 8001960:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800

08001974 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001986:	490a      	ldr	r1, [pc, #40]	; (80019b0 <RCC_APB1PeriphResetCmd+0x3c>)
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <RCC_APB1PeriphResetCmd+0x3c>)
 800198a:	6a1a      	ldr	r2, [r3, #32]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4313      	orrs	r3, r2
 8001990:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001992:	e006      	b.n	80019a2 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001994:	4906      	ldr	r1, [pc, #24]	; (80019b0 <RCC_APB1PeriphResetCmd+0x3c>)
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <RCC_APB1PeriphResetCmd+0x3c>)
 8001998:	6a1a      	ldr	r2, [r3, #32]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	43db      	mvns	r3, r3
 800199e:	4013      	ands	r3, r2
 80019a0:	620b      	str	r3, [r1, #32]
  }
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800

080019b4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d006      	beq.n	80019d4 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80019c6:	490a      	ldr	r1, [pc, #40]	; (80019f0 <RCC_APB2PeriphResetCmd+0x3c>)
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <RCC_APB2PeriphResetCmd+0x3c>)
 80019ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 80019d2:	e006      	b.n	80019e2 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80019d4:	4906      	ldr	r1, [pc, #24]	; (80019f0 <RCC_APB2PeriphResetCmd+0x3c>)
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <RCC_APB2PeriphResetCmd+0x3c>)
 80019d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	43db      	mvns	r3, r3
 80019de:	4013      	ands	r3, r2
 80019e0:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800

080019f4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e076      	b.n	8001afe <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001a10:	2201      	movs	r2, #1
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d165      	bne.n	8001af8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2103      	movs	r1, #3
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	791b      	ldrb	r3, [r3, #4]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	791b      	ldrb	r3, [r3, #4]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d003      	beq.n	8001a6a <GPIO_Init+0x76>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	791b      	ldrb	r3, [r3, #4]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d12e      	bne.n	8001ac8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2103      	movs	r1, #3
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	795b      	ldrb	r3, [r3, #5]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	799b      	ldrb	r3, [r3, #6]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2103      	movs	r1, #3
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	401a      	ands	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	79db      	ldrb	r3, [r3, #7]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3301      	adds	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	2b0f      	cmp	r3, #15
 8001b02:	d985      	bls.n	8001a10 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001b04:	bf00      	nop
 8001b06:	371c      	adds	r7, #28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	e001      	b.n	8001b36 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 0201 	bic.w	r2, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2221      	movs	r2, #33	; 0x21
 8001b7a:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a46      	ldr	r2, [pc, #280]	; (8001c98 <DMA_DeInit+0x154>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d103      	bne.n	8001b8c <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8001b84:	4b45      	ldr	r3, [pc, #276]	; (8001c9c <DMA_DeInit+0x158>)
 8001b86:	223d      	movs	r2, #61	; 0x3d
 8001b88:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001b8a:	e07e      	b.n	8001c8a <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a44      	ldr	r2, [pc, #272]	; (8001ca0 <DMA_DeInit+0x15c>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d104      	bne.n	8001b9e <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8001b94:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <DMA_DeInit+0x158>)
 8001b96:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8001b9a:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001b9c:	e075      	b.n	8001c8a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a40      	ldr	r2, [pc, #256]	; (8001ca4 <DMA_DeInit+0x160>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d104      	bne.n	8001bb0 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <DMA_DeInit+0x158>)
 8001ba8:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001bac:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001bae:	e06c      	b.n	8001c8a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a3d      	ldr	r2, [pc, #244]	; (8001ca8 <DMA_DeInit+0x164>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d104      	bne.n	8001bc2 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8001bb8:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <DMA_DeInit+0x158>)
 8001bba:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8001bbe:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001bc0:	e063      	b.n	8001c8a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a39      	ldr	r2, [pc, #228]	; (8001cac <DMA_DeInit+0x168>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d103      	bne.n	8001bd2 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8001bca:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <DMA_DeInit+0x158>)
 8001bcc:	4a38      	ldr	r2, [pc, #224]	; (8001cb0 <DMA_DeInit+0x16c>)
 8001bce:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001bd0:	e05b      	b.n	8001c8a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a37      	ldr	r2, [pc, #220]	; (8001cb4 <DMA_DeInit+0x170>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d103      	bne.n	8001be2 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8001bda:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <DMA_DeInit+0x158>)
 8001bdc:	4a36      	ldr	r2, [pc, #216]	; (8001cb8 <DMA_DeInit+0x174>)
 8001bde:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001be0:	e053      	b.n	8001c8a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a35      	ldr	r2, [pc, #212]	; (8001cbc <DMA_DeInit+0x178>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d103      	bne.n	8001bf2 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8001bea:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <DMA_DeInit+0x158>)
 8001bec:	4a34      	ldr	r2, [pc, #208]	; (8001cc0 <DMA_DeInit+0x17c>)
 8001bee:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001bf0:	e04b      	b.n	8001c8a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a33      	ldr	r2, [pc, #204]	; (8001cc4 <DMA_DeInit+0x180>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d104      	bne.n	8001c04 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <DMA_DeInit+0x158>)
 8001bfc:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001c00:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001c02:	e042      	b.n	8001c8a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a30      	ldr	r2, [pc, #192]	; (8001cc8 <DMA_DeInit+0x184>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d103      	bne.n	8001c14 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8001c0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <DMA_DeInit+0x188>)
 8001c0e:	223d      	movs	r2, #61	; 0x3d
 8001c10:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001c12:	e03a      	b.n	8001c8a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a2e      	ldr	r2, [pc, #184]	; (8001cd0 <DMA_DeInit+0x18c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d104      	bne.n	8001c26 <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <DMA_DeInit+0x188>)
 8001c1e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8001c22:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001c24:	e031      	b.n	8001c8a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a2a      	ldr	r2, [pc, #168]	; (8001cd4 <DMA_DeInit+0x190>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d104      	bne.n	8001c38 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8001c2e:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <DMA_DeInit+0x188>)
 8001c30:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001c34:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001c36:	e028      	b.n	8001c8a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a27      	ldr	r2, [pc, #156]	; (8001cd8 <DMA_DeInit+0x194>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d104      	bne.n	8001c4a <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <DMA_DeInit+0x188>)
 8001c42:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8001c46:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001c48:	e01f      	b.n	8001c8a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <DMA_DeInit+0x198>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d103      	bne.n	8001c5a <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <DMA_DeInit+0x188>)
 8001c54:	4a16      	ldr	r2, [pc, #88]	; (8001cb0 <DMA_DeInit+0x16c>)
 8001c56:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001c58:	e017      	b.n	8001c8a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a20      	ldr	r2, [pc, #128]	; (8001ce0 <DMA_DeInit+0x19c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d103      	bne.n	8001c6a <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <DMA_DeInit+0x188>)
 8001c64:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <DMA_DeInit+0x174>)
 8001c66:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001c68:	e00f      	b.n	8001c8a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ce4 <DMA_DeInit+0x1a0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d103      	bne.n	8001c7a <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <DMA_DeInit+0x188>)
 8001c74:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <DMA_DeInit+0x17c>)
 8001c76:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001c78:	e007      	b.n	8001c8a <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ce8 <DMA_DeInit+0x1a4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d103      	bne.n	8001c8a <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <DMA_DeInit+0x188>)
 8001c84:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001c88:	60da      	str	r2, [r3, #12]
    }
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40026010 	.word	0x40026010
 8001c9c:	40026000 	.word	0x40026000
 8001ca0:	40026028 	.word	0x40026028
 8001ca4:	40026040 	.word	0x40026040
 8001ca8:	40026058 	.word	0x40026058
 8001cac:	40026070 	.word	0x40026070
 8001cb0:	2000003d 	.word	0x2000003d
 8001cb4:	40026088 	.word	0x40026088
 8001cb8:	20000f40 	.word	0x20000f40
 8001cbc:	400260a0 	.word	0x400260a0
 8001cc0:	203d0000 	.word	0x203d0000
 8001cc4:	400260b8 	.word	0x400260b8
 8001cc8:	40026410 	.word	0x40026410
 8001ccc:	40026400 	.word	0x40026400
 8001cd0:	40026428 	.word	0x40026428
 8001cd4:	40026440 	.word	0x40026440
 8001cd8:	40026458 	.word	0x40026458
 8001cdc:	40026470 	.word	0x40026470
 8001ce0:	40026488 	.word	0x40026488
 8001ce4:	400264a0 	.word	0x400264a0
 8001ce8:	400264b8 	.word	0x400264b8

08001cec <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <DMA_Init+0xac>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001d16:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001d22:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001d2e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d34:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001d3a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d40:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f023 0307 	bic.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	4313      	orrs	r3, r2
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	691a      	ldr	r2, [r3, #16]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	60da      	str	r2, [r3, #12]
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	f01c803f 	.word	0xf01c803f

08001d9c <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop

08001e0c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d006      	beq.n	8001e2c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8001e2a:	e005      	b.n	8001e38 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 0201 	bic.w	r2, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	601a      	str	r2, [r3, #0]
  }
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e001      	b.n	8001e66 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a15      	ldr	r2, [pc, #84]	; (8001ee0 <DMA_GetFlagStatus+0x6c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d802      	bhi.n	8001e94 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <DMA_GetFlagStatus+0x70>)
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	e001      	b.n	8001e98 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <DMA_GetFlagStatus+0x74>)
 8001e96:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	e002      	b.n	8001eb0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001eb6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	75fb      	strb	r3, [r7, #23]
 8001eca:	e001      	b.n	8001ed0 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	4002640f 	.word	0x4002640f
 8001ee4:	40026000 	.word	0x40026000
 8001ee8:	40026400 	.word	0x40026400

08001eec <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <DMA_ClearFlag+0x50>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d802      	bhi.n	8001f04 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <DMA_ClearFlag+0x54>)
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	e001      	b.n	8001f08 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <DMA_ClearFlag+0x58>)
 8001f06:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001f18:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8001f20:	e006      	b.n	8001f30 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001f28:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	6093      	str	r3, [r2, #8]
  }    
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	4002640f 	.word	0x4002640f
 8001f40:	40026000 	.word	0x40026000
 8001f44:	40026400 	.word	0x40026400

08001f48 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	4613      	mov	r3, r2
 8001f54:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00f      	beq.n	8001f80 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	615a      	str	r2, [r3, #20]
 8001f72:	e005      	b.n	8001f80 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b80      	cmp	r3, #128	; 0x80
 8001f84:	d014      	beq.n	8001fb0 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 031e 	and.w	r3, r3, #30
 8001f96:	431a      	orrs	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8001f9c:	e008      	b.n	8001fb0 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f003 031e 	and.w	r3, r3, #30
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	401a      	ands	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a22      	ldr	r2, [pc, #136]	; (8002060 <DMA_GetITStatus+0xa4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d802      	bhi.n	8001fe0 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001fda:	4b22      	ldr	r3, [pc, #136]	; (8002064 <DMA_GetITStatus+0xa8>)
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	e001      	b.n	8001fe4 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001fe0:	4b21      	ldr	r3, [pc, #132]	; (8002068 <DMA_GetITStatus+0xac>)
 8001fe2:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001fea:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	0adb      	lsrs	r3, r3, #11
 8001ff6:	f003 031e 	and.w	r3, r3, #30
 8001ffa:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4013      	ands	r3, r2
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	e004      	b.n	8002012 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002010:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	e002      	b.n	800202a <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002030:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002034:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <DMA_GetITStatus+0x90>
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8002046:	2301      	movs	r3, #1
 8002048:	75fb      	strb	r3, [r7, #23]
 800204a:	e001      	b.n	8002050 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 800204c:	2300      	movs	r3, #0
 800204e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8002050:	7dfb      	ldrb	r3, [r7, #23]
}
 8002052:	4618      	mov	r0, r3
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	4002640f 	.word	0x4002640f
 8002064:	40026000 	.word	0x40026000
 8002068:	40026400 	.word	0x40026400

0800206c <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a10      	ldr	r2, [pc, #64]	; (80020bc <DMA_ClearITPendingBit+0x50>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d802      	bhi.n	8002084 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <DMA_ClearITPendingBit+0x54>)
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e001      	b.n	8002088 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <DMA_ClearITPendingBit+0x58>)
 8002086:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002098:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 80020a0:	e006      	b.n	80020b0 <DMA_ClearITPendingBit+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80020a8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	6093      	str	r3, [r2, #8]
  }   
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	4002640f 	.word	0x4002640f
 80020c0:	40026000 	.word	0x40026000
 80020c4:	40026400 	.word	0x40026400

080020c8 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 80020cc:	2101      	movs	r1, #1
 80020ce:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80020d2:	f7ff fc4f 	bl	8001974 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 80020d6:	2100      	movs	r1, #0
 80020d8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80020dc:	f7ff fc4a 	bl	8001974 <RCC_APB1PeriphResetCmd>
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80020f6:	4b14      	ldr	r3, [pc, #80]	; (8002148 <DAC_Init+0x64>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80020fc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4013      	ands	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800211c:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8002122:	4313      	orrs	r3, r2
 8002124:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8002134:	4a04      	ldr	r2, [pc, #16]	; (8002148 <DAC_Init+0x64>)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6013      	str	r3, [r2, #0]
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40007400 	.word	0x40007400

0800214c <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 800215e:	490d      	ldr	r1, [pc, #52]	; (8002194 <DAC_Cmd+0x48>)
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <DAC_Cmd+0x48>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2001      	movs	r0, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	fa00 f303 	lsl.w	r3, r0, r3
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8002170:	e009      	b.n	8002186 <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8002172:	4908      	ldr	r1, [pc, #32]	; (8002194 <DAC_Cmd+0x48>)
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <DAC_Cmd+0x48>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2001      	movs	r0, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	fa00 f303 	lsl.w	r3, r0, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	4013      	ands	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
  }
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40007400 	.word	0x40007400

08002198 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <DAC_SetChannel1Data+0x34>)
 80021aa:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	3308      	adds	r3, #8
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	461a      	mov	r2, r3
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	6013      	str	r3, [r2, #0]
}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40007400 	.word	0x40007400

080021d0 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 80021e2:	490e      	ldr	r1, [pc, #56]	; (800221c <DAC_DMACmd+0x4c>)
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <DAC_DMACmd+0x4c>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	fa00 f303 	lsl.w	r3, r0, r3
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 80021f6:	e00a      	b.n	800220e <DAC_DMACmd+0x3e>
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 80021f8:	4908      	ldr	r1, [pc, #32]	; (800221c <DAC_DMACmd+0x4c>)
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <DAC_DMACmd+0x4c>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	fa00 f303 	lsl.w	r3, r0, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	4013      	ands	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
  }
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40007400 	.word	0x40007400

08002220 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8002224:	2101      	movs	r1, #1
 8002226:	f44f 7080 	mov.w	r0, #256	; 0x100
 800222a:	f7ff fbc3 	bl	80019b4 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 800222e:	2100      	movs	r1, #0
 8002230:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002234:	f7ff fbbe 	bl	80019b4 <RCC_APB2PeriphResetCmd>
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}

0800223c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800225a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800225e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	791b      	ldrb	r3, [r3, #4]
 8002264:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800226a:	4313      	orrs	r3, r2
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <ADC_Init+0xa8>)
 8002282:	4013      	ands	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800228e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8002294:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	795b      	ldrb	r3, [r3, #5]
 800229a:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800229c:	4313      	orrs	r3, r2
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80022b6:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	7d1b      	ldrb	r3, [r3, #20]
 80022bc:	3b01      	subs	r3, #1
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	7afb      	ldrb	r3, [r7, #11]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80022c6:	7afb      	ldrb	r3, [r7, #11]
 80022c8:	051b      	lsls	r3, r3, #20
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	c0fff7fd 	.word	0xc0fff7fd

080022e8 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <ADC_CommonInit+0x48>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <ADC_CommonInit+0x4c>)
 80022fe:	4013      	ands	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800230a:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8002310:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8002316:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 800231e:	4a04      	ldr	r2, [pc, #16]	; (8002330 <ADC_CommonInit+0x48>)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6053      	str	r3, [r2, #4]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40012300 	.word	0x40012300
 8002334:	fffc30e0 	.word	0xfffc30e0

08002338 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d006      	beq.n	8002358 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f043 0201 	orr.w	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8002356:	e005      	b.n	8002364 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f023 0201 	bic.w	r2, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	609a      	str	r2, [r3, #8]
  }
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	4608      	mov	r0, r1
 800237a:	4611      	mov	r1, r2
 800237c:	461a      	mov	r2, r3
 800237e:	4603      	mov	r3, r0
 8002380:	70fb      	strb	r3, [r7, #3]
 8002382:	460b      	mov	r3, r1
 8002384:	70bb      	strb	r3, [r7, #2]
 8002386:	4613      	mov	r3, r2
 8002388:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	2b09      	cmp	r3, #9
 8002396:	d923      	bls.n	80023e0 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	f1a3 020a 	sub.w	r2, r3, #10
 80023a4:	4613      	mov	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4413      	add	r3, r2
 80023aa:	2207      	movs	r2, #7
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80023bc:	7879      	ldrb	r1, [r7, #1]
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	f1a3 020a 	sub.w	r2, r3, #10
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	e01e      	b.n	800241e <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4013      	ands	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8002400:	7879      	ldrb	r1, [r7, #1]
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	4313      	orrs	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800241e:	78bb      	ldrb	r3, [r7, #2]
 8002420:	2b06      	cmp	r3, #6
 8002422:	d821      	bhi.n	8002468 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002428:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800242a:	78bb      	ldrb	r3, [r7, #2]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	221f      	movs	r2, #31
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	43db      	mvns	r3, r3
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4013      	ands	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8002446:	78f9      	ldrb	r1, [r7, #3]
 8002448:	78bb      	ldrb	r3, [r7, #2]
 800244a:	1e5a      	subs	r2, r3, #1
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	4313      	orrs	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8002466:	e047      	b.n	80024f8 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8002468:	78bb      	ldrb	r3, [r7, #2]
 800246a:	2b0c      	cmp	r3, #12
 800246c:	d821      	bhi.n	80024b2 <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8002474:	78bb      	ldrb	r3, [r7, #2]
 8002476:	1fda      	subs	r2, r3, #7
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	221f      	movs	r2, #31
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	43db      	mvns	r3, r3
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4013      	ands	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8002490:	78f9      	ldrb	r1, [r7, #3]
 8002492:	78bb      	ldrb	r3, [r7, #2]
 8002494:	1fda      	subs	r2, r3, #7
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	fa01 f303 	lsl.w	r3, r1, r3
 80024a0:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80024b0:	e022      	b.n	80024f8 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80024b8:	78bb      	ldrb	r3, [r7, #2]
 80024ba:	f1a3 020d 	sub.w	r2, r3, #13
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	221f      	movs	r2, #31
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4013      	ands	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80024d6:	78f9      	ldrb	r1, [r7, #3]
 80024d8:	78bb      	ldrb	r3, [r7, #2]
 80024da:	f1a3 020d 	sub.w	r2, r3, #13
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d006      	beq.n	8002524 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8002522:	e005      	b.n	8002530 <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	609a      	str	r2, [r3, #8]
  }
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d006      	beq.n	800255c <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 800255a:	e005      	b.n	8002568 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
  }
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	2300      	movs	r3, #0
 8002582:	73bb      	strb	r3, [r7, #14]
 8002584:	230f      	movs	r3, #15
 8002586:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	78db      	ldrb	r3, [r3, #3]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d038      	beq.n	8002602 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <NVIC_Init+0xbc>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	43db      	mvns	r3, r3
 8002596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800259a:	0a1b      	lsrs	r3, r3, #8
 800259c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	f1c3 0304 	rsb	r3, r3, #4
 80025a4:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80025a6:	7b7a      	ldrb	r2, [r7, #13]
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	fa42 f303 	asr.w	r3, r2, r3
 80025ae:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	785b      	ldrb	r3, [r3, #1]
 80025b4:	461a      	mov	r2, r3
 80025b6:	7bbb      	ldrb	r3, [r7, #14]
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	789a      	ldrb	r2, [r3, #2]
 80025c2:	7b7b      	ldrb	r3, [r7, #13]
 80025c4:	4013      	ands	r3, r2
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80025d4:	4a17      	ldr	r2, [pc, #92]	; (8002634 <NVIC_Init+0xc0>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80025e2:	4a14      	ldr	r2, [pc, #80]	; (8002634 <NVIC_Init+0xc0>)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	2101      	movs	r1, #1
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80025fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002600:	e00f      	b.n	8002622 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002602:	490c      	ldr	r1, [pc, #48]	; (8002634 <NVIC_Init+0xc0>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	b2db      	uxtb	r3, r3
 800260c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2201      	movs	r2, #1
 8002618:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800261a:	f100 0320 	add.w	r3, r0, #32
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000ed00 	.word	0xe000ed00
 8002634:	e000e100 	.word	0xe000e100

08002638 <__libc_init_array>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <__libc_init_array+0x3c>)
 800263c:	4c0e      	ldr	r4, [pc, #56]	; (8002678 <__libc_init_array+0x40>)
 800263e:	1ae4      	subs	r4, r4, r3
 8002640:	10a4      	asrs	r4, r4, #2
 8002642:	2500      	movs	r5, #0
 8002644:	461e      	mov	r6, r3
 8002646:	42a5      	cmp	r5, r4
 8002648:	d004      	beq.n	8002654 <__libc_init_array+0x1c>
 800264a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800264e:	4798      	blx	r3
 8002650:	3501      	adds	r5, #1
 8002652:	e7f8      	b.n	8002646 <__libc_init_array+0xe>
 8002654:	f000 f89c 	bl	8002790 <_init>
 8002658:	4c08      	ldr	r4, [pc, #32]	; (800267c <__libc_init_array+0x44>)
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <__libc_init_array+0x48>)
 800265c:	1ae4      	subs	r4, r4, r3
 800265e:	10a4      	asrs	r4, r4, #2
 8002660:	2500      	movs	r5, #0
 8002662:	461e      	mov	r6, r3
 8002664:	42a5      	cmp	r5, r4
 8002666:	d004      	beq.n	8002672 <__libc_init_array+0x3a>
 8002668:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800266c:	4798      	blx	r3
 800266e:	3501      	adds	r5, #1
 8002670:	e7f8      	b.n	8002664 <__libc_init_array+0x2c>
 8002672:	bd70      	pop	{r4, r5, r6, pc}
 8002674:	080027c4 	.word	0x080027c4
 8002678:	080027c4 	.word	0x080027c4
 800267c:	080027c8 	.word	0x080027c8
 8002680:	080027c4 	.word	0x080027c4

08002684 <malloc>:
 8002684:	4b02      	ldr	r3, [pc, #8]	; (8002690 <malloc+0xc>)
 8002686:	4601      	mov	r1, r0
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	f000 b803 	b.w	8002694 <_malloc_r>
 800268e:	bf00      	nop
 8002690:	20000088 	.word	0x20000088

08002694 <_malloc_r>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	1ccd      	adds	r5, r1, #3
 8002698:	f025 0503 	bic.w	r5, r5, #3
 800269c:	3508      	adds	r5, #8
 800269e:	2d0c      	cmp	r5, #12
 80026a0:	bf38      	it	cc
 80026a2:	250c      	movcc	r5, #12
 80026a4:	2d00      	cmp	r5, #0
 80026a6:	4606      	mov	r6, r0
 80026a8:	db01      	blt.n	80026ae <_malloc_r+0x1a>
 80026aa:	42a9      	cmp	r1, r5
 80026ac:	d902      	bls.n	80026b4 <_malloc_r+0x20>
 80026ae:	230c      	movs	r3, #12
 80026b0:	6033      	str	r3, [r6, #0]
 80026b2:	e046      	b.n	8002742 <_malloc_r+0xae>
 80026b4:	f000 f85c 	bl	8002770 <__malloc_lock>
 80026b8:	4b23      	ldr	r3, [pc, #140]	; (8002748 <_malloc_r+0xb4>)
 80026ba:	681c      	ldr	r4, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	4621      	mov	r1, r4
 80026c0:	b1a1      	cbz	r1, 80026ec <_malloc_r+0x58>
 80026c2:	680b      	ldr	r3, [r1, #0]
 80026c4:	1b5b      	subs	r3, r3, r5
 80026c6:	d40e      	bmi.n	80026e6 <_malloc_r+0x52>
 80026c8:	2b0b      	cmp	r3, #11
 80026ca:	d903      	bls.n	80026d4 <_malloc_r+0x40>
 80026cc:	600b      	str	r3, [r1, #0]
 80026ce:	18cc      	adds	r4, r1, r3
 80026d0:	50cd      	str	r5, [r1, r3]
 80026d2:	e01e      	b.n	8002712 <_malloc_r+0x7e>
 80026d4:	428c      	cmp	r4, r1
 80026d6:	bf0d      	iteet	eq
 80026d8:	6863      	ldreq	r3, [r4, #4]
 80026da:	684b      	ldrne	r3, [r1, #4]
 80026dc:	6063      	strne	r3, [r4, #4]
 80026de:	6013      	streq	r3, [r2, #0]
 80026e0:	bf18      	it	ne
 80026e2:	460c      	movne	r4, r1
 80026e4:	e015      	b.n	8002712 <_malloc_r+0x7e>
 80026e6:	460c      	mov	r4, r1
 80026e8:	6849      	ldr	r1, [r1, #4]
 80026ea:	e7e9      	b.n	80026c0 <_malloc_r+0x2c>
 80026ec:	4c17      	ldr	r4, [pc, #92]	; (800274c <_malloc_r+0xb8>)
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	b91b      	cbnz	r3, 80026fa <_malloc_r+0x66>
 80026f2:	4630      	mov	r0, r6
 80026f4:	f000 f82c 	bl	8002750 <_sbrk_r>
 80026f8:	6020      	str	r0, [r4, #0]
 80026fa:	4629      	mov	r1, r5
 80026fc:	4630      	mov	r0, r6
 80026fe:	f000 f827 	bl	8002750 <_sbrk_r>
 8002702:	1c43      	adds	r3, r0, #1
 8002704:	d018      	beq.n	8002738 <_malloc_r+0xa4>
 8002706:	1cc4      	adds	r4, r0, #3
 8002708:	f024 0403 	bic.w	r4, r4, #3
 800270c:	42a0      	cmp	r0, r4
 800270e:	d10d      	bne.n	800272c <_malloc_r+0x98>
 8002710:	6025      	str	r5, [r4, #0]
 8002712:	4630      	mov	r0, r6
 8002714:	f000 f82d 	bl	8002772 <__malloc_unlock>
 8002718:	f104 000b 	add.w	r0, r4, #11
 800271c:	1d23      	adds	r3, r4, #4
 800271e:	f020 0007 	bic.w	r0, r0, #7
 8002722:	1ac3      	subs	r3, r0, r3
 8002724:	d00e      	beq.n	8002744 <_malloc_r+0xb0>
 8002726:	425a      	negs	r2, r3
 8002728:	50e2      	str	r2, [r4, r3]
 800272a:	bd70      	pop	{r4, r5, r6, pc}
 800272c:	1a21      	subs	r1, r4, r0
 800272e:	4630      	mov	r0, r6
 8002730:	f000 f80e 	bl	8002750 <_sbrk_r>
 8002734:	3001      	adds	r0, #1
 8002736:	d1eb      	bne.n	8002710 <_malloc_r+0x7c>
 8002738:	230c      	movs	r3, #12
 800273a:	6033      	str	r3, [r6, #0]
 800273c:	4630      	mov	r0, r6
 800273e:	f000 f818 	bl	8002772 <__malloc_unlock>
 8002742:	2000      	movs	r0, #0
 8002744:	bd70      	pop	{r4, r5, r6, pc}
 8002746:	bf00      	nop
 8002748:	200000b0 	.word	0x200000b0
 800274c:	200000ac 	.word	0x200000ac

08002750 <_sbrk_r>:
 8002750:	b538      	push	{r3, r4, r5, lr}
 8002752:	4c06      	ldr	r4, [pc, #24]	; (800276c <_sbrk_r+0x1c>)
 8002754:	2300      	movs	r3, #0
 8002756:	4605      	mov	r5, r0
 8002758:	4608      	mov	r0, r1
 800275a:	6023      	str	r3, [r4, #0]
 800275c:	f000 f80a 	bl	8002774 <_sbrk>
 8002760:	1c43      	adds	r3, r0, #1
 8002762:	d102      	bne.n	800276a <_sbrk_r+0x1a>
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	b103      	cbz	r3, 800276a <_sbrk_r+0x1a>
 8002768:	602b      	str	r3, [r5, #0]
 800276a:	bd38      	pop	{r3, r4, r5, pc}
 800276c:	20000138 	.word	0x20000138

08002770 <__malloc_lock>:
 8002770:	4770      	bx	lr

08002772 <__malloc_unlock>:
 8002772:	4770      	bx	lr

08002774 <_sbrk>:
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <_sbrk+0x14>)
 8002776:	6819      	ldr	r1, [r3, #0]
 8002778:	4602      	mov	r2, r0
 800277a:	b909      	cbnz	r1, 8002780 <_sbrk+0xc>
 800277c:	4903      	ldr	r1, [pc, #12]	; (800278c <_sbrk+0x18>)
 800277e:	6019      	str	r1, [r3, #0]
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	4402      	add	r2, r0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	4770      	bx	lr
 8002788:	200000b4 	.word	0x200000b4
 800278c:	2000013c 	.word	0x2000013c

08002790 <_init>:
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002792:	bf00      	nop
 8002794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002796:	bc08      	pop	{r3}
 8002798:	469e      	mov	lr, r3
 800279a:	4770      	bx	lr

0800279c <_fini>:
 800279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279e:	bf00      	nop
 80027a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a2:	bc08      	pop	{r3}
 80027a4:	469e      	mov	lr, r3
 80027a6:	4770      	bx	lr
